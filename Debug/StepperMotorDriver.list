
StepperMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a94  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08008ba8  08008ba8  00009ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800917c  0800917c  0000b20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800917c  0800917c  0000a17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009184  08009184  0000b20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009184  08009184  0000a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009188  08009188  0000a188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0800918c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000020c  08009398  0000b20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08009398  0000b4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012108  00000000  00000000  0000b235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc1  00000000  00000000  0001d33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001ff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  00020fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b898  00000000  00000000  00021cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103c1  00000000  00000000  0003d546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c31  00000000  00000000  0004d907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df538  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  000df57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e4ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b8c 	.word	0x08008b8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	08008b8c 	.word	0x08008b8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <_ZN9ComponentD1Ev>:
    virtual int read_id(uint8_t *id) = 0;

    /**
     * @brief Destructor.
     */
    virtual ~Component() {};
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <_ZN9ComponentD1Ev+0x1c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	08008dd4 	.word	0x08008dd4

0800117c <_ZN9ComponentD0Ev>:
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffe9 	bl	800115c <_ZN9ComponentD1Ev>
 800118a:	2104      	movs	r1, #4
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f004 ffc3 	bl	8006118 <_ZdlPvj>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN12StepperMotorD1Ev>:
    virtual void wait_while_active(void) = 0;

    /**
     * @brief Destructor.
     */
    virtual ~StepperMotor() {};
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <_ZN12StepperMotorD1Ev+0x20>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffd5 	bl	800115c <_ZN9ComponentD1Ev>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	08008d54 	.word	0x08008d54

080011c0 <_ZN12StepperMotorD0Ev>:
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffe7 	bl	800119c <_ZN12StepperMotorD1Ev>
 80011ce:	2104      	movs	r1, #4
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f004 ffa1 	bl	8006118 <_ZdlPvj>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZN5L6474D1Ev>:

class L6474 : public StepperMotor
{
public:
	L6474();
	virtual ~L6474(void) {}
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <_ZN5L6474D1Ev+0x20>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ffd3 	bl	800119c <_ZN12StepperMotorD1Ev>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08008cb4 	.word	0x08008cb4

08001204 <_ZN5L6474D0Ev>:
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ffe7 	bl	80011e0 <_ZN5L6474D1Ev>
 8001212:	2154      	movs	r1, #84	@ 0x54
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f004 ff7f 	bl	8006118 <_ZdlPvj>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN5L64744initEPv>:
	virtual int init(void *init = NULL)
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	{
		return (int) L6474_Init((void *) init);
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fb20 	bl	8001876 <_ZN5L647410L6474_InitEPv>
 8001236:	4603      	mov	r3, r0
	}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN5L64747read_idEPh>:


	virtual int read_id(uint8_t *id = NULL)
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	{
		return (int) L6474_ReadID((uint8_t *) id);
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fb37 	bl	80018c0 <_ZN5L647412L6474_ReadIDEPh>
 8001252:	4603      	mov	r3, r0
	}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZN5L647410get_statusEv>:

	virtual unsigned int get_status(void)
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_CmdGetStatus();
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 feb3 	bl	8001fd0 <_ZN5L647418L6474_CmdGetStatusEv>
 800126a:	4603      	mov	r3, r0
	}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_ZN5L647413get_parameterEj>:

	virtual float get_parameter(unsigned int parameter)
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	{
        unsigned int register_value = (unsigned int) L6474_CmdGetParam((L6474_Registers_t) parameter);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fdaf 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 800128a:	60b8      	str	r0, [r7, #8]
        float value;

        switch ((L6474_Registers_t) parameter) {
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b09      	cmp	r3, #9
 8001292:	d005      	beq.n	80012a0 <_ZN5L647413get_parameterEj+0x2c>
 8001294:	2b09      	cmp	r3, #9
 8001296:	db17      	blt.n	80012c8 <_ZN5L647413get_parameterEj+0x54>
 8001298:	3b0f      	subs	r3, #15
 800129a:	2b01      	cmp	r3, #1
 800129c:	d814      	bhi.n	80012c8 <_ZN5L647413get_parameterEj+0x54>
 800129e:	e009      	b.n	80012b4 <_ZN5L647413get_parameterEj+0x40>
            case L6474_TVAL:
                value = L6474_Par_to_Tval_Current((float) register_value);
 80012a0:	68b8      	ldr	r0, [r7, #8]
 80012a2:	f7ff fcf7 	bl	8000c94 <__aeabi_ui2f>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f001 fd54 	bl	8002d58 <_ZN5L647425L6474_Par_to_Tval_CurrentEf>
 80012b0:	60f8      	str	r0, [r7, #12]
                break;
 80012b2:	e00f      	b.n	80012d4 <_ZN5L647413get_parameterEj+0x60>
            case L6474_TON_MIN:
            case L6474_TOFF_MIN:
                value = L6474_Par_to_Tmin_Time((float) register_value);
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f7ff fced 	bl	8000c94 <__aeabi_ui2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f001 fd80 	bl	8002dc4 <_ZN5L647422L6474_Par_to_Tmin_TimeEf>
 80012c4:	60f8      	str	r0, [r7, #12]
                break;
 80012c6:	e005      	b.n	80012d4 <_ZN5L647413get_parameterEj+0x60>
            default:
                value = (float) register_value;
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f7ff fce3 	bl	8000c94 <__aeabi_ui2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	60fb      	str	r3, [r7, #12]
                break;
 80012d2:	bf00      	nop
        }

        return value;
 80012d4:	68fb      	ldr	r3, [r7, #12]
	}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_ZN5L647412get_positionEv>:
	virtual signed int get_position(void)
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	{
		return (signed int) L6474_GetPosition();
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fb64 	bl	80019b4 <_ZN5L647417L6474_GetPositionEv>
 80012ec:	4603      	mov	r3, r0
	}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN5L64748get_markEv>:

	virtual signed int get_mark(void)
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	{
		return (signed int) L6474_GetMark();
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fb2c 	bl	800195c <_ZN5L647413L6474_GetMarkEv>
 8001304:	4603      	mov	r3, r0
	}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZN5L64749get_speedEv>:

	virtual unsigned int get_speed(void)
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetCurrentSpeed();
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 faef 	bl	80018fa <_ZN5L647421L6474_GetCurrentSpeedEv>
 800131c:	4603      	mov	r3, r0
	}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_ZN5L647413get_max_speedEv>:

	virtual unsigned int get_max_speed(void)
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetMaxSpeed();
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fb26 	bl	8001980 <_ZN5L647417L6474_GetMaxSpeedEv>
 8001334:	4603      	mov	r3, r0
	}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZN5L647413get_min_speedEv>:

	virtual unsigned int get_min_speed(void)
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetMinSpeed();
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fb27 	bl	800199a <_ZN5L647417L6474_GetMinSpeedEv>
 800134c:	4603      	mov	r3, r0
	}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_ZN5L647416get_accelerationEv>:

	virtual unsigned int get_acceleration(void)
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetAcceleration();
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fabe 	bl	80018e0 <_ZN5L647421L6474_GetAccelerationEv>
 8001364:	4603      	mov	r3, r0
	}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_ZN5L647416get_decelerationEv>:

	virtual unsigned int get_deceleration(void)
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetDeceleration();
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 facc 	bl	8001914 <_ZN5L647421L6474_GetDecelerationEv>
 800137c:	4603      	mov	r3, r0
	}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_ZN5L647413get_directionEv>:

	virtual direction_t get_direction(void)
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	{
		return (direction_t) (L6474_GetDirection() == FORWARD ? StepperMotor::FWD : StepperMotor::BWD);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 ffe2 	bl	8002358 <_ZN5L647418L6474_GetDirectionEv>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <_ZN5L647413get_directionEv+0x18>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <_ZN5L647413get_directionEv+0x1a>
 800139e:	2300      	movs	r3, #0
	}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZN5L647413set_parameterEjf>:

	virtual void set_parameter(unsigned int parameter, float value)
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	{
        float register_value;

        switch ((L6474_Registers_t) parameter) {
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b09      	cmp	r3, #9
 80013ba:	d005      	beq.n	80013c8 <_ZN5L647413set_parameterEjf+0x20>
 80013bc:	2b09      	cmp	r3, #9
 80013be:	db0f      	blt.n	80013e0 <_ZN5L647413set_parameterEjf+0x38>
 80013c0:	3b0f      	subs	r3, #15
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d80c      	bhi.n	80013e0 <_ZN5L647413set_parameterEjf+0x38>
 80013c6:	e005      	b.n	80013d4 <_ZN5L647413set_parameterEjf+0x2c>
            case L6474_TVAL:
                register_value = L6474_Tval_Current_to_Par(value);
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f001 fca8 	bl	8002d20 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 80013d0:	6178      	str	r0, [r7, #20]
                break;
 80013d2:	e008      	b.n	80013e6 <_ZN5L647413set_parameterEjf+0x3e>
            case L6474_TON_MIN:
            case L6474_TOFF_MIN:
                register_value = L6474_Tmin_Time_to_Par(value);
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f001 fcda 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 80013dc:	6178      	str	r0, [r7, #20]
                break;
 80013de:	e002      	b.n	80013e6 <_ZN5L647413set_parameterEjf+0x3e>
            default:
                register_value = value;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	617b      	str	r3, [r7, #20]
                break;
 80013e4:	bf00      	nop
        }

        L6474_CmdSetParam((L6474_Registers_t) parameter, (unsigned int) register_value);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b2dc      	uxtb	r4, r3
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff fe96 	bl	800111c <__aeabi_f2uiz>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	4621      	mov	r1, r4
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 fe72 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
	}
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}

08001404 <_ZN5L64748set_homeEv>:

	virtual void set_home(void)
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	{
		L6474_SetHome();
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fc1a 	bl	8001c46 <_ZN5L647413L6474_SetHomeEv>
	}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZN5L64748set_markEv>:

	virtual void set_mark(void)
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	{
		L6474_SetMark();
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fc1c 	bl	8001c60 <_ZN5L647413L6474_SetMarkEv>
	}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZN5L647413set_max_speedEj>:

	virtual bool set_max_speed(unsigned int speed)
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	{
		L6474_SetMaxSpeed((unsigned int) speed);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fc1f 	bl	8001c84 <_ZN5L647417L6474_SetMaxSpeedEt>
		return true;
 8001446:	2301      	movs	r3, #1
	}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZN5L647413set_min_speedEj>:

	virtual bool set_min_speed(unsigned int speed)
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	{
		L6474_SetMinSpeed((unsigned int) speed);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fc43 	bl	8001cec <_ZN5L647417L6474_SetMinSpeedEt>
		return true;
 8001466:	2301      	movs	r3, #1
	}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_ZN5L647416set_accelerationEj>:

	virtual bool set_acceleration(unsigned int acceleration)
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	{
		L6474_SetAcceleration((unsigned int) acceleration);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fb90 	bl	8001ba6 <_ZN5L647421L6474_SetAccelerationEt>
		return true;
 8001486:	2301      	movs	r3, #1
	}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN5L647416set_decelerationEj>:

	virtual bool set_deceleration(unsigned int deceleration)
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	{
		L6474_SetDeceleration((unsigned int) deceleration);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fba8 	bl	8001bf6 <_ZN5L647421L6474_SetDecelerationEt>
		return true;
 80014a6:	2301      	movs	r3, #1
	}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN5L64745go_toEi>:

	virtual void go_to(signed int position)
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	{
		L6474_GoTo((signed int) position);
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 faaf 	bl	8001a20 <_ZN5L647410L6474_GoToEl>
	}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_ZN5L64747go_homeEv>:

	virtual void go_home(void)
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
	{
		L6474_GoHome();
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fa80 	bl	80019d8 <_ZN5L647412L6474_GoHomeEv>
	}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN5L64747go_markEv>:

	virtual void go_mark(void)
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	{
		L6474_GoMark();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fa81 	bl	80019f0 <_ZN5L647412L6474_GoMarkEv>
	}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_ZN5L64743runEN12StepperMotor11direction_tE>:
	virtual void run(direction_t direction)
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
	{
		L6474_Run((motorDir_t) (direction == StepperMotor::FWD ? FORWARD : BACKWARD));
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <_ZN5L64743runEN12StepperMotor11direction_tE+0x16>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <_ZN5L64743runEN12StepperMotor11direction_tE+0x18>
 800150c:	2300      	movs	r3, #0
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb24 	bl	8001b5e <_ZN5L64749L6474_RunE10motorDir_t>
	}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN5L64744moveEN12StepperMotor11direction_tEj>:

	virtual void move(direction_t direction, unsigned int steps)
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	460b      	mov	r3, r1
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	72fb      	strb	r3, [r7, #11]
	{
		L6474_Move((motorDir_t) (direction == StepperMotor::FWD ? FORWARD : BACKWARD), (unsigned int) steps);
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <_ZN5L64744moveEN12StepperMotor11direction_tEj+0x18>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <_ZN5L64744moveEN12StepperMotor11direction_tEj+0x1a>
 8001536:	2300      	movs	r3, #0
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4619      	mov	r1, r3
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fad3 	bl	8001ae8 <_ZN5L647410L6474_MoveE10motorDir_tm>
	}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_ZN5L64749soft_stopEv>:

	virtual void soft_stop(void)
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	{
		L6474_SoftStop();
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fbfe 	bl	8001d54 <_ZN5L647414L6474_SoftStopEv>
	}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN5L64749hard_stopEv>:

	virtual void hard_stop(void)
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	{
		L6474_HardStop();
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 faa6 	bl	8001aba <_ZN5L647414L6474_HardStopEv>
	}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_ZN5L64748soft_hizEv>:

	virtual void soft_hiz(void)
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	{
        L6474_SoftStop();
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fbe8 	bl	8001d54 <_ZN5L647414L6474_SoftStopEv>
        L6474_CmdDisable();
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fc17 	bl	8001db8 <_ZN5L647416L6474_CmdDisableEv>
	}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_ZN5L64748hard_hizEv>:

	virtual void hard_hiz(void)
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	{
        L6474_HardStop();
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa8d 	bl	8001aba <_ZN5L647414L6474_HardStopEv>
        L6474_CmdDisable();
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fc09 	bl	8001db8 <_ZN5L647416L6474_CmdDisableEv>
	}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_ZN5L647417wait_while_activeEv>:

	virtual void wait_while_active(void)
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	{
		L6474_WaitWhileActive();
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fbe9 	bl	8001d8e <_ZN5L647421L6474_WaitWhileActiveEv>
	}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_ZN5L647416get_device_stateEv>:

	virtual motorState_t get_device_state(void)
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	{
		return (motorState_t) L6474_GetDeviceState();
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f9ae 	bl	800192e <_ZN5L647420L6474_GetDeviceStateEv>
 80015d2:	4603      	mov	r3, r0
	}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN5L647420read_status_registerEv>:

	virtual uint16_t read_status_register(void)
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	{
		return (uint16_t) L6474_ReadStatusRegister();
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fe5f 	bl	80022a8 <_ZN5L647424L6474_ReadStatusRegisterEv>
 80015ea:	4603      	mov	r3, r0
	}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN5L647413set_step_modeEN12StepperMotor11step_mode_tE>:

	virtual bool set_step_mode(step_mode_t step_mode)
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
	{
        if ((motorStepMode_t) step_mode > STEP_MODE_1_16) {
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d901      	bls.n	800160a <_ZN5L647413set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8001606:	2300      	movs	r3, #0
 8001608:	e00b      	b.n	8001622 <_ZN5L647413set_step_modeEN12StepperMotor11step_mode_tE+0x2e>
        }

        soft_hiz();
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	336c      	adds	r3, #108	@ 0x6c
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
        L6474_SelectStepMode((motorStepMode_t) step_mode);
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fe52 	bl	80022c4 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t>
        return true;
 8001620:	2301      	movs	r3, #1
	}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_ZN5L647420attach_error_handlerEPFvtE>:

	virtual void attach_error_handler(void (*fptr)(uint16_t error))
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	{
		L6474_AttachErrorHandler((void (*)(uint16_t error)) fptr);
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f910 	bl	800185c <_ZN5L647424L6474_AttachErrorHandlerEPFvtE>
	}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN5L64746enableEv>:

	virtual void enable(void)
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	{
		L6474_CmdEnable();
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fbbf 	bl	8001dd0 <_ZN5L647415L6474_CmdEnableEv>
	}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_ZN5L64747disableEv>:

	virtual void disable(void)
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
	{
		L6474_CmdDisable();
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fba8 	bl	8001db8 <_ZN5L647416L6474_CmdDisableEv>
	}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_ZN5L647414get_fw_versionEv>:

	virtual uint8_t get_fw_version(void)
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	{
		return (uint8_t) L6474_GetFwVersion();
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f965 	bl	8001948 <_ZN5L647418L6474_GetFwVersionEv>
 800167e:	4603      	mov	r3, r0
	}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZN5L647411L6474_DelayEm>:

	//unimplemented
	status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead);
	status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite);
	status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes);
	void L6474_Delay(uint32_t delay)
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	{
		HAL_Delay(delay);
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f002 fb0a 	bl	8003cac <HAL_Delay>
	}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN5L647415L6474_EnableIrqEv>:

	void L6474_EnableIrq(void)
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80016a8:	b662      	cpsie	i
}
 80016aa:	bf00      	nop
	{
		__enable_irq();
	}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_ZN5L647416L6474_DisableIrqEv>:

	void L6474_DisableIrq(void)
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016be:	b672      	cpsid	i
}
 80016c0:	bf00      	nop
	{
		__disable_irq();
	}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <_ZN5L647413L6474_PwmInitEv>:

	void L6474_PwmInit(void) {}
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <_ZN5L647418L6474_ReleaseResetEv>:
	void L6474_PwmSetFreq(uint16_t frequency);
	void L6474_PwmStop(void);
	void L6474_ReleaseReset(void)
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ee:	4803      	ldr	r0, [pc, #12]	@ (80016fc <_ZN5L647418L6474_ReleaseResetEv+0x1c>)
 80016f0:	f002 ff6a 	bl	80045c8 <HAL_GPIO_WritePin>
	}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010800 	.word	0x40010800

08001700 <_ZN5L647422L6474_SetDirectionGpioEh>:

	void L6474_Reset(void)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	}
	void L6474_SetDirectionGpio(uint8_t gpioState)
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PinState(gpioState));
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	461a      	mov	r2, r3
 8001710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <_ZN5L647422L6474_SetDirectionGpioEh+0x24>)
 8001716:	f002 ff57 	bl	80045c8 <HAL_GPIO_WritePin>
	}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40010800 	.word	0x40010800

08001728 <_ZN5L647419L6474_SpiWriteBytesEPhS0_>:

	uint8_t L6474_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
	{
		return (uint8_t) (ReadWrite(pReceivedByte, pByteToTransmit, number_of_devices) == COMPONENT_OK ? 0 : 1);
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <_ZN5L647419L6474_SpiWriteBytesEPhS0_+0x30>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f001 fb5d 	bl	8002dfc <_ZN5L64749ReadWriteEPhS0_t>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
	}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000228 	.word	0x20000228

0800175c <_ZN9ComponentC1Ev>:
class Component {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <_ZN9ComponentC1Ev+0x1c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	08008dd4 	.word	0x08008dd4

0800177c <_ZN12StepperMotorC1Ev>:
class StepperMotor : public Component {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ffe8 	bl	800175c <_ZN9ComponentC1Ev>
 800178c:	4a03      	ldr	r2, [pc, #12]	@ (800179c <_ZN12StepperMotorC1Ev+0x20>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	08008d54 	.word	0x08008d54

080017a0 <_ZN5L6474C1Ev>:

/* SPI Transmission for Daisy-Chain Configuration. */
uint8_t L6474::spi_tx_bursts[L6474_CMD_ARG_MAX_NB_BYTES][MAX_NUMBER_OF_DEVICES];
uint8_t L6474::spi_rx_bursts[L6474_CMD_ARG_MAX_NB_BYTES][MAX_NUMBER_OF_DEVICES];

L6474::L6474()
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffe6 	bl	800177c <_ZN12StepperMotorC1Ev>
 80017b0:	4a16      	ldr	r2, [pc, #88]	@ (800180c <_ZN5L6474C1Ev+0x6c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fbe2 	bl	8002f84 <_ZN3PwmC1Ev>
{
	 if (!(number_of_devices < MAX_NUMBER_OF_DEVICES)) {
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <_ZN5L6474C1Ev+0x70>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d906      	bls.n	80017d6 <_ZN5L6474C1Ev+0x36>
		 printf("Instantiation of the L6474 component failed: it can be stacked up to %d times.\r\n", MAX_NUMBER_OF_DEVICES);
 80017c8:	2103      	movs	r1, #3
 80017ca:	4812      	ldr	r0, [pc, #72]	@ (8001814 <_ZN5L6474C1Ev+0x74>)
 80017cc:	f005 fab6 	bl	8006d3c <iprintf>
		 exit(EXIT_FAILURE);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f004 fcc7 	bl	8006164 <exit>
	 }

     error_handler_callback = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
     device_instance = number_of_devices++;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <_ZN5L6474C1Ev+0x70>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	b2d1      	uxtb	r1, r2
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <_ZN5L6474C1Ev+0x70>)
 80017e6:	7011      	strb	r1, [r2, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
     memset(spi_tx_bursts, 0, L6474_CMD_ARG_MAX_NB_BYTES * MAX_NUMBER_OF_DEVICES * sizeof(uint8_t));
 80017ee:	220c      	movs	r2, #12
 80017f0:	2100      	movs	r1, #0
 80017f2:	4809      	ldr	r0, [pc, #36]	@ (8001818 <_ZN5L6474C1Ev+0x78>)
 80017f4:	f005 fb12 	bl	8006e1c <memset>
     memset(spi_rx_bursts, 0, L6474_CMD_ARG_MAX_NB_BYTES * MAX_NUMBER_OF_DEVICES * sizeof(uint8_t));
 80017f8:	220c      	movs	r2, #12
 80017fa:	2100      	movs	r1, #0
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <_ZN5L6474C1Ev+0x7c>)
 80017fe:	f005 fb0d 	bl	8006e1c <memset>
}
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	08008cb4 	.word	0x08008cb4
 8001810:	20000228 	.word	0x20000228
 8001814:	08008ba8 	.word	0x08008ba8
 8001818:	2000022c 	.word	0x2000022c
 800181c:	20000238 	.word	0x20000238

08001820 <_ZN5L647415attach_flag_irqEPFvvE>:

void L6474::attach_flag_irq(void (*fptr)(void))
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	irqHandlers.irq.func = fptr;
 800182a:	4a04      	ldr	r2, [pc, #16]	@ (800183c <_ZN5L647415attach_flag_irqEPFvvE+0x1c>)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6093      	str	r3, [r2, #8]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000378 	.word	0x20000378

08001840 <_ZN5L647415enable_flag_irqEv>:

void L6474::enable_flag_irq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	irqHandlers.irq.enabled = true;
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <_ZN5L647415enable_flag_irqEv+0x18>)
 800184a:	2201      	movs	r2, #1
 800184c:	60da      	str	r2, [r3, #12]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000378 	.word	0x20000378

0800185c <_ZN5L647424L6474_AttachErrorHandlerEPFvtE>:
{
	irqHandlers.irq.enabled = false;
}

void L6474::L6474_AttachErrorHandler(void (*callback)(uint16_t error))
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  error_handler_callback = (void (*)(uint16_t error)) callback;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <_ZN5L647410L6474_InitEPv>:

status_t L6474::L6474_Init(void *init)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_PwmInit();
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff23 	bl	80016cc <_ZN5L647413L6474_PwmInitEv>

  /* Initialise the L6474s ------------------------------------------------*/

  /* Standby-reset deactivation */
  L6474_ReleaseReset();
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff2a 	bl	80016e0 <_ZN5L647418L6474_ReleaseResetEv>

  /* Let a delay after reset */
  L6474_Delay(1);
 800188c:	2101      	movs	r1, #1
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fefa 	bl	8001688 <_ZN5L647411L6474_DelayEm>

  /* Set device parameters to the predefined values from "l6474_target_config.h". */
  //L6474_SetDeviceParamsToPredefinedValues();

  if (init == NULL)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <_ZN5L647410L6474_InitEPv+0x2c>
    /* Set device registers to the predefined values from "l6474_target_config.h". */
    L6474_SetRegisterToPredefinedValues();
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fea4 	bl	80025e8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv>
 80018a0:	e003      	b.n	80018aa <_ZN5L647410L6474_InitEPv+0x34>
  else
    /* Set device registers to the passed initialization values. */
    L6474_SetRegisterToInitializationValues((L6474_init_t *) init);
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 ff99 	bl	80027dc <_ZN5L647439L6474_SetRegisterToInitializationValuesEP12L6474_init_t>

  /* Disable L6474 powerstage */
  L6474_CmdDisable();
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fa84 	bl	8001db8 <_ZN5L647416L6474_CmdDisableEv>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus();
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fb8d 	bl	8001fd0 <_ZN5L647418L6474_CmdGetStatusEv>

  return COMPONENT_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN5L647412L6474_ReadIDEPh>:

status_t L6474::L6474_ReadID(uint8_t *id)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  *id = device_instance;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	701a      	strb	r2, [r3, #0]

  return COMPONENT_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <_ZN5L647421L6474_GetAccelerationEv>:

uint16_t L6474::L6474_GetAcceleration(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return (device_prm.acceleration);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018ee:	b29b      	uxth	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <_ZN5L647421L6474_GetCurrentSpeedEv>:

uint16_t L6474::L6474_GetCurrentSpeed(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  return device_prm.speed;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001908:	b29b      	uxth	r3, r3
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <_ZN5L647421L6474_GetDecelerationEv>:

uint16_t L6474::L6474_GetDeceleration(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return (device_prm.deceleration);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001922:	b29b      	uxth	r3, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <_ZN5L647420L6474_GetDeviceStateEv>:

motorState_t L6474::L6474_GetDeviceState(void)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  return device_prm.motionState;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800193c:	b2db      	uxtb	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <_ZN5L647418L6474_GetFwVersionEv>:

uint8_t L6474::L6474_GetFwVersion(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return (L6474_FW_VERSION);
 8001950:	2305      	movs	r3, #5
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <_ZN5L647413L6474_GetMarkEv>:

int32_t L6474::L6474_GetMark(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return L6474_ConvertPosition(L6474_CmdGetParam(L6474_MARK));
 8001964:	2103      	movs	r1, #3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fa3e 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 800196c:	4603      	mov	r3, r0
 800196e:	4619      	mov	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fdb0 	bl	80024d6 <_ZN5L647421L6474_ConvertPositionEm>
 8001976:	4603      	mov	r3, r0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZN5L647417L6474_GetMaxSpeedEv>:

uint16_t L6474::L6474_GetMaxSpeed(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (device_prm.maxSpeed);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800198e:	b29b      	uxth	r3, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <_ZN5L647417L6474_GetMinSpeedEv>:

uint16_t L6474::L6474_GetMinSpeed(void)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  return (device_prm.minSpeed);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80019a8:	b29b      	uxth	r3, r3
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <_ZN5L647417L6474_GetPositionEv>:

int32_t L6474::L6474_GetPosition(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return L6474_ConvertPosition(L6474_CmdGetParam(L6474_ABS_POS));
 80019bc:	2101      	movs	r1, #1
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fa12 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fd84 	bl	80024d6 <_ZN5L647421L6474_ConvertPositionEm>
 80019ce:	4603      	mov	r3, r0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_ZN5L647412L6474_GoHomeEv>:

void L6474::L6474_GoHome(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  L6474_GoTo(0);
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f81c 	bl	8001a20 <_ZN5L647410L6474_GoToEl>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZN5L647412L6474_GoMarkEv>:

void L6474::L6474_GoMark(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    uint32_t mark;

    mark = L6474_ConvertPosition(L6474_CmdGetParam(L6474_MARK));
 80019f8:	2103      	movs	r1, #3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f9f4 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fd66 	bl	80024d6 <_ZN5L647421L6474_ConvertPositionEm>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60fb      	str	r3, [r7, #12]
    L6474_GoTo(mark);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f804 	bl	8001a20 <_ZN5L647410L6474_GoToEl>
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZN5L647410L6474_GoToEl>:

void L6474::L6474_GoTo(int32_t targetPosition)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  motorDir_t direction;
  int32_t steps;

  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <_ZN5L647410L6474_GoToEl+0x26>
  {
    L6474_HardStop();
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f83a 	bl	8001aba <_ZN5L647414L6474_HardStopEv>
  }

  /* Get current position */
  device_prm.currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(L6474_ABS_POS));
 8001a46:	2101      	movs	r1, #1
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f9cd 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4619      	mov	r1, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fd3f 	bl	80024d6 <_ZN5L647421L6474_ConvertPositionEm>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Compute the number of steps to perform */
  steps = targetPosition - device_prm.currentPosition;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	60bb      	str	r3, [r7, #8]

  if (steps >= 0)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db05      	blt.n	8001a7a <_ZN5L647410L6474_GoToEl+0x5a>
  {
    device_prm.stepsToTake = steps;
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	63da      	str	r2, [r3, #60]	@ 0x3c
    direction = FORWARD;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e006      	b.n	8001a88 <_ZN5L647410L6474_GoToEl+0x68>
  }
  else
  {
    device_prm.stepsToTake = -steps;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c
    direction = BACKWARD;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
  }

  if (steps != 0)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d011      	beq.n	8001ab2 <_ZN5L647410L6474_GoToEl+0x92>
  {
    device_prm.commandExecuted = MOVE_CMD;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    /* Direction setup */
    L6474_SetDirection(direction);
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fc69 	bl	8002372 <_ZN5L647418L6474_SetDirectionE10motorDir_t>

    L6474_ComputeSpeedProfile(device_prm.stepsToTake);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fca1 	bl	80023ee <_ZN5L647425L6474_ComputeSpeedProfileEm>

    /* Motor activation */
    L6474_StartMovement();
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 ff5d 	bl	800296c <_ZN5L647419L6474_StartMovementEv>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZN5L647414L6474_HardStopEv>:

void L6474::L6474_HardStop(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Disable corresponding PWM */
  L6474_PwmStop();
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f001 fa26 	bl	8002f14 <_ZN5L647413L6474_PwmStopEv>

  /* Set inactive state */
  device_prm.motionState = INACTIVE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2203      	movs	r2, #3
 8001acc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  device_prm.commandExecuted = NO_CMD;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  device_prm.stepsToTake = MAX_STEPS;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ade:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_ZN5L647410L6474_MoveE10motorDir_tm>:

void L6474::L6474_Move(motorDir_t direction, uint32_t stepCount)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	460b      	mov	r3, r1
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	72fb      	strb	r3, [r7, #11]
  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <_ZN5L647410L6474_MoveE10motorDir_tm+0x2a>
  {
    L6474_HardStop();
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ffd4 	bl	8001aba <_ZN5L647414L6474_HardStopEv>
  }

  if (stepCount != 0)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01e      	beq.n	8001b56 <_ZN5L647410L6474_MoveE10motorDir_tm+0x6e>
  {
    device_prm.stepsToTake = stepCount;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    device_prm.commandExecuted = MOVE_CMD;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    device_prm.currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(L6474_ABS_POS));
 8001b26:	2101      	movs	r1, #1
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f95d 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fccf 	bl	80024d6 <_ZN5L647421L6474_ConvertPositionEm>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Direction setup */
    L6474_SetDirection(direction);
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	4619      	mov	r1, r3
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 fc15 	bl	8002372 <_ZN5L647418L6474_SetDirectionE10motorDir_t>

    L6474_ComputeSpeedProfile(stepCount);
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fc4f 	bl	80023ee <_ZN5L647425L6474_ComputeSpeedProfileEm>

    /* Motor activation */
    L6474_StartMovement();
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 ff0b 	bl	800296c <_ZN5L647419L6474_StartMovementEv>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZN5L64749L6474_RunE10motorDir_t>:

void L6474::L6474_Run(motorDir_t direction)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	70fb      	strb	r3, [r7, #3]
  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <_ZN5L64749L6474_RunE10motorDir_t+0x28>
  {
    L6474_HardStop();
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff9a 	bl	8001aba <_ZN5L647414L6474_HardStopEv>
  }

  /* Direction setup */
  L6474_SetDirection(direction);
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fbf1 	bl	8002372 <_ZN5L647418L6474_SetDirectionE10motorDir_t>

  device_prm.commandExecuted = RUN_CMD;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Motor activation */
  L6474_StartMovement();
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fee7 	bl	800296c <_ZN5L647419L6474_StartMovementEv>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_ZN5L647421L6474_SetAccelerationEt>:

bool L6474::L6474_SetAcceleration(uint16_t newAcc)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00d      	beq.n	8001bd8 <_ZN5L647421L6474_SetAccelerationEt+0x32>
      ((device_prm.motionState == INACTIVE)||
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001bc2:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d005      	beq.n	8001bd4 <_ZN5L647421L6474_SetAccelerationEt+0x2e>
       (device_prm.commandExecuted == RUN_CMD)))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001bce:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <_ZN5L647421L6474_SetAccelerationEt+0x32>
  if ((newAcc != 0)&&
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <_ZN5L647421L6474_SetAccelerationEt+0x34>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <_ZN5L647421L6474_SetAccelerationEt+0x44>
  {
    device_prm.acceleration = newAcc;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    cmdExecuted = TRUE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <_ZN5L647421L6474_SetDecelerationEt>:

bool L6474::L6474_SetDeceleration(uint16_t newDec)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&&
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00d      	beq.n	8001c28 <_ZN5L647421L6474_SetDecelerationEt+0x32>
      ((device_prm.motionState == INACTIVE)||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001c12:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&&
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d005      	beq.n	8001c24 <_ZN5L647421L6474_SetDecelerationEt+0x2e>
       (device_prm.commandExecuted == RUN_CMD)))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001c1e:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <_ZN5L647421L6474_SetDecelerationEt+0x32>
  if ((newDec != 0)&&
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <_ZN5L647421L6474_SetDecelerationEt+0x34>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <_ZN5L647421L6474_SetDecelerationEt+0x44>
  {
    device_prm.deceleration = newDec;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	887a      	ldrh	r2, [r7, #2]
 8001c32:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    cmdExecuted = TRUE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <_ZN5L647413L6474_SetHomeEv>:

void L6474::L6474_SetHome(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  L6474_CmdSetParam(L6474_ABS_POS, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa44 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN5L647413L6474_SetMarkEv>:

void L6474::L6474_SetMark(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t mark = L6474_CmdGetParam(L6474_ABS_POS);
 8001c68:	2101      	movs	r1, #1
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8bc 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001c70:	60f8      	str	r0, [r7, #12]
  L6474_CmdSetParam(L6474_MARK, mark);
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	2103      	movs	r1, #3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa32 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN5L647417L6474_SetMaxSpeedEt>:

bool L6474::L6474_SetMaxSpeed(uint16_t newMaxSpeed)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (device_prm.minSpeed <= newMaxSpeed) &&
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d919      	bls.n	8001cce <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d814      	bhi.n	8001cce <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
      (device_prm.minSpeed <= newMaxSpeed) &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001caa:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d30d      	bcc.n	8001cce <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
      ((device_prm.motionState == INACTIVE)||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001cb8:	b2db      	uxtb	r3, r3
      (device_prm.minSpeed <= newMaxSpeed) &&
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d005      	beq.n	8001cca <_ZN5L647417L6474_SetMaxSpeedEt+0x46>
       (device_prm.commandExecuted == RUN_CMD)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001cc4:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
      (device_prm.minSpeed <= newMaxSpeed) &&
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <_ZN5L647417L6474_SetMaxSpeedEt+0x4c>
 8001cce:	2300      	movs	r3, #0
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <_ZN5L647417L6474_SetMaxSpeedEt+0x5c>
  {
    device_prm.maxSpeed = newMaxSpeed;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    cmdExecuted = TRUE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <_ZN5L647417L6474_SetMinSpeedEt>:

bool L6474::L6474_SetMinSpeed(uint16_t newMinSpeed)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= device_prm.maxSpeed) &&
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d919      	bls.n	8001d36 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d814      	bhi.n	8001d36 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
      (newMinSpeed <= device_prm.maxSpeed) &&
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d12:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001d14:	887a      	ldrh	r2, [r7, #2]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d80d      	bhi.n	8001d36 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
      ((device_prm.motionState == INACTIVE)||
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001d20:	b2db      	uxtb	r3, r3
      (newMinSpeed <= device_prm.maxSpeed) &&
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d005      	beq.n	8001d32 <_ZN5L647417L6474_SetMinSpeedEt+0x46>
       (device_prm.commandExecuted == RUN_CMD)))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001d2c:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
      (newMinSpeed <= device_prm.maxSpeed) &&
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <_ZN5L647417L6474_SetMinSpeedEt+0x4c>
 8001d36:	2300      	movs	r3, #0
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <_ZN5L647417L6474_SetMinSpeedEt+0x5c>
  {
    device_prm.minSpeed = newMinSpeed;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    cmdExecuted = TRUE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <_ZN5L647414L6474_SoftStopEv>:

bool L6474::L6474_SoftStop(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  bool cmdExecuted = FALSE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  if (device_prm.motionState != INACTIVE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <_ZN5L647414L6474_SoftStopEv+0x2e>
  {
    device_prm.commandExecuted = SOFT_STOP_CMD;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    cmdExecuted = TRUE;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <_ZN5L647421L6474_WaitWhileActiveEv>:

void L6474::L6474_WaitWhileActive(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Wait while motor is running */
  while (L6474_GetDeviceState() != INACTIVE);
 8001d96:	bf00      	nop
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fdc8 	bl	800192e <_ZN5L647420L6474_GetDeviceStateEv>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f4      	bne.n	8001d98 <_ZN5L647421L6474_WaitWhileActiveEv+0xa>
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZN5L647416L6474_CmdDisableEv>:

void L6474::L6474_CmdDisable(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  L6474_SendCommand(L6474_DISABLE);
 8001dc0:	21a8      	movs	r1, #168	@ 0xa8
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fbbe 	bl	8002544 <_ZN5L647417L6474_SendCommandEh>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZN5L647415L6474_CmdEnableEv>:

void L6474::L6474_CmdEnable(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  L6474_SendCommand(L6474_ENABLE);
 8001dd8:	21b8      	movs	r1, #184	@ 0xb8
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fbb2 	bl	8002544 <_ZN5L647417L6474_SendCommandEh>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>:

uint32_t L6474::L6474_CmdGetParam(L6474_Registers_t parameter)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 8001df8:	4b71      	ldr	r3, [pc, #452]	@ (8001fc0 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1d8>)
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	74bb      	strb	r3, [r7, #18]

  do
  {
    spi_preemtion_by_isr = FALSE;
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc4 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1dc>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001e14:	7cbb      	ldrb	r3, [r7, #18]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x3c>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fc40 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	74bb      	strb	r3, [r7, #18]
    }

    for (i = 0; i < number_of_devices; i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e02b      	b.n	8001e82 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x9a>
    {
      spi_tx_bursts[0][i] = L6474_NOP;
 8001e2a:	4a67      	ldr	r2, [pc, #412]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	4413      	add	r3, r2
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[1][i] = L6474_NOP;
 8001e34:	4a64      	ldr	r2, [pc, #400]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[2][i] = L6474_NOP;
 8001e40:	4a61      	ldr	r2, [pc, #388]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	4413      	add	r3, r2
 8001e46:	3306      	adds	r3, #6
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[3][i] = L6474_NOP;
 8001e4c:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4413      	add	r3, r2
 8001e52:	3309      	adds	r3, #9
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
      spi_rx_bursts[1][i] = 0;
 8001e58:	4a5c      	ldr	r2, [pc, #368]	@ (8001fcc <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3303      	adds	r3, #3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
      spi_rx_bursts[2][i] = 0;
 8001e64:	4a59      	ldr	r2, [pc, #356]	@ (8001fcc <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3306      	adds	r3, #6
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
      spi_rx_bursts[3][i] = 0;
 8001e70:	4a56      	ldr	r2, [pc, #344]	@ (8001fcc <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4413      	add	r3, r2
 8001e76:	3309      	adds	r3, #9
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc0 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1d8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d3cd      	bcc.n	8001e2a <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x42>
    }

    switch (parameter)
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	2b18      	cmp	r3, #24
 8001e94:	d84a      	bhi.n	8001f2c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x144>
 8001e96:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0xb4>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001f01 	.word	0x08001f01
 8001ea0:	08001f15 	.word	0x08001f15
 8001ea4:	08001f01 	.word	0x08001f01
 8001ea8:	08001f2d 	.word	0x08001f2d
 8001eac:	08001f2d 	.word	0x08001f2d
 8001eb0:	08001f2d 	.word	0x08001f2d
 8001eb4:	08001f2d 	.word	0x08001f2d
 8001eb8:	08001f2d 	.word	0x08001f2d
 8001ebc:	08001f2d 	.word	0x08001f2d
 8001ec0:	08001f2d 	.word	0x08001f2d
 8001ec4:	08001f2d 	.word	0x08001f2d
 8001ec8:	08001f2d 	.word	0x08001f2d
 8001ecc:	08001f2d 	.word	0x08001f2d
 8001ed0:	08001f2d 	.word	0x08001f2d
 8001ed4:	08001f2d 	.word	0x08001f2d
 8001ed8:	08001f2d 	.word	0x08001f2d
 8001edc:	08001f2d 	.word	0x08001f2d
 8001ee0:	08001f2d 	.word	0x08001f2d
 8001ee4:	08001f2d 	.word	0x08001f2d
 8001ee8:	08001f2d 	.word	0x08001f2d
 8001eec:	08001f2d 	.word	0x08001f2d
 8001ef0:	08001f2d 	.word	0x08001f2d
 8001ef4:	08001f2d 	.word	0x08001f2d
 8001ef8:	08001f15 	.word	0x08001f15
 8001efc:	08001f15 	.word	0x08001f15
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spi_tx_bursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (parameter);
 8001f00:	7c7b      	ldrb	r3, [r7, #17]
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	b2d1      	uxtb	r1, r2
 8001f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001f0c:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	74fb      	strb	r3, [r7, #19]
        break;
 8001f12:	e016      	b.n	8001f42 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x15a>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spi_tx_bursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (parameter);
 8001f14:	7c7b      	ldrb	r3, [r7, #17]
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	b2d1      	uxtb	r1, r2
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001f20:	4413      	add	r3, r2
 8001f22:	460a      	mov	r2, r1
 8001f24:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8001f26:	2302      	movs	r3, #2
 8001f28:	74fb      	strb	r3, [r7, #19]
        break;
 8001f2a:	e00a      	b.n	8001f42 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x15a>
      default:
        spi_tx_bursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (parameter);
 8001f2c:	7c7b      	ldrb	r3, [r7, #17]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	b2d1      	uxtb	r1, r2
 8001f36:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	460a      	mov	r2, r1
 8001f3c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	74fb      	strb	r3, [r7, #19]
    }

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fbb7 	bl	80016b6 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	74bb      	strb	r3, [r7, #18]
  do
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1dc>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f47f af5c 	bne.w	8001e0e <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x26>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	f1c3 0303 	rsb	r3, r3, #3
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e012      	b.n	8001f86 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spi_tx_bursts[i][0], &spi_rx_bursts[i][0]);
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	4a17      	ldr	r2, [pc, #92]	@ (8001fc8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001f6a:	1899      	adds	r1, r3, r2
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	4a15      	ldr	r2, [pc, #84]	@ (8001fcc <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 8001f76:	4413      	add	r3, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fcce 	bl	800291c <_ZN5L647416L6474_WriteBytesEPhS0_>
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d9e9      	bls.n	8001f60 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x178>
  }

  spiRxData = ((uint32_t)spi_rx_bursts[1][spiIndex] << 16) |
 8001f8c:	7c7b      	ldrb	r3, [r7, #17]
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fcc <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 8001f90:	4413      	add	r3, r2
 8001f92:	78db      	ldrb	r3, [r3, #3]
 8001f94:	041a      	lsls	r2, r3, #16
              (spi_rx_bursts[2][spiIndex] << 8) |
 8001f96:	7c7b      	ldrb	r3, [r7, #17]
 8001f98:	490c      	ldr	r1, [pc, #48]	@ (8001fcc <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 8001f9a:	440b      	add	r3, r1
 8001f9c:	799b      	ldrb	r3, [r3, #6]
 8001f9e:	021b      	lsls	r3, r3, #8
  spiRxData = ((uint32_t)spi_rx_bursts[1][spiIndex] << 16) |
 8001fa0:	4313      	orrs	r3, r2
              (spi_rx_bursts[3][spiIndex]);
 8001fa2:	7c7a      	ldrb	r2, [r7, #17]
 8001fa4:	4909      	ldr	r1, [pc, #36]	@ (8001fcc <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 8001fa6:	440a      	add	r2, r1
 8001fa8:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spi_rx_bursts[1][spiIndex] << 16) |
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fb76 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>

  return (spiRxData);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000228 	.word	0x20000228
 8001fc4:	20000229 	.word	0x20000229
 8001fc8:	2000022c 	.word	0x2000022c
 8001fcc:	20000238 	.word	0x20000238

08001fd0 <_ZN5L647418L6474_CmdGetStatusEv>:

uint16_t L6474::L6474_CmdGetStatus(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <_ZN5L647418L6474_CmdGetStatusEv+0x100>)
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	72fb      	strb	r3, [r7, #11]

  do
  {
    spi_preemtion_by_isr = FALSE;
 8001fee:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <_ZN5L647418L6474_CmdGetStatusEv+0x104>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <_ZN5L647418L6474_CmdGetStatusEv+0x34>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fb50 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 8002000:	2300      	movs	r3, #0
 8002002:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < number_of_devices; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e01f      	b.n	800204a <_ZN5L647418L6474_CmdGetStatusEv+0x7a>
    {
       spi_tx_bursts[0][i] = L6474_NOP;
 800200a:	4a33      	ldr	r2, [pc, #204]	@ (80020d8 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
       spi_tx_bursts[1][i] = L6474_NOP;
 8002014:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4413      	add	r3, r2
 800201a:	3303      	adds	r3, #3
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
       spi_tx_bursts[2][i] = L6474_NOP;
 8002020:	4a2d      	ldr	r2, [pc, #180]	@ (80020d8 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	3306      	adds	r3, #6
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
       spi_rx_bursts[1][i] = 0;
 800202c:	4a2b      	ldr	r2, [pc, #172]	@ (80020dc <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3303      	adds	r3, #3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
       spi_rx_bursts[2][i] = 0;
 8002038:	4a28      	ldr	r2, [pc, #160]	@ (80020dc <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4413      	add	r3, r2
 800203e:	3306      	adds	r3, #6
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <_ZN5L647418L6474_CmdGetStatusEv+0x100>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4293      	cmp	r3, r2
 8002054:	d3d9      	bcc.n	800200a <_ZN5L647418L6474_CmdGetStatusEv+0x3a>
    }
    spi_tx_bursts[0][spiIndex] = L6474_GET_STATUS;
 8002056:	7abb      	ldrb	r3, [r7, #10]
 8002058:	4a1f      	ldr	r2, [pc, #124]	@ (80020d8 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 800205a:	21d0      	movs	r1, #208	@ 0xd0
 800205c:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fb29 	bl	80016b6 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 8002064:	2301      	movs	r3, #1
 8002066:	72fb      	strb	r3, [r7, #11]
  do
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <_ZN5L647418L6474_CmdGetStatusEv+0x104>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1be      	bne.n	8001fee <_ZN5L647418L6474_CmdGetStatusEv+0x1e>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e012      	b.n	800209c <_ZN5L647418L6474_CmdGetStatusEv+0xcc>
  {
     L6474_WriteBytes(&spi_tx_bursts[i][0], &spi_rx_bursts[i][0]);
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 8002080:	1899      	adds	r1, r3, r2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 800208c:	4413      	add	r3, r2
 800208e:	461a      	mov	r2, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fc43 	bl	800291c <_ZN5L647416L6474_WriteBytesEPhS0_>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d9e9      	bls.n	8002076 <_ZN5L647418L6474_CmdGetStatusEv+0xa6>
  }
  status = (spi_rx_bursts[1][spiIndex] << 8) | (spi_rx_bursts[2][spiIndex]);
 80020a2:	7abb      	ldrb	r3, [r7, #10]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 80020a6:	4413      	add	r3, r2
 80020a8:	78db      	ldrb	r3, [r3, #3]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	7abb      	ldrb	r3, [r7, #10]
 80020b2:	490a      	ldr	r1, [pc, #40]	@ (80020dc <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 80020b4:	440b      	add	r3, r1
 80020b6:	799b      	ldrb	r3, [r3, #6]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21b      	sxth	r3, r3
 80020be:	813b      	strh	r3, [r7, #8]

  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff faed 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>

  return (status);
 80020c6:	893b      	ldrh	r3, [r7, #8]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000228 	.word	0x20000228
 80020d4:	20000229 	.word	0x20000229
 80020d8:	2000022c 	.word	0x2000022c
 80020dc:	20000238 	.word	0x20000238

080020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>:
{
  L6474_SendCommand(L6474_NOP);
}

void L6474::L6474_CmdSetParam(L6474_Registers_t parameter, uint32_t value)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	460b      	mov	r3, r1
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	72fb      	strb	r3, [r7, #11]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 80020f2:	4b69      	ldr	r3, [pc, #420]	@ (8002298 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1b8>)
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;
 8002104:	2300      	movs	r3, #0
 8002106:	74bb      	strb	r3, [r7, #18]
  do
  {
    spi_preemtion_by_isr = FALSE;
 8002108:	4b64      	ldr	r3, [pc, #400]	@ (800229c <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1bc>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800210e:	7cbb      	ldrb	r3, [r7, #18]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x3e>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fac3 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 800211a:	2300      	movs	r3, #0
 800211c:	74bb      	strb	r3, [r7, #18]
    }

    for (i = 0; i < number_of_devices; i++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e019      	b.n	8002158 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x78>
    {
      spi_tx_bursts[0][i] = L6474_NOP;
 8002124:	4a5e      	ldr	r2, [pc, #376]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	4413      	add	r3, r2
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[1][i] = L6474_NOP;
 800212e:	4a5c      	ldr	r2, [pc, #368]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	4413      	add	r3, r2
 8002134:	3303      	adds	r3, #3
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[2][i] = L6474_NOP;
 800213a:	4a59      	ldr	r2, [pc, #356]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4413      	add	r3, r2
 8002140:	3306      	adds	r3, #6
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[3][i] = L6474_NOP;
 8002146:	4a56      	ldr	r2, [pc, #344]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4413      	add	r3, r2
 800214c:	3309      	adds	r3, #9
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	4b4f      	ldr	r3, [pc, #316]	@ (8002298 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1b8>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4293      	cmp	r3, r2
 8002162:	d3df      	bcc.n	8002124 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x44>
    }

    switch (parameter)
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	3b01      	subs	r3, #1
 8002168:	2b17      	cmp	r3, #23
 800216a:	d85a      	bhi.n	8002222 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x142>
 800216c:	a201      	add	r2, pc, #4	@ (adr r2, 8002174 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x94>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	080021d5 	.word	0x080021d5
 8002178:	08002203 	.word	0x08002203
 800217c:	080021d5 	.word	0x080021d5
 8002180:	08002223 	.word	0x08002223
 8002184:	08002223 	.word	0x08002223
 8002188:	08002223 	.word	0x08002223
 800218c:	08002223 	.word	0x08002223
 8002190:	08002223 	.word	0x08002223
 8002194:	08002223 	.word	0x08002223
 8002198:	08002223 	.word	0x08002223
 800219c:	08002223 	.word	0x08002223
 80021a0:	08002223 	.word	0x08002223
 80021a4:	08002223 	.word	0x08002223
 80021a8:	08002223 	.word	0x08002223
 80021ac:	08002223 	.word	0x08002223
 80021b0:	08002223 	.word	0x08002223
 80021b4:	08002223 	.word	0x08002223
 80021b8:	08002223 	.word	0x08002223
 80021bc:	08002223 	.word	0x08002223
 80021c0:	08002223 	.word	0x08002223
 80021c4:	08002223 	.word	0x08002223
 80021c8:	08002223 	.word	0x08002223
 80021cc:	08002223 	.word	0x08002223
 80021d0:	08002203 	.word	0x08002203
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
          spi_tx_bursts[0][spiIndex] = parameter;
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	4932      	ldr	r1, [pc, #200]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 80021d8:	7afa      	ldrb	r2, [r7, #11]
 80021da:	54ca      	strb	r2, [r1, r3]
          spi_tx_bursts[1][spiIndex] = (uint8_t)(value >> 16);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0c1a      	lsrs	r2, r3, #16
 80021e0:	7c7b      	ldrb	r3, [r7, #17]
 80021e2:	b2d1      	uxtb	r1, r2
 80021e4:	4a2e      	ldr	r2, [pc, #184]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 80021e6:	4413      	add	r3, r2
 80021e8:	460a      	mov	r2, r1
 80021ea:	70da      	strb	r2, [r3, #3]
          spi_tx_bursts[2][spiIndex] = (uint8_t)(value >> 8);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0a1a      	lsrs	r2, r3, #8
 80021f0:	7c7b      	ldrb	r3, [r7, #17]
 80021f2:	b2d1      	uxtb	r1, r2
 80021f4:	4a2a      	ldr	r2, [pc, #168]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 80021f6:	4413      	add	r3, r2
 80021f8:	460a      	mov	r2, r1
 80021fa:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 3;
 80021fc:	2303      	movs	r3, #3
 80021fe:	74fb      	strb	r3, [r7, #19]
          break;
 8002200:	e017      	b.n	8002232 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x152>
      case L6474_EL_POS: ;
      case L6474_CONFIG:
          spi_tx_bursts[1][spiIndex] = parameter;
 8002202:	7c7b      	ldrb	r3, [r7, #17]
 8002204:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8002206:	4413      	add	r3, r2
 8002208:	7afa      	ldrb	r2, [r7, #11]
 800220a:	70da      	strb	r2, [r3, #3]
          spi_tx_bursts[2][spiIndex] = (uint8_t)(value >> 8);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0a1a      	lsrs	r2, r3, #8
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	b2d1      	uxtb	r1, r2
 8002214:	4a22      	ldr	r2, [pc, #136]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8002216:	4413      	add	r3, r2
 8002218:	460a      	mov	r2, r1
 800221a:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 2;
 800221c:	2302      	movs	r3, #2
 800221e:	74fb      	strb	r3, [r7, #19]
          break;
 8002220:	e007      	b.n	8002232 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x152>
      default:
          spi_tx_bursts[2][spiIndex] = parameter;
 8002222:	7c7b      	ldrb	r3, [r7, #17]
 8002224:	4a1e      	ldr	r2, [pc, #120]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8002226:	4413      	add	r3, r2
 8002228:	7afa      	ldrb	r2, [r7, #11]
 800222a:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 800222c:	2301      	movs	r3, #1
 800222e:	74fb      	strb	r3, [r7, #19]
          break;
 8002230:	bf00      	nop
    }
    spi_tx_bursts[3][spiIndex] = (uint8_t)(value);
 8002232:	7c7b      	ldrb	r3, [r7, #17]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	b2d1      	uxtb	r1, r2
 8002238:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 800223a:	4413      	add	r3, r2
 800223c:	460a      	mov	r2, r1
 800223e:	725a      	strb	r2, [r3, #9]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff fa38 	bl	80016b6 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 8002246:	2301      	movs	r3, #1
 8002248:	74bb      	strb	r3, [r7, #18]
  do
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1bc>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f47f af5a 	bne.w	8002108 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x28>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	f1c3 0303 	rsb	r3, r3, #3
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e012      	b.n	8002284 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1a4>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spi_tx_bursts[i][0],&spi_rx_bursts[i][0]);
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8002268:	1899      	adds	r1, r3, r2
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	4a0c      	ldr	r2, [pc, #48]	@ (80022a4 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c4>)
 8002274:	4413      	add	r3, r2
 8002276:	461a      	mov	r2, r3
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fb4f 	bl	800291c <_ZN5L647416L6474_WriteBytesEPhS0_>
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d9e9      	bls.n	800225e <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x17e>
  }
  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7ff fa08 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>
}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000228 	.word	0x20000228
 800229c:	20000229 	.word	0x20000229
 80022a0:	2000022c 	.word	0x2000022c
 80022a4:	20000238 	.word	0x20000238

080022a8 <_ZN5L647424L6474_ReadStatusRegisterEv>:

uint16_t L6474::L6474_ReadStatusRegister(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return (L6474_CmdGetParam(L6474_STATUS));
 80022b0:	2119      	movs	r1, #25
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fd98 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b29b      	uxth	r3, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t>:

void L6474::L6474_SelectStepMode(motorStepMode_t stepMod)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;

  switch (stepMod)
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d816      	bhi.n	8002304 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x40>
 80022d6:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x18>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022f3 	.word	0x080022f3
 80022e4:	080022f9 	.word	0x080022f9
 80022e8:	080022ff 	.word	0x080022ff
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 80022ec:	2308      	movs	r3, #8
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e00b      	b.n	800230a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 80022f2:	2309      	movs	r3, #9
 80022f4:	73fb      	strb	r3, [r7, #15]
      break;
 80022f6:	e008      	b.n	800230a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 80022f8:	230a      	movs	r3, #10
 80022fa:	73fb      	strb	r3, [r7, #15]
      break;
 80022fc:	e005      	b.n	800230a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 80022fe:	230b      	movs	r3, #11
 8002300:	73fb      	strb	r3, [r7, #15]
      break;
 8002302:	e002      	b.n	800230a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8002304:	230c      	movs	r3, #12
 8002306:	73fb      	strb	r3, [r7, #15]
      break;
 8002308:	bf00      	nop
  }

  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b03      	cmp	r3, #3
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x62>
  {
    L6474_HardStop();
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fbca 	bl	8001aba <_ZN5L647414L6474_HardStopEv>
  }

  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(L6474_STEP_MODE)) ;
 8002326:	2116      	movs	r1, #22
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fd5d 	bl	8001de8 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 800232e:	4603      	mov	r3, r0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f023 0307 	bic.w	r3, r3, #7
 8002336:	73bb      	strb	r3, [r7, #14]

  /* Apply new step mode */
  L6474_CmdSetParam(L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8002338:	7bba      	ldrb	r2, [r7, #14]
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	4313      	orrs	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	2116      	movs	r1, #22
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fecb 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>

  /* Reset abs pos register */
  L6474_SetHome();
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fc7b 	bl	8001c46 <_ZN5L647413L6474_SetHomeEv>
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_ZN5L647418L6474_GetDirectionEv>:

motorDir_t L6474::L6474_GetDirection(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return device_prm.direction;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8002366:	b2db      	uxtb	r3, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <_ZN5L647418L6474_SetDirectionE10motorDir_t>:

void L6474::L6474_SetDirection(motorDir_t direction)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	70fb      	strb	r3, [r7, #3]
  if (device_prm.motionState == INACTIVE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b03      	cmp	r3, #3
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <_ZN5L647418L6474_SetDirectionE10motorDir_t+0x34>
  {
    device_prm.direction = direction;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    L6474_SetDirectionGpio(direction);
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff f9ad 	bl	8001700 <_ZN5L647422L6474_SetDirectionGpioEh>
  }
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_ZN5L647416L6474_ApplySpeedEt>:

void L6474::L6474_ApplySpeed(uint16_t newSpeed)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d801      	bhi.n	80023c4 <_ZN5L647416L6474_ApplySpeedEt+0x16>
  {
    newSpeed = L6474_MIN_PWM_FREQ;
 80023c0:	2302      	movs	r3, #2
 80023c2:	807b      	strh	r3, [r7, #2]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d902      	bls.n	80023d4 <_ZN5L647416L6474_ApplySpeedEt+0x26>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 80023ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80023d2:	807b      	strh	r3, [r7, #2]
  }

  device_prm.speed = newSpeed;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

  L6474_PwmSetFreq(newSpeed);
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fd5b 	bl	8002e9c <_ZN5L647416L6474_PwmSetFreqEt>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZN5L647425L6474_ComputeSpeedProfileEm>:

void L6474::L6474_ComputeSpeedProfile(uint32_t nbSteps)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b089      	sub	sp, #36	@ 0x24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  uint32_t reqAccSteps;
  uint32_t reqDecSteps;

  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = device_prm.minSpeed;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023fe:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (device_prm.maxSpeed - minSpeed);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	8b7b      	ldrh	r3, [r7, #26]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (device_prm.maxSpeed + minSpeed);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	8b7b      	ldrh	r3, [r7, #26]
 800241c:	4413      	add	r3, r2
 800241e:	461a      	mov	r2, r3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)device_prm.acceleration;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fbb3 f3f2 	udiv	r3, r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)device_prm.deceleration;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fbb3 f3f2 	udiv	r3, r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	617b      	str	r3, [r7, #20]

  if(( reqAccSteps + reqDecSteps ) > nbSteps)
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4413      	add	r3, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d228      	bcs.n	80024ba <_ZN5L647425L6474_ComputeSpeedProfileEm+0xcc>
  {
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = device_prm.deceleration;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800246e:	b29b      	uxth	r3, r3
 8002470:	613b      	str	r3, [r7, #16]
    uint32_t acc = device_prm.acceleration;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002478:	b29b      	uxth	r3, r3
 800247a:	60fb      	str	r3, [r7, #12]

    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	fb03 f202 	mul.w	r2, r3, r2
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	440b      	add	r3, r1
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d908      	bls.n	80024a8 <_ZN5L647425L6474_ComputeSpeedProfileEm+0xba>
    {
      reqAccSteps = reqDecSteps - 1;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3b01      	subs	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <_ZN5L647425L6474_ComputeSpeedProfileEm+0xbe>
      {
        reqAccSteps = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e001      	b.n	80024ac <_ZN5L647425L6474_ComputeSpeedProfileEm+0xbe>
      }
    }
    else
    {
      reqAccSteps = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    }
    device_prm.endAccPos = reqAccSteps;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
    device_prm.startDecPos = reqDecSteps;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	639a      	str	r2, [r3, #56]	@ 0x38
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    device_prm.endAccPos = reqAccSteps;
    device_prm.startDecPos = nbSteps - reqDecSteps - 1;
  }
}
 80024b8:	e008      	b.n	80024cc <_ZN5L647425L6474_ComputeSpeedProfileEm+0xde>
    device_prm.endAccPos = reqAccSteps;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
    device_prm.startDecPos = nbSteps - reqDecSteps - 1;
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80024cc:	bf00      	nop
 80024ce:	3724      	adds	r7, #36	@ 0x24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <_ZN5L647421L6474_ConvertPositionEm>:

int32_t L6474::L6474_ConvertPosition(uint32_t abs_position_reg)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <_ZN5L647421L6474_ConvertPositionEm+0x30>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	603b      	str	r3, [r7, #0]
    abs_position_reg += 1;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	603b      	str	r3, [r7, #0]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80024fc:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	425b      	negs	r3, r3
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e001      	b.n	800250a <_ZN5L647421L6474_ConvertPositionEm+0x34>
  }
  else
  {
    operation_result = (int32_t) abs_position_reg;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  }

  return operation_result;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <_ZN5L647418L6474_ErrorHandlerEt>:

void L6474::L6474_ErrorHandler(uint16_t error)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
  if (error_handler_callback != 0)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <_ZN5L647418L6474_ErrorHandlerEt+0x20>
  {
    (void) error_handler_callback(error);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	4610      	mov	r0, r2
 8002532:	4798      	blx	r3
  else
  {
    /* Aborting the program. */
    exit(EXIT_FAILURE);
  }
}
 8002534:	e002      	b.n	800253c <_ZN5L647418L6474_ErrorHandlerEt+0x26>
    exit(EXIT_FAILURE);
 8002536:	2001      	movs	r0, #1
 8002538:	f003 fe14 	bl	8006164 <exit>
}
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <_ZN5L647417L6474_SendCommandEh>:

void L6474::L6474_SendCommand(uint8_t param)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  bool itDisable = FALSE;
 8002550:	2300      	movs	r3, #0
 8002552:	72fb      	strb	r3, [r7, #11]
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 8002554:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <_ZN5L647417L6474_SendCommandEh+0x90>)
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	72bb      	strb	r3, [r7, #10]

  do
  {
    spi_preemtion_by_isr = FALSE;
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <_ZN5L647417L6474_SendCommandEh+0x94>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800256c:	7afb      	ldrb	r3, [r7, #11]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <_ZN5L647417L6474_SendCommandEh+0x38>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff f894 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 8002578:	2300      	movs	r3, #0
 800257a:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < number_of_devices; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e008      	b.n	8002594 <_ZN5L647417L6474_SendCommandEh+0x50>
    {
      spi_tx_bursts[3][i] = L6474_NOP;
 8002582:	4a16      	ldr	r2, [pc, #88]	@ (80025dc <_ZN5L647417L6474_SendCommandEh+0x98>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	3309      	adds	r3, #9
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3301      	adds	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4b0f      	ldr	r3, [pc, #60]	@ (80025d4 <_ZN5L647417L6474_SendCommandEh+0x90>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4293      	cmp	r3, r2
 800259e:	d3f0      	bcc.n	8002582 <_ZN5L647417L6474_SendCommandEh+0x3e>
    }
    spi_tx_bursts[3][spiIndex] = param;
 80025a0:	7abb      	ldrb	r3, [r7, #10]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	@ (80025dc <_ZN5L647417L6474_SendCommandEh+0x98>)
 80025a4:	4413      	add	r3, r2
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	725a      	strb	r2, [r3, #9]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff f883 	bl	80016b6 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	72fb      	strb	r3, [r7, #11]
  do
 80025b4:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <_ZN5L647417L6474_SendCommandEh+0x94>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1d4      	bne.n	8002566 <_ZN5L647417L6474_SendCommandEh+0x22>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  L6474_WriteBytes(&spi_tx_bursts[3][0], &spi_rx_bursts[3][0]);
 80025bc:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <_ZN5L647417L6474_SendCommandEh+0x9c>)
 80025be:	4909      	ldr	r1, [pc, #36]	@ (80025e4 <_ZN5L647417L6474_SendCommandEh+0xa0>)
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f9ab 	bl	800291c <_ZN5L647416L6474_WriteBytesEPhS0_>

  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff f86a 	bl	80016a0 <_ZN5L647415L6474_EnableIrqEv>
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000228 	.word	0x20000228
 80025d8:	20000229 	.word	0x20000229
 80025dc:	2000022c 	.word	0x2000022c
 80025e0:	20000241 	.word	0x20000241
 80025e4:	20000235 	.word	0x20000235

080025e8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv>:

void L6474::L6474_SetRegisterToPredefinedValues(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  L6474_CmdSetParam(
 80025f0:	2200      	movs	r2, #0
 80025f2:	2101      	movs	r1, #1
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fd73 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(
 80025fa:	2200      	movs	r2, #0
 80025fc:	2102      	movs	r1, #2
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fd6e 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(
 8002604:	2200      	movs	r2, #0
 8002606:	2103      	movs	r1, #3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fd69 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_MARK,
                    0);
  switch (device_instance)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002614:	2b02      	cmp	r3, #2
 8002616:	f000 8092 	beq.w	800273e <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x156>
 800261a:	2b02      	cmp	r3, #2
 800261c:	f300 80d4 	bgt.w	80027c8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x42>
 8002624:	2b01      	cmp	r3, #1
 8002626:	d045      	beq.n	80026b4 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0xcc>
                        (uint16_t)L6474_CONF_PARAM_SR_DEVICE_2 |
                        (uint16_t)L6474_CONF_PARAM_TOFF_DEVICE_2);
      break;
    default: ;
  }
}
 8002628:	e0ce      	b.n	80027c8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 800262a:	4969      	ldr	r1, [pc, #420]	@ (80027d0 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e8>)
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fb77 	bl	8002d20 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 8002632:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fd71 	bl	800111c <__aeabi_f2uiz>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	2109      	movs	r1, #9
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff fd4d 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002646:	2235      	movs	r2, #53	@ 0x35
 8002648:	210e      	movs	r1, #14
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fd48 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002650:	4960      	ldr	r1, [pc, #384]	@ (80027d4 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1ec>)
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fb9c 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8002658:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd5e 	bl	800111c <__aeabi_f2uiz>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	210f      	movs	r1, #15
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fd3a 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 800266c:	495a      	ldr	r1, [pc, #360]	@ (80027d8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1f0>)
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fb8e 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8002674:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fd50 	bl	800111c <__aeabi_f2uiz>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	2110      	movs	r1, #16
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fd2c 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002688:	2201      	movs	r2, #1
 800268a:	2113      	movs	r1, #19
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fd27 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002692:	228c      	movs	r2, #140	@ 0x8c
 8002694:	2116      	movs	r1, #22
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fd22 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 800269c:	22cf      	movs	r2, #207	@ 0xcf
 800269e:	2117      	movs	r1, #23
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fd1d 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80026a6:	f44f 5232 	mov.w	r2, #11392	@ 0x2c80
 80026aa:	2118      	movs	r1, #24
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fd17 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      break;
 80026b2:	e089      	b.n	80027c8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 80026b4:	4946      	ldr	r1, [pc, #280]	@ (80027d0 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e8>)
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fb32 	bl	8002d20 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 80026bc:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fd2c 	bl	800111c <__aeabi_f2uiz>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	2109      	movs	r1, #9
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fd08 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80026d0:	2235      	movs	r2, #53	@ 0x35
 80026d2:	210e      	movs	r1, #14
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff fd03 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 80026da:	493e      	ldr	r1, [pc, #248]	@ (80027d4 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1ec>)
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fb57 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 80026e2:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fd19 	bl	800111c <__aeabi_f2uiz>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	210f      	movs	r1, #15
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff fcf5 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 80026f6:	4938      	ldr	r1, [pc, #224]	@ (80027d8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1f0>)
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fb49 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 80026fe:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fd0b 	bl	800111c <__aeabi_f2uiz>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	2110      	movs	r1, #16
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fce7 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002712:	2201      	movs	r2, #1
 8002714:	2113      	movs	r1, #19
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fce2 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 800271c:	228c      	movs	r2, #140	@ 0x8c
 800271e:	2116      	movs	r1, #22
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fcdd 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002726:	22cf      	movs	r2, #207	@ 0xcf
 8002728:	2117      	movs	r1, #23
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fcd8 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002730:	f44f 5232 	mov.w	r2, #11392	@ 0x2c80
 8002734:	2118      	movs	r1, #24
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fcd2 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      break;
 800273c:	e044      	b.n	80027c8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 800273e:	4924      	ldr	r1, [pc, #144]	@ (80027d0 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e8>)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 faed 	bl	8002d20 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 8002746:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fce7 	bl	800111c <__aeabi_f2uiz>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	2109      	movs	r1, #9
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fcc3 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 800275a:	2235      	movs	r2, #53	@ 0x35
 800275c:	210e      	movs	r1, #14
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fcbe 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002764:	491b      	ldr	r1, [pc, #108]	@ (80027d4 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1ec>)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fb12 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 800276c:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fcd4 	bl	800111c <__aeabi_f2uiz>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	210f      	movs	r1, #15
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fcb0 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002780:	4915      	ldr	r1, [pc, #84]	@ (80027d8 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1f0>)
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb04 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8002788:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fcc6 	bl	800111c <__aeabi_f2uiz>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	2110      	movs	r1, #16
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fca2 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 800279c:	2201      	movs	r2, #1
 800279e:	2113      	movs	r1, #19
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fc9d 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80027a6:	228c      	movs	r2, #140	@ 0x8c
 80027a8:	2116      	movs	r1, #22
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fc98 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80027b0:	22cf      	movs	r2, #207	@ 0xcf
 80027b2:	2117      	movs	r1, #23
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fc93 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80027ba:	f44f 5232 	mov.w	r2, #11392	@ 0x2c80
 80027be:	2118      	movs	r1, #24
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fc8d 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      break;
 80027c6:	bf00      	nop
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	437a0000 	.word	0x437a0000
 80027d4:	40400000 	.word	0x40400000
 80027d8:	41a80000 	.word	0x41a80000

080027dc <_ZN5L647439L6474_SetRegisterToInitializationValuesEP12L6474_init_t>:

void L6474::L6474_SetRegisterToInitializationValues(L6474_init_t *init)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  L6474_CmdSetParam(
 80027e6:	2200      	movs	r2, #0
 80027e8:	2101      	movs	r1, #1
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fc78 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_ABS_POS,
                    0
                    );
  L6474_CmdSetParam(
 80027f0:	2200      	movs	r2, #0
 80027f2:	2102      	movs	r1, #2
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fc73 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_EL_POS,
                    0
                    );
  L6474_CmdSetParam(
 80027fa:	2200      	movs	r2, #0
 80027fc:	2103      	movs	r1, #3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fc6e 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_MARK,
                    0
                    );
  L6474_CmdSetParam(
                    L6474_TVAL,
                    L6474_Tval_Current_to_Par(init->torque_regulation_current_mA)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa88 	bl	8002d20 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 8002810:	4603      	mov	r3, r0
  L6474_CmdSetParam(
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fc82 	bl	800111c <__aeabi_f2uiz>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	2109      	movs	r1, #9
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fc5e 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_T_FAST,
                    (uint8_t) init->maximum_fast_decay_time |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7e9a      	ldrb	r2, [r3, #26]
                    (uint8_t) init->fall_time
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7e5b      	ldrb	r3, [r3, #25]
                    (uint8_t) init->maximum_fast_decay_time |
 800282c:	4313      	orrs	r3, r2
 800282e:	b2db      	uxtb	r3, r3
  L6474_CmdSetParam(
 8002830:	461a      	mov	r2, r3
 8002832:	210e      	movs	r1, #14
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fc53 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_TON_MIN,
                    L6474_Tmin_Time_to_Par(init->minimum_ON_time_us)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 faa5 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8002846:	4603      	mov	r3, r0
  L6474_CmdSetParam(
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fc67 	bl	800111c <__aeabi_f2uiz>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	210f      	movs	r1, #15
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff fc43 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_TOFF_MIN,
                    L6474_Tmin_Time_to_Par(init->minimum_OFF_time_us)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fa95 	bl	8002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8002866:	4603      	mov	r3, r0
  L6474_CmdSetParam(
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fc57 	bl	800111c <__aeabi_f2uiz>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	2110      	movs	r1, #16
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fc33 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_OCD_TH,
                    init->overcurrent_threshold
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(
 800287e:	461a      	mov	r2, r3
 8002880:	2113      	movs	r1, #19
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fc2c 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_STEP_MODE,
                    (uint8_t) init->step_selection |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	7dda      	ldrb	r2, [r3, #23]
                    (uint8_t) init->sync_selection
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
                    (uint8_t) init->step_selection |
 8002890:	4313      	orrs	r3, r2
 8002892:	b2db      	uxtb	r3, r3
  L6474_CmdSetParam(
 8002894:	461a      	mov	r2, r3
 8002896:	2116      	movs	r1, #22
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fc21 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_ALARM_EN,
                    init->alarm
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  L6474_CmdSetParam(
 80028a2:	461a      	mov	r2, r3
 80028a4:	2117      	movs	r1, #23
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fc1a 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_CONFIG,
                    (uint16_t) init->clock |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
                    (uint16_t) init->torque_regulation_method |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	7d9b      	ldrb	r3, [r3, #22]
                    (uint16_t) init->clock |
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b2da      	uxtb	r2, r3
                    (uint16_t) init->overcurrent_shutwdown |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	7d5b      	ldrb	r3, [r3, #21]
                    (uint16_t) init->torque_regulation_method |
 80028be:	4313      	orrs	r3, r2
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
                    (uint16_t) init->slew_rate |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
                    (uint16_t) init->overcurrent_shutwdown |
 80028c8:	4313      	orrs	r3, r2
                    (uint16_t) init->target_swicthing_period
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
                    (uint16_t) init->slew_rate |
 80028ce:	4313      	orrs	r3, r2
  L6474_CmdSetParam(
 80028d0:	461a      	mov	r2, r3
 80028d2:	2118      	movs	r1, #24
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fc03 	bl	80020e0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_SetAcceleration((uint16_t) init->acceleration_pps_2);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f95f 	bl	8001ba6 <_ZN5L647421L6474_SetAccelerationEt>
  L6474_SetDeceleration((uint16_t) init->deceleration_pps_2);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff f980 	bl	8001bf6 <_ZN5L647421L6474_SetDecelerationEt>
  L6474_SetMaxSpeed((uint16_t) init->maximum_speed_pps);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff f9c0 	bl	8001c84 <_ZN5L647417L6474_SetMaxSpeedEt>
  L6474_SetMinSpeed((uint16_t) init->minimum_speed_pps);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff f9ed 	bl	8001cec <_ZN5L647417L6474_SetMinSpeedEt>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <_ZN5L647416L6474_WriteBytesEPhS0_>:

void L6474::L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  if (L6474_SpiWriteBytes(pByteToTransmit, pReceivedByte) != 0)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7fe fefb 	bl	8001728 <_ZN5L647419L6474_SpiWriteBytesEPhS0_>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <_ZN5L647416L6474_WriteBytesEPhS0_+0x30>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002942:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fde5 	bl	8002516 <_ZN5L647418L6474_ErrorHandlerEt>
  }

  if (isr_flag)
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <_ZN5L647416L6474_WriteBytesEPhS0_+0x48>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <_ZN5L647416L6474_WriteBytesEPhS0_+0x3e>
  {
    spi_preemtion_by_isr = TRUE;
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <_ZN5L647416L6474_WriteBytesEPhS0_+0x4c>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
  }
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000022a 	.word	0x2000022a
 8002968:	20000229 	.word	0x20000229

0800296c <_ZN5L647419L6474_StartMovementEv>:
  device_prm.direction = FORWARD;
  device_prm.motionState = INACTIVE;
}

void L6474::L6474_StartMovement(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Enable L6474 powerstage */
  L6474_CmdEnable();
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff fa2b 	bl	8001dd0 <_ZN5L647415L6474_CmdEnableEv>
  if (device_prm.endAccPos != 0)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <_ZN5L647419L6474_StartMovementEv+0x2a>
  {
    device_prm.motionState = ACCELERATING;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8002994:	e003      	b.n	800299e <_ZN5L647419L6474_StartMovementEv+0x32>
  }
  else
  {
    device_prm.motionState = DECELERATING;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }
  device_prm.accu = 0;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28
  device_prm.relativePos = 0;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34
  L6474_ApplySpeed(device_prm.minSpeed);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fcfa 	bl	80023ae <_ZN5L647416L6474_ApplySpeedEt>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <_ZN5L647422L6474_StepClockHandlerEv>:

void L6474::L6474_StepClockHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	@ 0x30
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Set isr flag */
  isr_flag = TRUE;
 80029cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002c38 <_ZN5L647422L6474_StepClockHandlerEv+0x274>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]

  /* Incrementation of the relative position */
  device_prm.relativePos++;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	635a      	str	r2, [r3, #52]	@ 0x34

  switch (device_prm.motionState)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	f000 809d 	beq.w	8002b24 <_ZN5L647422L6474_StepClockHandlerEv+0x160>
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	f300 8187 	bgt.w	8002cfe <_ZN5L647422L6474_StepClockHandlerEv+0x33a>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <_ZN5L647422L6474_StepClockHandlerEv+0x38>
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	f000 80e2 	beq.w	8002bbe <_ZN5L647422L6474_StepClockHandlerEv+0x1fa>
      }
      break;
    }
    default:
    {
      break;
 80029fa:	e180      	b.n	8002cfe <_ZN5L647422L6474_StepClockHandlerEv+0x33a>
        uint32_t relPos = device_prm.relativePos;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a00:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = device_prm.endAccPos;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	613b      	str	r3, [r7, #16]
        uint16_t speed = device_prm.speed;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002a0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        uint32_t acc = ((uint32_t)device_prm.acceleration << 16);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	60fb      	str	r3, [r7, #12]
        if ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d00a      	beq.n	8002a3e <_ZN5L647422L6474_StepClockHandlerEv+0x7a>
            ((device_prm.commandExecuted != RUN_CMD)&&
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002a2e:	b2db      	uxtb	r3, r3
        if ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <_ZN5L647422L6474_StepClockHandlerEv+0x7e>
             (relPos == device_prm.startDecPos)))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            ((device_prm.commandExecuted != RUN_CMD)&&
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d101      	bne.n	8002a42 <_ZN5L647422L6474_StepClockHandlerEv+0x7e>
        if ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <_ZN5L647422L6474_StepClockHandlerEv+0x80>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <_ZN5L647422L6474_StepClockHandlerEv+0x94>
          device_prm.motionState = DECELERATING;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          device_prm.accu = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8002a56:	e154      	b.n	8002d02 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
        else if ((speed >= device_prm.maxSpeed)||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d209      	bcs.n	8002a7a <_ZN5L647422L6474_StepClockHandlerEv+0xb6>
                 ((device_prm.commandExecuted != RUN_CMD)&&
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002a6c:	b2db      	uxtb	r3, r3
        else if ((speed >= device_prm.maxSpeed)||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <_ZN5L647422L6474_StepClockHandlerEv+0xba>
                 ((device_prm.commandExecuted != RUN_CMD)&&
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d101      	bne.n	8002a7e <_ZN5L647422L6474_StepClockHandlerEv+0xba>
        else if ((speed >= device_prm.maxSpeed)||
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <_ZN5L647422L6474_StepClockHandlerEv+0xbc>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <_ZN5L647422L6474_StepClockHandlerEv+0xca>
          device_prm.motionState = STEADY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        break;
 8002a8c:	e139      	b.n	8002d02 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
          bool speedUpdated = FALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          if (speed == 0) speed =1;
 8002a94:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <_ZN5L647422L6474_StepClockHandlerEv+0xda>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
          device_prm.accu += acc / speed;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aa2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aaa:	441a      	add	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28
          while (device_prm.accu >= (0X10000L))
 8002ab0:	e00b      	b.n	8002aca <_ZN5L647422L6474_StepClockHandlerEv+0x106>
            device_prm.accu -= (0X10000L);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	629a      	str	r2, [r3, #40]	@ 0x28
            speed +=1;
 8002abe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            speedUpdated = TRUE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          while (device_prm.accu >= (0X10000L))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	bf8c      	ite	hi
 8002ad6:	2301      	movhi	r3, #1
 8002ad8:	2300      	movls	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e8      	bne.n	8002ab2 <_ZN5L647422L6474_StepClockHandlerEv+0xee>
          if (speedUpdated)
 8002ae0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 810c 	beq.w	8002d02 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
            if (speed > device_prm.maxSpeed)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002af4:	429a      	cmp	r2, r3
 8002af6:	bf8c      	ite	hi
 8002af8:	2301      	movhi	r3, #1
 8002afa:	2300      	movls	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <_ZN5L647422L6474_StepClockHandlerEv+0x146>
              speed = device_prm.maxSpeed;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            device_prm.speed = speed;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            L6474_ApplySpeed(device_prm.speed);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fc46 	bl	80023ae <_ZN5L647416L6474_ApplySpeedEt>
        break;
 8002b22:	e0ee      	b.n	8002d02 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
      uint16_t maxSpeed = device_prm.maxSpeed;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      uint32_t relativePos = device_prm.relativePos;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b30:	623b      	str	r3, [r7, #32]
      if  ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002b38:	b2db      	uxtb	r3, r3
            (relativePos >= (device_prm.startDecPos))) ||
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d017      	beq.n	8002b6e <_ZN5L647422L6474_StepClockHandlerEv+0x1aa>
           ((device_prm.commandExecuted != RUN_CMD)&&
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002b44:	b2db      	uxtb	r3, r3
      if  ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <_ZN5L647422L6474_StepClockHandlerEv+0x190>
            (relativePos >= (device_prm.startDecPos))) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
           ((device_prm.commandExecuted != RUN_CMD)&&
 8002b4e:	6a3a      	ldr	r2, [r7, #32]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d20c      	bcs.n	8002b6e <_ZN5L647422L6474_StepClockHandlerEv+0x1aa>
           ((device_prm.commandExecuted == RUN_CMD)&&
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002b5a:	b2db      	uxtb	r3, r3
            (relativePos >= (device_prm.startDecPos))) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d108      	bne.n	8002b72 <_ZN5L647422L6474_StepClockHandlerEv+0x1ae>
            (device_prm.speed > maxSpeed)))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002b66:	b29b      	uxth	r3, r3
           ((device_prm.commandExecuted == RUN_CMD)&&
 8002b68:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d201      	bcs.n	8002b72 <_ZN5L647422L6474_StepClockHandlerEv+0x1ae>
            (relativePos >= (device_prm.startDecPos))) ||
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <_ZN5L647422L6474_StepClockHandlerEv+0x1b0>
 8002b72:	2300      	movs	r3, #0
      if  ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <_ZN5L647422L6474_StepClockHandlerEv+0x1c4>
        device_prm.motionState = DECELERATING;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        device_prm.accu = 0;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8002b86:	e0be      	b.n	8002d06 <_ZN5L647422L6474_StepClockHandlerEv+0x342>
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d108      	bne.n	8002ba6 <_ZN5L647422L6474_StepClockHandlerEv+0x1e2>
               (device_prm.speed < maxSpeed))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002b9a:	b29b      	uxth	r3, r3
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 8002b9c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d901      	bls.n	8002ba6 <_ZN5L647422L6474_StepClockHandlerEv+0x1e2>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <_ZN5L647422L6474_StepClockHandlerEv+0x1e4>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80ac 	beq.w	8002d06 <_ZN5L647422L6474_StepClockHandlerEv+0x342>
        device_prm.motionState = ACCELERATING;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        device_prm.accu = 0;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8002bbc:	e0a3      	b.n	8002d06 <_ZN5L647422L6474_StepClockHandlerEv+0x342>
      uint32_t relativePos = device_prm.relativePos;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc2:	61fb      	str	r3, [r7, #28]
      uint16_t speed = device_prm.speed;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002bca:	857b      	strh	r3, [r7, #42]	@ 0x2a
      uint32_t deceleration = ((uint32_t)device_prm.deceleration << 16);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	61bb      	str	r3, [r7, #24]
      if (((device_prm.commandExecuted == SOFT_STOP_CMD)&&(speed <=  device_prm.minSpeed))||
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d106      	bne.n	8002bf2 <_ZN5L647422L6474_StepClockHandlerEv+0x22e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d90a      	bls.n	8002c08 <_ZN5L647422L6474_StepClockHandlerEv+0x244>
          ((device_prm.commandExecuted != RUN_CMD)&&
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002bf8:	b2db      	uxtb	r3, r3
      if (((device_prm.commandExecuted == SOFT_STOP_CMD)&&(speed <=  device_prm.minSpeed))||
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <_ZN5L647422L6474_StepClockHandlerEv+0x248>
           (relativePos >= device_prm.stepsToTake)))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((device_prm.commandExecuted != RUN_CMD)&&
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d301      	bcc.n	8002c0c <_ZN5L647422L6474_StepClockHandlerEv+0x248>
      if (((device_prm.commandExecuted == SOFT_STOP_CMD)&&(speed <=  device_prm.minSpeed))||
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <_ZN5L647422L6474_StepClockHandlerEv+0x24a>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <_ZN5L647422L6474_StepClockHandlerEv+0x256>
        L6474_HardStop();
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe ff51 	bl	8001aba <_ZN5L647414L6474_HardStopEv>
      break;
 8002c18:	e077      	b.n	8002d0a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <_ZN5L647422L6474_StepClockHandlerEv+0x278>
               (speed <= device_prm.maxSpeed))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c2c:	b29b      	uxth	r3, r3
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 8002c2e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d803      	bhi.n	8002c3c <_ZN5L647422L6474_StepClockHandlerEv+0x278>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e002      	b.n	8002c3e <_ZN5L647422L6474_StepClockHandlerEv+0x27a>
 8002c38:	2000022a 	.word	0x2000022a
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <_ZN5L647422L6474_StepClockHandlerEv+0x288>
        device_prm.motionState = STEADY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8002c4a:	e05e      	b.n	8002d0a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
        if (speed > device_prm.minSpeed)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002c56:	429a      	cmp	r2, r3
 8002c58:	bf8c      	ite	hi
 8002c5a:	2301      	movhi	r3, #1
 8002c5c:	2300      	movls	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d052      	beq.n	8002d0a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
          bool speedUpdated = FALSE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          if (speed == 0) speed =1;
 8002c6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <_ZN5L647422L6474_StepClockHandlerEv+0x2b0>
 8002c70:	2301      	movs	r3, #1
 8002c72:	857b      	strh	r3, [r7, #42]	@ 0x2a
          device_prm.accu += deceleration / speed;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c78:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c7a:	69b9      	ldr	r1, [r7, #24]
 8002c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	629a      	str	r2, [r3, #40]	@ 0x28
          while (device_prm.accu >= (0X10000L))
 8002c86:	e00e      	b.n	8002ca6 <_ZN5L647422L6474_StepClockHandlerEv+0x2e2>
            device_prm.accu -= (0X10000L);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28
            if (speed > 1)
 8002c94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d902      	bls.n	8002ca0 <_ZN5L647422L6474_StepClockHandlerEv+0x2dc>
              speed -=1;
 8002c9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
            speedUpdated = TRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          while (device_prm.accu >= (0X10000L))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	bf8c      	ite	hi
 8002cb2:	2301      	movhi	r3, #1
 8002cb4:	2300      	movls	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <_ZN5L647422L6474_StepClockHandlerEv+0x2c4>
          if (speedUpdated)
 8002cbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d022      	beq.n	8002d0a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
            if (speed < device_prm.minSpeed)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	bf34      	ite	cc
 8002cd2:	2301      	movcc	r3, #1
 8002cd4:	2300      	movcs	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <_ZN5L647422L6474_StepClockHandlerEv+0x320>
              speed = device_prm.minSpeed;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ce2:	857b      	strh	r3, [r7, #42]	@ 0x2a
            device_prm.speed = speed;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002ce8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            L6474_ApplySpeed(device_prm.speed);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fb59 	bl	80023ae <_ZN5L647416L6474_ApplySpeedEt>
      break;
 8002cfc:	e005      	b.n	8002d0a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e004      	b.n	8002d0c <_ZN5L647422L6474_StepClockHandlerEv+0x348>
        break;
 8002d02:	bf00      	nop
 8002d04:	e002      	b.n	8002d0c <_ZN5L647422L6474_StepClockHandlerEv+0x348>
      break;
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <_ZN5L647422L6474_StepClockHandlerEv+0x348>
      break;
 8002d0a:	bf00      	nop
    }
  }
  /* Set isr flag */
  isr_flag = FALSE;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	@ (8002d1c <_ZN5L647422L6474_StepClockHandlerEv+0x358>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	3730      	adds	r7, #48	@ 0x30
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000022a 	.word	0x2000022a

08002d20 <_ZN5L647425L6474_Tval_Current_to_ParEf>:

float L6474::L6474_Tval_Current_to_Par(float current_mA)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  return ((float)(((current_mA - 31.25f) / 31.25f) + 0.5f));
 8002d2a:	490a      	ldr	r1, [pc, #40]	@ (8002d54 <_ZN5L647425L6474_Tval_Current_to_ParEf+0x34>)
 8002d2c:	6838      	ldr	r0, [r7, #0]
 8002d2e:	f7fd feff 	bl	8000b30 <__aeabi_fsub>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4907      	ldr	r1, [pc, #28]	@ (8002d54 <_ZN5L647425L6474_Tval_Current_to_ParEf+0x34>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe f8b8 	bl	8000eac <__aeabi_fdiv>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fef6 	bl	8000b34 <__addsf3>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	41fa0000 	.word	0x41fa0000

08002d58 <_ZN5L647425L6474_Par_to_Tval_CurrentEf>:

float L6474::L6474_Par_to_Tval_Current(float Tval)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  return ((float)((Tval - 0.5f) * 31.25f + 31.25f));
 8002d62:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d66:	6838      	ldr	r0, [r7, #0]
 8002d68:	f7fd fee2 	bl	8000b30 <__aeabi_fsub>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4907      	ldr	r1, [pc, #28]	@ (8002d8c <_ZN5L647425L6474_Par_to_Tval_CurrentEf+0x34>)
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd ffe7 	bl	8000d44 <__aeabi_fmul>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4904      	ldr	r1, [pc, #16]	@ (8002d8c <_ZN5L647425L6474_Par_to_Tval_CurrentEf+0x34>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd feda 	bl	8000b34 <__addsf3>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	41fa0000 	.word	0x41fa0000

08002d90 <_ZN5L647422L6474_Tmin_Time_to_ParEf>:

float L6474::L6474_Tmin_Time_to_Par(float ton_min_us)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  return ((float)(((ton_min_us - 0.5f) * 2.0f) + 0.5f));
 8002d9a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d9e:	6838      	ldr	r0, [r7, #0]
 8002da0:	f7fd fec6 	bl	8000b30 <__aeabi_fsub>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4619      	mov	r1, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fec3 	bl	8000b34 <__addsf3>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd febd 	bl	8000b34 <__addsf3>
 8002dba:	4603      	mov	r3, r0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_ZN5L647422L6474_Par_to_Tmin_TimeEf>:

float L6474::L6474_Par_to_Tmin_Time(float Tmin)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  return ((float)(((Tmin - 0.5f) / 2.0f) + 0.5f));
 8002dce:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002dd2:	6838      	ldr	r0, [r7, #0]
 8002dd4:	f7fd feac 	bl	8000b30 <__aeabi_fsub>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe f864 	bl	8000eac <__aeabi_fdiv>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fea2 	bl	8000b34 <__addsf3>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <_ZN5L64749ReadWriteEPhS0_t>:
	}
}


status_t L6474::ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2140      	movs	r1, #64	@ 0x40
 8002e0e:	480f      	ldr	r0, [pc, #60]	@ (8002e4c <_ZN5L64749ReadWriteEPhS0_t+0x50>)
 8002e10:	f001 fbda 	bl	80045c8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef result = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]

	//if(result == HAL_OK)
	//{
	//	result = HAL_SPI_Receive_DMA(&hspi1, pBufferToWrite, NumBytes);
	//}
	result = HAL_SPI_TransmitReceive(&hspi1, pBufferToWrite, pBufferToRead, NumBytes,100);
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	2264      	movs	r2, #100	@ 0x64
 8002e1c:	9200      	str	r2, [sp, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	480b      	ldr	r0, [pc, #44]	@ (8002e50 <_ZN5L64749ReadWriteEPhS0_t+0x54>)
 8002e24:	f002 f86c 	bl	8004f00 <HAL_SPI_TransmitReceive>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2140      	movs	r1, #64	@ 0x40
 8002e30:	4806      	ldr	r0, [pc, #24]	@ (8002e4c <_ZN5L64749ReadWriteEPhS0_t+0x50>)
 8002e32:	f001 fbc9 	bl	80045c8 <HAL_GPIO_WritePin>

	//while(wTransferState == TRANSFER_WAIT) {}



	if(result != HAL_OK)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <_ZN5L64749ReadWriteEPhS0_t+0x44>
	{
		return COMPONENT_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <_ZN5L64749ReadWriteEPhS0_t+0x46>
	}
	else
	{
		return COMPONENT_OK;
 8002e40:	2300      	movs	r3, #0
	}

}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40010c00 	.word	0x40010c00
 8002e50:	20000250 	.word	0x20000250

08002e54 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_clES0_>:
    //ticker.attach(Callback<void()>(this, &L6474::L6474_StepClockHandler), period);



    irqHandlers.tim3.userptr=this;
	irqHandlers.tim3.func = [](void *userData)
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
	{
		((L6474*)userData)->L6474_StepClockHandler();
 8002e5e:	6838      	ldr	r0, [r7, #0]
 8002e60:	f7ff fdb0 	bl	80029c4 <_ZN5L647422L6474_StepClockHandlerEv>
	};
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_ZZN5L647416L6474_PwmSetFreqEtENUlPvE_4_FUNES0_>:
	irqHandlers.tim3.func = [](void *userData)
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	};
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7ff ffec 	bl	8002e54 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_clES0_>
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_cvPFvS0_EEv>:
	irqHandlers.tim3.func = [](void *userData)
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	};
 8002e8c:	4b02      	ldr	r3, [pc, #8]	@ (8002e98 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_cvPFvS0_EEv+0x14>)
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	08002e6d 	.word	0x08002e6d

08002e9c <_ZN5L647416L6474_PwmSetFreqEt>:
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
    double period = 1.0f / frequency;
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fef6 	bl	8000c9c <__aeabi_i2f>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002eb8:	f7fd fff8 	bl	8000eac <__aeabi_fdiv>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fab2 	bl	8000428 <__aeabi_f2d>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    pwm.period(period);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1d1c      	adds	r4, r3, #4
 8002ed0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ed4:	f7fd fdd8 	bl	8000a88 <__aeabi_d2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4619      	mov	r1, r3
 8002edc:	4620      	mov	r0, r4
 8002ede:	f000 f891 	bl	8003004 <_ZN3Pwm6periodEf>
    pwm.write(0.5f);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f872 	bl	8002fd4 <_ZN3Pwm5writeEf>
    irqHandlers.tim3.userptr=this;
 8002ef0:	4a07      	ldr	r2, [pc, #28]	@ (8002f10 <_ZN5L647416L6474_PwmSetFreqEt+0x74>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6053      	str	r3, [r2, #4]
	irqHandlers.tim3.func = [](void *userData)
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ffc2 	bl	8002e84 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_cvPFvS0_EEv>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4a03      	ldr	r2, [pc, #12]	@ (8002f10 <_ZN5L647416L6474_PwmSetFreqEt+0x74>)
 8002f04:	6013      	str	r3, [r2, #0]


}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000378 	.word	0x20000378

08002f14 <_ZN5L647413L6474_PwmStopEv>:
void L6474::L6474_PwmStop(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	pwm.write(0.0f);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	f04f 0100 	mov.w	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f855 	bl	8002fd4 <_ZN3Pwm5writeEf>
	irqHandlers.tim3.func = NULL;
 8002f2a:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <_ZN5L647413L6474_PwmStopEv+0x2c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
	irqHandlers.tim3.userptr = NULL;
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <_ZN5L647413L6474_PwmStopEv+0x2c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	605a      	str	r2, [r3, #4]
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000378 	.word	0x20000378

08002f44 <_Z9prescalerf>:

extern "C" void Error_Handler(void);


int prescaler(float value)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	return CPU_FREQUENCY * (value) / (COUNTER_PERIOD+1) - 1;
 8002f4c:	490b      	ldr	r1, [pc, #44]	@ (8002f7c <_Z9prescalerf+0x38>)
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fef8 	bl	8000d44 <__aeabi_fmul>
 8002f54:	4603      	mov	r3, r0
 8002f56:	490a      	ldr	r1, [pc, #40]	@ (8002f80 <_Z9prescalerf+0x3c>)
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd ffa7 	bl	8000eac <__aeabi_fdiv>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fde3 	bl	8000b30 <__aeabi_fsub>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe f8af 	bl	80010d0 <__aeabi_f2iz>
 8002f72:	4603      	mov	r3, r0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	4af42400 	.word	0x4af42400
 8002f80:	42ca0000 	.word	0x42ca0000

08002f84 <_ZN3PwmC1Ev>:




Pwm::Pwm()
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	 :sConfigOC{0}
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2300      	movs	r3, #0
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	6053      	str	r3, [r2, #4]
 8002f96:	6093      	str	r3, [r2, #8]
 8002f98:	60d3      	str	r3, [r2, #12]
 8002f9a:	6113      	str	r3, [r2, #16]
 8002f9c:	6153      	str	r3, [r2, #20]
 8002f9e:	6193      	str	r3, [r2, #24]
{

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	480a      	ldr	r0, [pc, #40]	@ (8002fcc <_ZN3PwmC1Ev+0x48>)
 8002fa4:	f002 fbac 	bl	8005700 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002fa8:	4808      	ldr	r0, [pc, #32]	@ (8002fcc <_ZN3PwmC1Ev+0x48>)
 8002faa:	f002 fb07 	bl	80055bc <HAL_TIM_Base_Start_IT>


	TIM3->PSC = 0;//prescaler(1.0);
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <_ZN3PwmC1Ev+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CCR2 =  1.0 * COUNTER_PERIOD;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <_ZN3PwmC1Ev+0x4c>)
 8002fb6:	2264      	movs	r2, #100	@ 0x64
 8002fb8:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->ARR = COUNTER_PERIOD;
 8002fba:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <_ZN3PwmC1Ev+0x4c>)
 8002fbc:	2264      	movs	r2, #100	@ 0x64
 8002fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	//TIM3->CCR1 = 1.0 * COUNTER_PERIOD; //Pulse
	//TIM3->CCR2 = 0;

}
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000330 	.word	0x20000330
 8002fd0:	40000400 	.word	0x40000400

08002fd4 <_ZN3Pwm5writeEf>:

void Pwm::write(float value)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
	TIM3->CCR2 = value * COUNTER_PERIOD; //Pulse
 8002fde:	4907      	ldr	r1, [pc, #28]	@ (8002ffc <_ZN3Pwm5writeEf+0x28>)
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	f7fd feaf 	bl	8000d44 <__aeabi_fmul>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4c05      	ldr	r4, [pc, #20]	@ (8003000 <_ZN3Pwm5writeEf+0x2c>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe f896 	bl	800111c <__aeabi_f2uiz>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	42c80000 	.word	0x42c80000
 8003000:	40000400 	.word	0x40000400

08003004 <_ZN3Pwm6periodEf>:

void Pwm::period(float seconds)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	int p = prescaler(seconds);
 800300e:	6838      	ldr	r0, [r7, #0]
 8003010:	f7ff ff98 	bl	8002f44 <_Z9prescalerf>
 8003014:	60f8      	str	r0, [r7, #12]
	TIM3->PSC = p; //Prescaler
 8003016:	4a03      	ldr	r2, [pc, #12]	@ (8003024 <_ZN3Pwm6periodEf+0x20>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6293      	str	r3, [r2, #40]	@ 0x28

}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40000400 	.word	0x40000400

08003028 <_Z16flag_irq_handlerv>:
};

L6474 *motor;

void flag_irq_handler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
    /* Set ISR flag. */
    motor->isr_flag = TRUE;
 800302e:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <_Z16flag_irq_handlerv+0x40>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]

    /* Get the value of the status register. */
    unsigned int status = motor->get_status();
 8003034:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <_Z16flag_irq_handlerv+0x44>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <_Z16flag_irq_handlerv+0x44>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3310      	adds	r3, #16
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4610      	mov	r0, r2
 8003044:	4798      	blx	r3
 8003046:	6078      	str	r0, [r7, #4]

    /* Check NOTPERF_CMD flag: if set, the command received by SPI can't be performed. */
    /* This often occures when a command is sent to the L6474 while it is not in HiZ state. */
    if ((status & L6474_STATUS_NOTPERF_CMD) == L6474_STATUS_NOTPERF_CMD) {
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <_Z16flag_irq_handlerv+0x30>
        printf("    WARNING: \"FLAG\" interrupt triggered. Non-performable command detected when updating L6474's registers while not in HiZ state.\r\n");
 8003052:	4807      	ldr	r0, [pc, #28]	@ (8003070 <_Z16flag_irq_handlerv+0x48>)
 8003054:	f003 feda 	bl	8006e0c <puts>
    }

    /* Reset ISR flag. */
    motor->isr_flag = FALSE;
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <_Z16flag_irq_handlerv+0x40>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000022a 	.word	0x2000022a
 800306c:	20000244 	.word	0x20000244
 8003070:	08008bfc 	.word	0x08008bfc

08003074 <L6474_create>:

extern "C" void L6474_create()
{
 8003074:	b598      	push	{r3, r4, r7, lr}
 8003076:	af00      	add	r7, sp, #0
	motor = new L6474;
 8003078:	2054      	movs	r0, #84	@ 0x54
 800307a:	f003 f84f 	bl	800611c <_Znwj>
 800307e:	4603      	mov	r3, r0
 8003080:	461c      	mov	r4, r3
 8003082:	4620      	mov	r0, r4
 8003084:	f7fe fb8c 	bl	80017a0 <_ZN5L6474C1Ev>
 8003088:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <L6474_create+0x64>)
 800308a:	601c      	str	r4, [r3, #0]
	if(motor->init(&init) != COMPONENT_OK)
 800308c:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <L6474_create+0x64>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <L6474_create+0x64>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4910      	ldr	r1, [pc, #64]	@ (80030dc <L6474_create+0x68>)
 800309a:	4610      	mov	r0, r2
 800309c:	4798      	blx	r3
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <L6474_create+0x42>
	{
		printf("failed to initialize\r\n");
 80030ae:	480c      	ldr	r0, [pc, #48]	@ (80030e0 <L6474_create+0x6c>)
 80030b0:	f003 feac 	bl	8006e0c <puts>
 80030b4:	e002      	b.n	80030bc <L6474_create+0x48>
	}
	else
	{
		printf("ok\r\n");
 80030b6:	480b      	ldr	r0, [pc, #44]	@ (80030e4 <L6474_create+0x70>)
 80030b8:	f003 fea8 	bl	8006e0c <puts>
	}

	motor->attach_flag_irq(&flag_irq_handler);
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <L6474_create+0x64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4909      	ldr	r1, [pc, #36]	@ (80030e8 <L6474_create+0x74>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fbac 	bl	8001820 <_ZN5L647415attach_flag_irqEPFvvE>
	motor->enable_flag_irq();
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <L6474_create+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fbb7 	bl	8001840 <_ZN5L647415enable_flag_irqEv>
}
 80030d2:	bf00      	nop
 80030d4:	bd98      	pop	{r3, r4, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000244 	.word	0x20000244
 80030dc:	20000000 	.word	0x20000000
 80030e0:	08008c80 	.word	0x08008c80
 80030e4:	08008c98 	.word	0x08008c98
 80030e8:	08003029 	.word	0x08003029

080030ec <L6474_move>:

int position = 0;
int diff = 0;
int speed = 1000;
extern "C" void L6474_move()
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
    motor->attach_flag_irq(&flag_irq_handler);
 80030f0:	4b33      	ldr	r3, [pc, #204]	@ (80031c0 <L6474_move+0xd4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4933      	ldr	r1, [pc, #204]	@ (80031c4 <L6474_move+0xd8>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fb92 	bl	8001820 <_ZN5L647415attach_flag_irqEPFvvE>
    motor->enable_flag_irq();
 80030fc:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <L6474_move+0xd4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe fb9d 	bl	8001840 <_ZN5L647415enable_flag_irqEv>

     motor->set_parameter(L6474_TVAL, 500);
 8003106:	4b2e      	ldr	r3, [pc, #184]	@ (80031c0 <L6474_move+0xd4>)
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <L6474_move+0xd4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	337c      	adds	r3, #124	@ 0x7c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2c      	ldr	r2, [pc, #176]	@ (80031c8 <L6474_move+0xdc>)
 8003116:	2109      	movs	r1, #9
 8003118:	4798      	blx	r3


     position = motor->get_position();
 800311a:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <L6474_move+0xd4>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <L6474_move+0xd4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3314      	adds	r3, #20
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4610      	mov	r0, r2
 800312a:	4798      	blx	r3
 800312c:	4603      	mov	r3, r0
 800312e:	4a27      	ldr	r2, [pc, #156]	@ (80031cc <L6474_move+0xe0>)
 8003130:	6013      	str	r3, [r2, #0]

     motor->move(StepperMotor::FWD, STEPS_1 / 8);
 8003132:	4b23      	ldr	r3, [pc, #140]	@ (80031c0 <L6474_move+0xd4>)
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <L6474_move+0xd4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3360      	adds	r3, #96	@ 0x60
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003144:	2101      	movs	r1, #1
 8003146:	4798      	blx	r3
     motor->wait_while_active();
 8003148:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <L6474_move+0xd4>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b1c      	ldr	r3, [pc, #112]	@ (80031c0 <L6474_move+0xd4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3374      	adds	r3, #116	@ 0x74
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4610      	mov	r0, r2
 8003158:	4798      	blx	r3

     diff = motor->get_position() - position;
 800315a:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <L6474_move+0xd4>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b18      	ldr	r3, [pc, #96]	@ (80031c0 <L6474_move+0xd4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3314      	adds	r3, #20
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4610      	mov	r0, r2
 800316a:	4798      	blx	r3
 800316c:	4602      	mov	r2, r0
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <L6474_move+0xe0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	4a16      	ldr	r2, [pc, #88]	@ (80031d0 <L6474_move+0xe4>)
 8003176:	6013      	str	r3, [r2, #0]
     position = motor->get_position();
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <L6474_move+0xd4>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <L6474_move+0xd4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4610      	mov	r0, r2
 8003188:	4798      	blx	r3
 800318a:	4603      	mov	r3, r0
 800318c:	4a0f      	ldr	r2, [pc, #60]	@ (80031cc <L6474_move+0xe0>)
 800318e:	6013      	str	r3, [r2, #0]

     //motor->move(StepperMotor::BWD, STEPS_1 / 8);
     //motor->wait_while_active();
     //position = motor->get_position();

     motor->set_max_speed(10000);
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <L6474_move+0xd4>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <L6474_move+0xd4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	333c      	adds	r3, #60	@ 0x3c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f242 7110 	movw	r1, #10000	@ 0x2710
 80031a2:	4610      	mov	r0, r2
 80031a4:	4798      	blx	r3
     motor->set_min_speed(1000);
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <L6474_move+0xd4>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <L6474_move+0xd4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3340      	adds	r3, #64	@ 0x40
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80031b8:	4610      	mov	r0, r2
 80031ba:	4798      	blx	r3
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000244 	.word	0x20000244
 80031c4:	08003029 	.word	0x08003029
 80031c8:	43fa0000 	.word	0x43fa0000
 80031cc:	20000248 	.word	0x20000248
 80031d0:	2000024c 	.word	0x2000024c

080031d4 <L6474_run>:



extern "C" void L6474_run()
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0

	motor->set_max_speed(20000);
 80031da:	4b3d      	ldr	r3, [pc, #244]	@ (80032d0 <L6474_run+0xfc>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b3c      	ldr	r3, [pc, #240]	@ (80032d0 <L6474_run+0xfc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	333c      	adds	r3, #60	@ 0x3c
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80031ec:	4610      	mov	r0, r2
 80031ee:	4798      	blx	r3

	speed = 1000;
 80031f0:	4b38      	ldr	r3, [pc, #224]	@ (80032d4 <L6474_run+0x100>)
 80031f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031f6:	601a      	str	r2, [r3, #0]
	float s = 1;
 80031f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80031fc:	60fb      	str	r3, [r7, #12]
	const float min = 5000, max = 9000;
 80031fe:	4b36      	ldr	r3, [pc, #216]	@ (80032d8 <L6474_run+0x104>)
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	4b36      	ldr	r3, [pc, #216]	@ (80032dc <L6474_run+0x108>)
 8003204:	603b      	str	r3, [r7, #0]

	while(true)
	{
		for(int i =0; i<10;++i) {
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	e016      	b.n	800323a <L6474_run+0x66>
			motor->move(StepperMotor::FWD, STEPS_1 / 8);
 800320c:	4b30      	ldr	r3, [pc, #192]	@ (80032d0 <L6474_run+0xfc>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <L6474_run+0xfc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3360      	adds	r3, #96	@ 0x60
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800321e:	2101      	movs	r1, #1
 8003220:	4798      	blx	r3
			motor->wait_while_active();
 8003222:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <L6474_run+0xfc>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <L6474_run+0xfc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3374      	adds	r3, #116	@ 0x74
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4610      	mov	r0, r2
 8003232:	4798      	blx	r3
		for(int i =0; i<10;++i) {
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b09      	cmp	r3, #9
 800323e:	dde5      	ble.n	800320c <L6474_run+0x38>
		}

		if(speed == min)
 8003240:	4b24      	ldr	r3, [pc, #144]	@ (80032d4 <L6474_run+0x100>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd fd29 	bl	8000c9c <__aeabi_i2f>
 800324a:	4603      	mov	r3, r0
 800324c:	4922      	ldr	r1, [pc, #136]	@ (80032d8 <L6474_run+0x104>)
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd ff0c 	bl	800106c <__aeabi_fcmpeq>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <L6474_run+0x8e>
		{
			s = 1;
 800325a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e00e      	b.n	8003280 <L6474_run+0xac>
		}
		else if(speed == max)
 8003262:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <L6474_run+0x100>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fd18 	bl	8000c9c <__aeabi_i2f>
 800326c:	4603      	mov	r3, r0
 800326e:	491b      	ldr	r1, [pc, #108]	@ (80032dc <L6474_run+0x108>)
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fefb 	bl	800106c <__aeabi_fcmpeq>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <L6474_run+0xac>
		{
			s = -1;
 800327c:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <L6474_run+0x10c>)
 800327e:	60fb      	str	r3, [r7, #12]
		}

		speed = speed + 1000 * s;
 8003280:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <L6474_run+0x100>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fd09 	bl	8000c9c <__aeabi_i2f>
 800328a:	4604      	mov	r4, r0
 800328c:	4915      	ldr	r1, [pc, #84]	@ (80032e4 <L6474_run+0x110>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7fd fd58 	bl	8000d44 <__aeabi_fmul>
 8003294:	4603      	mov	r3, r0
 8003296:	4619      	mov	r1, r3
 8003298:	4620      	mov	r0, r4
 800329a:	f7fd fc4b 	bl	8000b34 <__addsf3>
 800329e:	4603      	mov	r3, r0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd ff15 	bl	80010d0 <__aeabi_f2iz>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <L6474_run+0x100>)
 80032aa:	6013      	str	r3, [r2, #0]
		motor->set_min_speed(speed);
 80032ac:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <L6474_run+0xfc>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <L6474_run+0xfc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3340      	adds	r3, #64	@ 0x40
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4906      	ldr	r1, [pc, #24]	@ (80032d4 <L6474_run+0x100>)
 80032bc:	6809      	ldr	r1, [r1, #0]
 80032be:	4610      	mov	r0, r2
 80032c0:	4798      	blx	r3
		printf("speed: %i\r\n", speed);
 80032c2:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <L6474_run+0x100>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	4807      	ldr	r0, [pc, #28]	@ (80032e8 <L6474_run+0x114>)
 80032ca:	f003 fd37 	bl	8006d3c <iprintf>
	}
 80032ce:	e79a      	b.n	8003206 <L6474_run+0x32>
 80032d0:	20000244 	.word	0x20000244
 80032d4:	20000030 	.word	0x20000030
 80032d8:	459c4000 	.word	0x459c4000
 80032dc:	460ca000 	.word	0x460ca000
 80032e0:	bf800000 	.word	0xbf800000
 80032e4:	447a0000 	.word	0x447a0000
 80032e8:	08008c9c 	.word	0x08008c9c

080032ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032f0:	f000 fc7a 	bl	8003be8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032f4:	f000 f82a 	bl	800334c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032f8:	f000 f918 	bl	800352c <MX_GPIO_Init>
  MX_DMA_Init();
 80032fc:	f000 f8f0 	bl	80034e0 <MX_DMA_Init>
  MX_TIM3_Init();
 8003300:	f000 f896 	bl	8003430 <MX_TIM3_Init>
  MX_SPI1_Init();
 8003304:	f000 f85e 	bl	80033c4 <MX_SPI1_Init>

  //irqHandlers.irq_handlers[0].func=dummy;
  //timIrqHandlers.irq_handlers[0].userptr=NULL;


  irqHandlers.tim3.func = NULL;
 8003308:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <main+0x54>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
  irqHandlers.tim3.userptr = NULL;
 800330e:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <main+0x54>)
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]

  irqHandlers.irq.func = NULL;
 8003314:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <main+0x54>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  irqHandlers.irq.enabled = 0;
 800331a:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <main+0x54>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003320:	2201      	movs	r2, #1
 8003322:	2140      	movs	r1, #64	@ 0x40
 8003324:	4807      	ldr	r0, [pc, #28]	@ (8003344 <main+0x58>)
 8003326:	f001 f94f 	bl	80045c8 <HAL_GPIO_WritePin>


  printf("ok\r\n");
 800332a:	4807      	ldr	r0, [pc, #28]	@ (8003348 <main+0x5c>)
 800332c:	f003 fd6e 	bl	8006e0c <puts>
  L6474_create();
 8003330:	f7ff fea0 	bl	8003074 <L6474_create>
  L6474_move();
 8003334:	f7ff feda 	bl	80030ec <L6474_move>
  L6474_run();
 8003338:	f7ff ff4c 	bl	80031d4 <L6474_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <main+0x50>
 8003340:	20000378 	.word	0x20000378
 8003344:	40010c00 	.word	0x40010c00
 8003348:	08008ca8 	.word	0x08008ca8

0800334c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b090      	sub	sp, #64	@ 0x40
 8003350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003352:	f107 0318 	add.w	r3, r7, #24
 8003356:	2228      	movs	r2, #40	@ 0x28
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fd5e 	bl	8006e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800336e:	2302      	movs	r3, #2
 8003370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003372:	2301      	movs	r3, #1
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003376:	2310      	movs	r3, #16
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800337e:	f107 0318 	add.w	r3, r7, #24
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f95a 	bl	800463c <HAL_RCC_OscConfig>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800338e:	f000 f953 	bl	8003638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003392:	230f      	movs	r3, #15
 8003394:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 fbc8 	bl	8004b40 <HAL_RCC_ClockConfig>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80033b6:	f000 f93f 	bl	8003638 <Error_Handler>
  }
}
 80033ba:	bf00      	nop
 80033bc:	3740      	adds	r7, #64	@ 0x40
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033c8:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033ca:	4a18      	ldr	r2, [pc, #96]	@ (800342c <MX_SPI1_Init+0x68>)
 80033cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ce:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033dc:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <MX_SPI1_Init+0x64>)
 80033fe:	2200      	movs	r2, #0
 8003400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <MX_SPI1_Init+0x64>)
 8003404:	2200      	movs	r2, #0
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003408:	4b07      	ldr	r3, [pc, #28]	@ (8003428 <MX_SPI1_Init+0x64>)
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800340e:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <MX_SPI1_Init+0x64>)
 8003410:	220a      	movs	r2, #10
 8003412:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003414:	4804      	ldr	r0, [pc, #16]	@ (8003428 <MX_SPI1_Init+0x64>)
 8003416:	f001 fcef 	bl	8004df8 <HAL_SPI_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003420:	f000 f90a 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000250 	.word	0x20000250
 800342c:	40013000 	.word	0x40013000

08003430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	@ 0x28
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003436:	f107 0320 	add.w	r3, r7, #32
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	60da      	str	r2, [r3, #12]
 800344c:	611a      	str	r2, [r3, #16]
 800344e:	615a      	str	r2, [r3, #20]
 8003450:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003452:	4b21      	ldr	r3, [pc, #132]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 8003454:	4a21      	ldr	r2, [pc, #132]	@ (80034dc <MX_TIM3_Init+0xac>)
 8003456:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 800345a:	2200      	movs	r2, #0
 800345c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800345e:	4b1e      	ldr	r3, [pc, #120]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8003464:	4b1c      	ldr	r3, [pc, #112]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346a:	4b1b      	ldr	r3, [pc, #108]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 8003472:	2200      	movs	r2, #0
 8003474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003476:	4818      	ldr	r0, [pc, #96]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 8003478:	f002 f8f2 	bl	8005660 <HAL_TIM_PWM_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003482:	f000 f8d9 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800348e:	f107 0320 	add.w	r3, r7, #32
 8003492:	4619      	mov	r1, r3
 8003494:	4810      	ldr	r0, [pc, #64]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 8003496:	f002 fdcf 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80034a0:	f000 f8ca 	bl	8003638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034a4:	2360      	movs	r3, #96	@ 0x60
 80034a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	2204      	movs	r2, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4807      	ldr	r0, [pc, #28]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 80034bc:	f002 fab2 	bl	8005a24 <HAL_TIM_PWM_ConfigChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80034c6:	f000 f8b7 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034ca:	4803      	ldr	r0, [pc, #12]	@ (80034d8 <MX_TIM3_Init+0xa8>)
 80034cc:	f000 f9bc 	bl	8003848 <HAL_TIM_MspPostInit>

}
 80034d0:	bf00      	nop
 80034d2:	3728      	adds	r7, #40	@ 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000330 	.word	0x20000330
 80034dc:	40000400 	.word	0x40000400

080034e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034e6:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <MX_DMA_Init+0x48>)
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <MX_DMA_Init+0x48>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6153      	str	r3, [r2, #20]
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <MX_DMA_Init+0x48>)
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	200c      	movs	r0, #12
 8003504:	f000 fccd 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003508:	200c      	movs	r0, #12
 800350a:	f000 fce6 	bl	8003eda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	200d      	movs	r0, #13
 8003514:	f000 fcc5 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003518:	200d      	movs	r0, #13
 800351a:	f000 fcde 	bl	8003eda <HAL_NVIC_EnableIRQ>

}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000

0800352c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003532:	f107 0310 	add.w	r3, r7, #16
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003540:	4b32      	ldr	r3, [pc, #200]	@ (800360c <MX_GPIO_Init+0xe0>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4a31      	ldr	r2, [pc, #196]	@ (800360c <MX_GPIO_Init+0xe0>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6193      	str	r3, [r2, #24]
 800354c:	4b2f      	ldr	r3, [pc, #188]	@ (800360c <MX_GPIO_Init+0xe0>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003558:	4b2c      	ldr	r3, [pc, #176]	@ (800360c <MX_GPIO_Init+0xe0>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	4a2b      	ldr	r2, [pc, #172]	@ (800360c <MX_GPIO_Init+0xe0>)
 800355e:	f043 0310 	orr.w	r3, r3, #16
 8003562:	6193      	str	r3, [r2, #24]
 8003564:	4b29      	ldr	r3, [pc, #164]	@ (800360c <MX_GPIO_Init+0xe0>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003570:	4b26      	ldr	r3, [pc, #152]	@ (800360c <MX_GPIO_Init+0xe0>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	4a25      	ldr	r2, [pc, #148]	@ (800360c <MX_GPIO_Init+0xe0>)
 8003576:	f043 0308 	orr.w	r3, r3, #8
 800357a:	6193      	str	r3, [r2, #24]
 800357c:	4b23      	ldr	r3, [pc, #140]	@ (800360c <MX_GPIO_Init+0xe0>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003588:	2200      	movs	r2, #0
 800358a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800358e:	4820      	ldr	r0, [pc, #128]	@ (8003610 <MX_GPIO_Init+0xe4>)
 8003590:	f001 f81a 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003594:	2200      	movs	r2, #0
 8003596:	2140      	movs	r1, #64	@ 0x40
 8003598:	481e      	ldr	r0, [pc, #120]	@ (8003614 <MX_GPIO_Init+0xe8>)
 800359a:	f001 f815 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800359e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a4:	2301      	movs	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	2302      	movs	r3, #2
 80035ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	4619      	mov	r1, r3
 80035b6:	4816      	ldr	r0, [pc, #88]	@ (8003610 <MX_GPIO_Init+0xe4>)
 80035b8:	f000 fe82 	bl	80042c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <MX_GPIO_Init+0xec>)
 80035c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4619      	mov	r1, r3
 80035d0:	480f      	ldr	r0, [pc, #60]	@ (8003610 <MX_GPIO_Init+0xe4>)
 80035d2:	f000 fe75 	bl	80042c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035d6:	2340      	movs	r3, #64	@ 0x40
 80035d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035da:	2301      	movs	r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f107 0310 	add.w	r3, r7, #16
 80035ea:	4619      	mov	r1, r3
 80035ec:	4809      	ldr	r0, [pc, #36]	@ (8003614 <MX_GPIO_Init+0xe8>)
 80035ee:	f000 fe67 	bl	80042c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	2028      	movs	r0, #40	@ 0x28
 80035f8:	f000 fc53 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035fc:	2028      	movs	r0, #40	@ 0x28
 80035fe:	f000 fc6c 	bl	8003eda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003602:	bf00      	nop
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	40010800 	.word	0x40010800
 8003614:	40010c00 	.word	0x40010c00
 8003618:	10210000 	.word	0x10210000

0800361c <HAL_SPI_ErrorCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
  wTransferState = TRANSFER_COMPLETE;
}
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_SPI_ErrorCallback+0x18>)
 8003626:	2202      	movs	r2, #2
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	20000034 	.word	0x20000034

08003638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800363c:	b672      	cpsid	i
}
 800363e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <Error_Handler+0x8>

08003644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800364a:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <HAL_MspInit+0x5c>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <HAL_MspInit+0x5c>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6193      	str	r3, [r2, #24]
 8003656:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <HAL_MspInit+0x5c>)
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_MspInit+0x5c>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4a0e      	ldr	r2, [pc, #56]	@ (80036a0 <HAL_MspInit+0x5c>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366c:	61d3      	str	r3, [r2, #28]
 800366e:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <HAL_MspInit+0x5c>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800367a:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <HAL_MspInit+0x60>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	4a04      	ldr	r2, [pc, #16]	@ (80036a4 <HAL_MspInit+0x60>)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40010000 	.word	0x40010000

080036a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a47      	ldr	r2, [pc, #284]	@ (80037e0 <HAL_SPI_MspInit+0x138>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	f040 8086 	bne.w	80037d6 <HAL_SPI_MspInit+0x12e>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ca:	4b46      	ldr	r3, [pc, #280]	@ (80037e4 <HAL_SPI_MspInit+0x13c>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	4a45      	ldr	r2, [pc, #276]	@ (80037e4 <HAL_SPI_MspInit+0x13c>)
 80036d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036d4:	6193      	str	r3, [r2, #24]
 80036d6:	4b43      	ldr	r3, [pc, #268]	@ (80037e4 <HAL_SPI_MspInit+0x13c>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e2:	4b40      	ldr	r3, [pc, #256]	@ (80037e4 <HAL_SPI_MspInit+0x13c>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	4a3f      	ldr	r2, [pc, #252]	@ (80037e4 <HAL_SPI_MspInit+0x13c>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	6193      	str	r3, [r2, #24]
 80036ee:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <HAL_SPI_MspInit+0x13c>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80036fa:	23a0      	movs	r3, #160	@ 0xa0
 80036fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003706:	f107 0310 	add.w	r3, r7, #16
 800370a:	4619      	mov	r1, r3
 800370c:	4836      	ldr	r0, [pc, #216]	@ (80037e8 <HAL_SPI_MspInit+0x140>)
 800370e:	f000 fdd7 	bl	80042c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003712:	2340      	movs	r3, #64	@ 0x40
 8003714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371e:	f107 0310 	add.w	r3, r7, #16
 8003722:	4619      	mov	r1, r3
 8003724:	4830      	ldr	r0, [pc, #192]	@ (80037e8 <HAL_SPI_MspInit+0x140>)
 8003726:	f000 fdcb 	bl	80042c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800372a:	4b30      	ldr	r3, [pc, #192]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 800372c:	4a30      	ldr	r2, [pc, #192]	@ (80037f0 <HAL_SPI_MspInit+0x148>)
 800372e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003730:	4b2e      	ldr	r3, [pc, #184]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003736:	4b2d      	ldr	r3, [pc, #180]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800373c:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003742:	4b2a      	ldr	r3, [pc, #168]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003748:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 800374a:	2200      	movs	r2, #0
 800374c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800374e:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003754:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 8003756:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800375a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800375c:	4823      	ldr	r0, [pc, #140]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 800375e:	f000 fbd7 	bl	8003f10 <HAL_DMA_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003768:	f7ff ff66 	bl	8003638 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a1f      	ldr	r2, [pc, #124]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 8003770:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003772:	4a1e      	ldr	r2, [pc, #120]	@ (80037ec <HAL_SPI_MspInit+0x144>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003778:	4b1e      	ldr	r3, [pc, #120]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 800377a:	4a1f      	ldr	r2, [pc, #124]	@ (80037f8 <HAL_SPI_MspInit+0x150>)
 800377c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800377e:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 8003780:	2210      	movs	r2, #16
 8003782:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 800378c:	2280      	movs	r2, #128	@ 0x80
 800378e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003790:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003796:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 8003798:	2200      	movs	r2, #0
 800379a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800379c:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80037a2:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 80037a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80037aa:	4812      	ldr	r0, [pc, #72]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 80037ac:	f000 fbb0 	bl	8003f10 <HAL_DMA_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80037b6:	f7ff ff3f 	bl	8003638 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 80037be:	649a      	str	r2, [r3, #72]	@ 0x48
 80037c0:	4a0c      	ldr	r2, [pc, #48]	@ (80037f4 <HAL_SPI_MspInit+0x14c>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2023      	movs	r0, #35	@ 0x23
 80037cc:	f000 fb69 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037d0:	2023      	movs	r0, #35	@ 0x23
 80037d2:	f000 fb82 	bl	8003eda <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80037d6:	bf00      	nop
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40013000 	.word	0x40013000
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40010800 	.word	0x40010800
 80037ec:	200002a8 	.word	0x200002a8
 80037f0:	4002001c 	.word	0x4002001c
 80037f4:	200002ec 	.word	0x200002ec
 80037f8:	40020030 	.word	0x40020030

080037fc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0d      	ldr	r2, [pc, #52]	@ (8003840 <HAL_TIM_PWM_MspInit+0x44>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d113      	bne.n	8003836 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <HAL_TIM_PWM_MspInit+0x48>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4a0c      	ldr	r2, [pc, #48]	@ (8003844 <HAL_TIM_PWM_MspInit+0x48>)
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	61d3      	str	r3, [r2, #28]
 800381a:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <HAL_TIM_PWM_MspInit+0x48>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	201d      	movs	r0, #29
 800382c:	f000 fb39 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003830:	201d      	movs	r0, #29
 8003832:	f000 fb52 	bl	8003eda <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40000400 	.word	0x40000400
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 030c 	add.w	r3, r7, #12
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a18      	ldr	r2, [pc, #96]	@ (80038c4 <HAL_TIM_MspPostInit+0x7c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d129      	bne.n	80038bc <HAL_TIM_MspPostInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003868:	4b17      	ldr	r3, [pc, #92]	@ (80038c8 <HAL_TIM_MspPostInit+0x80>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_TIM_MspPostInit+0x80>)
 800386e:	f043 0310 	orr.w	r3, r3, #16
 8003872:	6193      	str	r3, [r2, #24]
 8003874:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <HAL_TIM_MspPostInit+0x80>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003888:	2302      	movs	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	4619      	mov	r1, r3
 8003892:	480e      	ldr	r0, [pc, #56]	@ (80038cc <HAL_TIM_MspPostInit+0x84>)
 8003894:	f000 fd14 	bl	80042c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003898:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <HAL_TIM_MspPostInit+0x88>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	4a06      	ldr	r2, [pc, #24]	@ (80038d0 <HAL_TIM_MspPostInit+0x88>)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80038bc:	bf00      	nop
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40011000 	.word	0x40011000
 80038d0:	40010000 	.word	0x40010000

080038d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <NMI_Handler+0x4>

080038dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <HardFault_Handler+0x4>

080038e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <MemManage_Handler+0x4>

080038ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f8:	bf00      	nop
 80038fa:	e7fd      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003924:	f000 f9a6 	bl	8003c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003930:	4802      	ldr	r0, [pc, #8]	@ (800393c <DMA1_Channel2_IRQHandler+0x10>)
 8003932:	f000 fbbf 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200002a8 	.word	0x200002a8

08003940 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <DMA1_Channel3_IRQHandler+0x10>)
 8003946:	f000 fbb5 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200002ec 	.word	0x200002ec

08003954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003958:	4807      	ldr	r0, [pc, #28]	@ (8003978 <TIM3_IRQHandler+0x24>)
 800395a:	f001 ff73 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(irqHandlers.tim3.func != NULL)
 800395e:	4b07      	ldr	r3, [pc, #28]	@ (800397c <TIM3_IRQHandler+0x28>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <TIM3_IRQHandler+0x1e>
  {
	  irqHandlers.tim3.func(irqHandlers.tim3.userptr);
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <TIM3_IRQHandler+0x28>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a04      	ldr	r2, [pc, #16]	@ (800397c <TIM3_IRQHandler+0x28>)
 800396c:	6852      	ldr	r2, [r2, #4]
 800396e:	4610      	mov	r0, r2
 8003970:	4798      	blx	r3
  }
  //timIrqHandlers.irq_handlers[0].func(timIrqHandlers.irq_handlers[0].userptr);
  /* USER CODE END TIM3_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000330 	.word	0x20000330
 800397c:	20000378 	.word	0x20000378

08003980 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <SPI1_IRQHandler+0x10>)
 8003986:	f001 fc65 	bl	8005254 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000250 	.word	0x20000250

08003994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003998:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800399c:	f000 fe2c 	bl	80045f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(irqHandlers.irq.func != NULL && irqHandlers.irq.enabled)
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <EXTI15_10_IRQHandler+0x28>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <EXTI15_10_IRQHandler+0x22>
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <EXTI15_10_IRQHandler+0x28>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <EXTI15_10_IRQHandler+0x22>
  {
	  irqHandlers.irq.func();
 80039b0:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <EXTI15_10_IRQHandler+0x28>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4798      	blx	r3
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000378 	.word	0x20000378

080039c0 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN        *((volatile uint32_t*) 0xE0000E00)


void ITM_SendChar(uint8_t ch)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
    DEMCR |=(1<<24);
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <ITM_SendChar+0x44>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003a04 <ITM_SendChar+0x44>)
 80039d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039d4:	6013      	str	r3, [r2, #0]

    ITM_TRACE_EN |= (1<<0);
 80039d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <ITM_SendChar+0x48>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a0b      	ldr	r2, [pc, #44]	@ (8003a08 <ITM_SendChar+0x48>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6013      	str	r3, [r2, #0]

    while(!(ITM_STIMULUS_PORT0 & 1));
 80039e2:	bf00      	nop
 80039e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f8      	beq.n	80039e4 <ITM_SendChar+0x24>


    ITM_STIMULUS_PORT0 = ch;
 80039f2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	6013      	str	r3, [r2, #0]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	e000edfc 	.word	0xe000edfc
 8003a08:	e0000e00 	.word	0xe0000e00

08003a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return 1;
 8003a10:	2301      	movs	r3, #1
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <_kill>:

int _kill(int pid, int sig)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a24:	f003 fa56 	bl	8006ed4 <__errno>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2216      	movs	r2, #22
 8003a2c:	601a      	str	r2, [r3, #0]
  return -1;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_exit>:

void _exit (int status)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffe7 	bl	8003a1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <_exit+0x12>

08003a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e00a      	b.n	8003a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a62:	f3af 8000 	nop.w
 8003a66:	4601      	mov	r1, r0
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	60ba      	str	r2, [r7, #8]
 8003a6e:	b2ca      	uxtb	r2, r1
 8003a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dbf0      	blt.n	8003a62 <_read+0x12>
  }

  return len;
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_write>:
  }
  return len;
}
*/

int _write(int file, char *ptr, int len) {
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e009      	b.n	8003ab0 <_write+0x26>
        ITM_SendChar(*ptr++);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	60ba      	str	r2, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff8b 	bl	80039c0 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	3301      	adds	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dbf1      	blt.n	8003a9c <_write+0x12>
    }
    return len;
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_close>:

int _close(int file)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ae8:	605a      	str	r2, [r3, #4]
  return 0;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <_isatty>:

int _isatty(int file)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
	...

08003b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b2c:	4a14      	ldr	r2, [pc, #80]	@ (8003b80 <_sbrk+0x5c>)
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <_sbrk+0x60>)
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b38:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <_sbrk+0x64>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <_sbrk+0x64>)
 8003b42:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <_sbrk+0x68>)
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b46:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d207      	bcs.n	8003b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b54:	f003 f9be 	bl	8006ed4 <__errno>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	220c      	movs	r2, #12
 8003b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b62:	e009      	b.n	8003b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b64:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <_sbrk+0x64>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b6a:	4b07      	ldr	r3, [pc, #28]	@ (8003b88 <_sbrk+0x64>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <_sbrk+0x64>)
 8003b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b76:	68fb      	ldr	r3, [r7, #12]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20005000 	.word	0x20005000
 8003b84:	00000400 	.word	0x00000400
 8003b88:	20000388 	.word	0x20000388
 8003b8c:	200004e0 	.word	0x200004e0

08003b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b9c:	f7ff fff8 	bl	8003b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ba0:	480b      	ldr	r0, [pc, #44]	@ (8003bd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003ba2:	490c      	ldr	r1, [pc, #48]	@ (8003bd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba8:	e002      	b.n	8003bb0 <LoopCopyDataInit>

08003baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bae:	3304      	adds	r3, #4

08003bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb4:	d3f9      	bcc.n	8003baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bb6:	4a09      	ldr	r2, [pc, #36]	@ (8003bdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003bb8:	4c09      	ldr	r4, [pc, #36]	@ (8003be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bbc:	e001      	b.n	8003bc2 <LoopFillZerobss>

08003bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc0:	3204      	adds	r2, #4

08003bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc4:	d3fb      	bcc.n	8003bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bc6:	f003 f98b 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bca:	f7ff fb8f 	bl	80032ec <main>
  bx lr
 8003bce:	4770      	bx	lr
  ldr r0, =_sdata
 8003bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bd4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003bd8:	0800918c 	.word	0x0800918c
  ldr r2, =_sbss
 8003bdc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003be0:	200004e0 	.word	0x200004e0

08003be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003be4:	e7fe      	b.n	8003be4 <ADC1_2_IRQHandler>
	...

08003be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bec:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_Init+0x28>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a07      	ldr	r2, [pc, #28]	@ (8003c10 <HAL_Init+0x28>)
 8003bf2:	f043 0310 	orr.w	r3, r3, #16
 8003bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf8:	2003      	movs	r0, #3
 8003bfa:	f000 f947 	bl	8003e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bfe:	200f      	movs	r0, #15
 8003c00:	f000 f808 	bl	8003c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c04:	f7ff fd1e 	bl	8003644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40022000 	.word	0x40022000

08003c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_InitTick+0x54>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <HAL_InitTick+0x58>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f95f 	bl	8003ef6 <HAL_SYSTICK_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00e      	b.n	8003c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d80a      	bhi.n	8003c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c50:	f000 f927 	bl	8003ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c54:	4a06      	ldr	r2, [pc, #24]	@ (8003c70 <HAL_InitTick+0x5c>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000038 	.word	0x20000038
 8003c6c:	20000040 	.word	0x20000040
 8003c70:	2000003c 	.word	0x2000003c

08003c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_IncTick+0x1c>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_IncTick+0x20>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	4a03      	ldr	r2, [pc, #12]	@ (8003c94 <HAL_IncTick+0x20>)
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	20000040 	.word	0x20000040
 8003c94:	2000038c 	.word	0x2000038c

08003c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c9c:	4b02      	ldr	r3, [pc, #8]	@ (8003ca8 <HAL_GetTick+0x10>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	2000038c 	.word	0x2000038c

08003cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7ff fff0 	bl	8003c98 <HAL_GetTick>
 8003cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc4:	d005      	beq.n	8003cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <HAL_Delay+0x44>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cd2:	bf00      	nop
 8003cd4:	f7ff ffe0 	bl	8003c98 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d8f7      	bhi.n	8003cd4 <HAL_Delay+0x28>
  {
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000040 	.word	0x20000040

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4906      	ldr	r1, [pc, #24]	@ (8003d8c <__NVIC_EnableIRQ+0x34>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e100 	.word	0xe000e100

08003d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	db0a      	blt.n	8003dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	490c      	ldr	r1, [pc, #48]	@ (8003ddc <__NVIC_SetPriority+0x4c>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	440b      	add	r3, r1
 8003db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db8:	e00a      	b.n	8003dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4908      	ldr	r1, [pc, #32]	@ (8003de0 <__NVIC_SetPriority+0x50>)
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	3b04      	subs	r3, #4
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	440b      	add	r3, r1
 8003dce:	761a      	strb	r2, [r3, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	e000e100 	.word	0xe000e100
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f1c3 0307 	rsb	r3, r3, #7
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf28      	it	cs
 8003e02:	2304      	movcs	r3, #4
 8003e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d902      	bls.n	8003e14 <NVIC_EncodePriority+0x30>
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3b03      	subs	r3, #3
 8003e12:	e000      	b.n	8003e16 <NVIC_EncodePriority+0x32>
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43da      	mvns	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	401a      	ands	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	43d9      	mvns	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	4313      	orrs	r3, r2
         );
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3724      	adds	r7, #36	@ 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e58:	d301      	bcc.n	8003e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00f      	b.n	8003e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e88 <SysTick_Config+0x40>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e66:	210f      	movs	r1, #15
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e6c:	f7ff ff90 	bl	8003d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <SysTick_Config+0x40>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e76:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <SysTick_Config+0x40>)
 8003e78:	2207      	movs	r2, #7
 8003e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	e000e010 	.word	0xe000e010

08003e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff2d 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb4:	f7ff ff42 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f7ff ff90 	bl	8003de4 <NVIC_EncodePriority>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff5f 	bl	8003d90 <__NVIC_SetPriority>
}
 8003ed2:	bf00      	nop
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff35 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff ffa2 	bl	8003e48 <SysTick_Config>
 8003f04:	4603      	mov	r3, r0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e043      	b.n	8003fae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <HAL_DMA_Init+0xa8>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	4a22      	ldr	r2, [pc, #136]	@ (8003fbc <HAL_DMA_Init+0xac>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	009a      	lsls	r2, r3, #2
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <HAL_DMA_Init+0xb0>)
 8003f42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f5a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003f5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	bffdfff8 	.word	0xbffdfff8
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020000 	.word	0x40020000

08003fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d005      	beq.n	8003fe8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	e051      	b.n	800408c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 020e 	bic.w	r2, r2, #14
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a22      	ldr	r2, [pc, #136]	@ (8004098 <HAL_DMA_Abort_IT+0xd4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d029      	beq.n	8004066 <HAL_DMA_Abort_IT+0xa2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a21      	ldr	r2, [pc, #132]	@ (800409c <HAL_DMA_Abort_IT+0xd8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_Abort_IT+0x9e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1f      	ldr	r2, [pc, #124]	@ (80040a0 <HAL_DMA_Abort_IT+0xdc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01a      	beq.n	800405c <HAL_DMA_Abort_IT+0x98>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1e      	ldr	r2, [pc, #120]	@ (80040a4 <HAL_DMA_Abort_IT+0xe0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d012      	beq.n	8004056 <HAL_DMA_Abort_IT+0x92>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <HAL_DMA_Abort_IT+0xe4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00a      	beq.n	8004050 <HAL_DMA_Abort_IT+0x8c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1b      	ldr	r2, [pc, #108]	@ (80040ac <HAL_DMA_Abort_IT+0xe8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d102      	bne.n	800404a <HAL_DMA_Abort_IT+0x86>
 8004044:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004048:	e00e      	b.n	8004068 <HAL_DMA_Abort_IT+0xa4>
 800404a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800404e:	e00b      	b.n	8004068 <HAL_DMA_Abort_IT+0xa4>
 8004050:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004054:	e008      	b.n	8004068 <HAL_DMA_Abort_IT+0xa4>
 8004056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800405a:	e005      	b.n	8004068 <HAL_DMA_Abort_IT+0xa4>
 800405c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004060:	e002      	b.n	8004068 <HAL_DMA_Abort_IT+0xa4>
 8004062:	2310      	movs	r3, #16
 8004064:	e000      	b.n	8004068 <HAL_DMA_Abort_IT+0xa4>
 8004066:	2301      	movs	r3, #1
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <HAL_DMA_Abort_IT+0xec>)
 800406a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
    } 
  }
  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40020008 	.word	0x40020008
 800409c:	4002001c 	.word	0x4002001c
 80040a0:	40020030 	.word	0x40020030
 80040a4:	40020044 	.word	0x40020044
 80040a8:	40020058 	.word	0x40020058
 80040ac:	4002006c 	.word	0x4002006c
 80040b0:	40020000 	.word	0x40020000

080040b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	2204      	movs	r2, #4
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d04f      	beq.n	800417c <HAL_DMA_IRQHandler+0xc8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d04a      	beq.n	800417c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d107      	bne.n	8004104 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a66      	ldr	r2, [pc, #408]	@ (80042a4 <HAL_DMA_IRQHandler+0x1f0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d029      	beq.n	8004162 <HAL_DMA_IRQHandler+0xae>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a65      	ldr	r2, [pc, #404]	@ (80042a8 <HAL_DMA_IRQHandler+0x1f4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_DMA_IRQHandler+0xaa>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a63      	ldr	r2, [pc, #396]	@ (80042ac <HAL_DMA_IRQHandler+0x1f8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01a      	beq.n	8004158 <HAL_DMA_IRQHandler+0xa4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a62      	ldr	r2, [pc, #392]	@ (80042b0 <HAL_DMA_IRQHandler+0x1fc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d012      	beq.n	8004152 <HAL_DMA_IRQHandler+0x9e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a60      	ldr	r2, [pc, #384]	@ (80042b4 <HAL_DMA_IRQHandler+0x200>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00a      	beq.n	800414c <HAL_DMA_IRQHandler+0x98>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a5f      	ldr	r2, [pc, #380]	@ (80042b8 <HAL_DMA_IRQHandler+0x204>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d102      	bne.n	8004146 <HAL_DMA_IRQHandler+0x92>
 8004140:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004144:	e00e      	b.n	8004164 <HAL_DMA_IRQHandler+0xb0>
 8004146:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800414a:	e00b      	b.n	8004164 <HAL_DMA_IRQHandler+0xb0>
 800414c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004150:	e008      	b.n	8004164 <HAL_DMA_IRQHandler+0xb0>
 8004152:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004156:	e005      	b.n	8004164 <HAL_DMA_IRQHandler+0xb0>
 8004158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800415c:	e002      	b.n	8004164 <HAL_DMA_IRQHandler+0xb0>
 800415e:	2340      	movs	r3, #64	@ 0x40
 8004160:	e000      	b.n	8004164 <HAL_DMA_IRQHandler+0xb0>
 8004162:	2304      	movs	r3, #4
 8004164:	4a55      	ldr	r2, [pc, #340]	@ (80042bc <HAL_DMA_IRQHandler+0x208>)
 8004166:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8094 	beq.w	800429a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800417a:	e08e      	b.n	800429a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	2202      	movs	r2, #2
 8004182:	409a      	lsls	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d056      	beq.n	800423a <HAL_DMA_IRQHandler+0x186>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d051      	beq.n	800423a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 020a 	bic.w	r2, r2, #10
 80041b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a38      	ldr	r2, [pc, #224]	@ (80042a4 <HAL_DMA_IRQHandler+0x1f0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d029      	beq.n	800421a <HAL_DMA_IRQHandler+0x166>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a37      	ldr	r2, [pc, #220]	@ (80042a8 <HAL_DMA_IRQHandler+0x1f4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d022      	beq.n	8004216 <HAL_DMA_IRQHandler+0x162>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a35      	ldr	r2, [pc, #212]	@ (80042ac <HAL_DMA_IRQHandler+0x1f8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01a      	beq.n	8004210 <HAL_DMA_IRQHandler+0x15c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a34      	ldr	r2, [pc, #208]	@ (80042b0 <HAL_DMA_IRQHandler+0x1fc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d012      	beq.n	800420a <HAL_DMA_IRQHandler+0x156>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a32      	ldr	r2, [pc, #200]	@ (80042b4 <HAL_DMA_IRQHandler+0x200>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00a      	beq.n	8004204 <HAL_DMA_IRQHandler+0x150>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a31      	ldr	r2, [pc, #196]	@ (80042b8 <HAL_DMA_IRQHandler+0x204>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d102      	bne.n	80041fe <HAL_DMA_IRQHandler+0x14a>
 80041f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041fc:	e00e      	b.n	800421c <HAL_DMA_IRQHandler+0x168>
 80041fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004202:	e00b      	b.n	800421c <HAL_DMA_IRQHandler+0x168>
 8004204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004208:	e008      	b.n	800421c <HAL_DMA_IRQHandler+0x168>
 800420a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800420e:	e005      	b.n	800421c <HAL_DMA_IRQHandler+0x168>
 8004210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004214:	e002      	b.n	800421c <HAL_DMA_IRQHandler+0x168>
 8004216:	2320      	movs	r3, #32
 8004218:	e000      	b.n	800421c <HAL_DMA_IRQHandler+0x168>
 800421a:	2302      	movs	r3, #2
 800421c:	4a27      	ldr	r2, [pc, #156]	@ (80042bc <HAL_DMA_IRQHandler+0x208>)
 800421e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d034      	beq.n	800429a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004238:	e02f      	b.n	800429a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	2208      	movs	r2, #8
 8004240:	409a      	lsls	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d028      	beq.n	800429c <HAL_DMA_IRQHandler+0x1e8>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 020e 	bic.w	r2, r2, #14
 8004262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
    }
  }
  return;
 800429a:	bf00      	nop
 800429c:	bf00      	nop
}
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40020008 	.word	0x40020008
 80042a8:	4002001c 	.word	0x4002001c
 80042ac:	40020030 	.word	0x40020030
 80042b0:	40020044 	.word	0x40020044
 80042b4:	40020058 	.word	0x40020058
 80042b8:	4002006c 	.word	0x4002006c
 80042bc:	40020000 	.word	0x40020000

080042c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b08b      	sub	sp, #44	@ 0x2c
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ca:	2300      	movs	r3, #0
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042d2:	e169      	b.n	80045a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042d4:	2201      	movs	r2, #1
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 8158 	bne.w	80045a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4a9a      	ldr	r2, [pc, #616]	@ (8004560 <HAL_GPIO_Init+0x2a0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d05e      	beq.n	80043ba <HAL_GPIO_Init+0xfa>
 80042fc:	4a98      	ldr	r2, [pc, #608]	@ (8004560 <HAL_GPIO_Init+0x2a0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d875      	bhi.n	80043ee <HAL_GPIO_Init+0x12e>
 8004302:	4a98      	ldr	r2, [pc, #608]	@ (8004564 <HAL_GPIO_Init+0x2a4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d058      	beq.n	80043ba <HAL_GPIO_Init+0xfa>
 8004308:	4a96      	ldr	r2, [pc, #600]	@ (8004564 <HAL_GPIO_Init+0x2a4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d86f      	bhi.n	80043ee <HAL_GPIO_Init+0x12e>
 800430e:	4a96      	ldr	r2, [pc, #600]	@ (8004568 <HAL_GPIO_Init+0x2a8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d052      	beq.n	80043ba <HAL_GPIO_Init+0xfa>
 8004314:	4a94      	ldr	r2, [pc, #592]	@ (8004568 <HAL_GPIO_Init+0x2a8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d869      	bhi.n	80043ee <HAL_GPIO_Init+0x12e>
 800431a:	4a94      	ldr	r2, [pc, #592]	@ (800456c <HAL_GPIO_Init+0x2ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d04c      	beq.n	80043ba <HAL_GPIO_Init+0xfa>
 8004320:	4a92      	ldr	r2, [pc, #584]	@ (800456c <HAL_GPIO_Init+0x2ac>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d863      	bhi.n	80043ee <HAL_GPIO_Init+0x12e>
 8004326:	4a92      	ldr	r2, [pc, #584]	@ (8004570 <HAL_GPIO_Init+0x2b0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d046      	beq.n	80043ba <HAL_GPIO_Init+0xfa>
 800432c:	4a90      	ldr	r2, [pc, #576]	@ (8004570 <HAL_GPIO_Init+0x2b0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d85d      	bhi.n	80043ee <HAL_GPIO_Init+0x12e>
 8004332:	2b12      	cmp	r3, #18
 8004334:	d82a      	bhi.n	800438c <HAL_GPIO_Init+0xcc>
 8004336:	2b12      	cmp	r3, #18
 8004338:	d859      	bhi.n	80043ee <HAL_GPIO_Init+0x12e>
 800433a:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <HAL_GPIO_Init+0x80>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	080043bb 	.word	0x080043bb
 8004344:	08004395 	.word	0x08004395
 8004348:	080043a7 	.word	0x080043a7
 800434c:	080043e9 	.word	0x080043e9
 8004350:	080043ef 	.word	0x080043ef
 8004354:	080043ef 	.word	0x080043ef
 8004358:	080043ef 	.word	0x080043ef
 800435c:	080043ef 	.word	0x080043ef
 8004360:	080043ef 	.word	0x080043ef
 8004364:	080043ef 	.word	0x080043ef
 8004368:	080043ef 	.word	0x080043ef
 800436c:	080043ef 	.word	0x080043ef
 8004370:	080043ef 	.word	0x080043ef
 8004374:	080043ef 	.word	0x080043ef
 8004378:	080043ef 	.word	0x080043ef
 800437c:	080043ef 	.word	0x080043ef
 8004380:	080043ef 	.word	0x080043ef
 8004384:	0800439d 	.word	0x0800439d
 8004388:	080043b1 	.word	0x080043b1
 800438c:	4a79      	ldr	r2, [pc, #484]	@ (8004574 <HAL_GPIO_Init+0x2b4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004392:	e02c      	b.n	80043ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	623b      	str	r3, [r7, #32]
          break;
 800439a:	e029      	b.n	80043f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	3304      	adds	r3, #4
 80043a2:	623b      	str	r3, [r7, #32]
          break;
 80043a4:	e024      	b.n	80043f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	3308      	adds	r3, #8
 80043ac:	623b      	str	r3, [r7, #32]
          break;
 80043ae:	e01f      	b.n	80043f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	330c      	adds	r3, #12
 80043b6:	623b      	str	r3, [r7, #32]
          break;
 80043b8:	e01a      	b.n	80043f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043c2:	2304      	movs	r3, #4
 80043c4:	623b      	str	r3, [r7, #32]
          break;
 80043c6:	e013      	b.n	80043f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043d0:	2308      	movs	r3, #8
 80043d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	611a      	str	r2, [r3, #16]
          break;
 80043da:	e009      	b.n	80043f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043dc:	2308      	movs	r3, #8
 80043de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	615a      	str	r2, [r3, #20]
          break;
 80043e6:	e003      	b.n	80043f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043e8:	2300      	movs	r3, #0
 80043ea:	623b      	str	r3, [r7, #32]
          break;
 80043ec:	e000      	b.n	80043f0 <HAL_GPIO_Init+0x130>
          break;
 80043ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2bff      	cmp	r3, #255	@ 0xff
 80043f4:	d801      	bhi.n	80043fa <HAL_GPIO_Init+0x13a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	e001      	b.n	80043fe <HAL_GPIO_Init+0x13e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2bff      	cmp	r3, #255	@ 0xff
 8004404:	d802      	bhi.n	800440c <HAL_GPIO_Init+0x14c>
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	e002      	b.n	8004412 <HAL_GPIO_Init+0x152>
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	3b08      	subs	r3, #8
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	210f      	movs	r1, #15
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	401a      	ands	r2, r3
 8004424:	6a39      	ldr	r1, [r7, #32]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	431a      	orrs	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80b1 	beq.w	80045a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004440:	4b4d      	ldr	r3, [pc, #308]	@ (8004578 <HAL_GPIO_Init+0x2b8>)
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	4a4c      	ldr	r2, [pc, #304]	@ (8004578 <HAL_GPIO_Init+0x2b8>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6193      	str	r3, [r2, #24]
 800444c:	4b4a      	ldr	r3, [pc, #296]	@ (8004578 <HAL_GPIO_Init+0x2b8>)
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004458:	4a48      	ldr	r2, [pc, #288]	@ (800457c <HAL_GPIO_Init+0x2bc>)
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	220f      	movs	r2, #15
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a40      	ldr	r2, [pc, #256]	@ (8004580 <HAL_GPIO_Init+0x2c0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_GPIO_Init+0x1ec>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3f      	ldr	r2, [pc, #252]	@ (8004584 <HAL_GPIO_Init+0x2c4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00d      	beq.n	80044a8 <HAL_GPIO_Init+0x1e8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3e      	ldr	r2, [pc, #248]	@ (8004588 <HAL_GPIO_Init+0x2c8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <HAL_GPIO_Init+0x1e4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3d      	ldr	r2, [pc, #244]	@ (800458c <HAL_GPIO_Init+0x2cc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <HAL_GPIO_Init+0x1e0>
 800449c:	2303      	movs	r3, #3
 800449e:	e006      	b.n	80044ae <HAL_GPIO_Init+0x1ee>
 80044a0:	2304      	movs	r3, #4
 80044a2:	e004      	b.n	80044ae <HAL_GPIO_Init+0x1ee>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e002      	b.n	80044ae <HAL_GPIO_Init+0x1ee>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_GPIO_Init+0x1ee>
 80044ac:	2300      	movs	r3, #0
 80044ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b0:	f002 0203 	and.w	r2, r2, #3
 80044b4:	0092      	lsls	r2, r2, #2
 80044b6:	4093      	lsls	r3, r2
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044be:	492f      	ldr	r1, [pc, #188]	@ (800457c <HAL_GPIO_Init+0x2bc>)
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	3302      	adds	r3, #2
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	492c      	ldr	r1, [pc, #176]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]
 80044e4:	e006      	b.n	80044f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	4928      	ldr	r1, [pc, #160]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004500:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	4922      	ldr	r1, [pc, #136]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	60cb      	str	r3, [r1, #12]
 800450c:	e006      	b.n	800451c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800450e:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	43db      	mvns	r3, r3
 8004516:	491e      	ldr	r1, [pc, #120]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004518:	4013      	ands	r3, r2
 800451a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004528:	4b19      	ldr	r3, [pc, #100]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4918      	ldr	r1, [pc, #96]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
 8004534:	e006      	b.n	8004544 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004536:	4b16      	ldr	r3, [pc, #88]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	43db      	mvns	r3, r3
 800453e:	4914      	ldr	r1, [pc, #80]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004540:	4013      	ands	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d021      	beq.n	8004594 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004550:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	490e      	ldr	r1, [pc, #56]	@ (8004590 <HAL_GPIO_Init+0x2d0>)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]
 800455c:	e021      	b.n	80045a2 <HAL_GPIO_Init+0x2e2>
 800455e:	bf00      	nop
 8004560:	10320000 	.word	0x10320000
 8004564:	10310000 	.word	0x10310000
 8004568:	10220000 	.word	0x10220000
 800456c:	10210000 	.word	0x10210000
 8004570:	10120000 	.word	0x10120000
 8004574:	10110000 	.word	0x10110000
 8004578:	40021000 	.word	0x40021000
 800457c:	40010000 	.word	0x40010000
 8004580:	40010800 	.word	0x40010800
 8004584:	40010c00 	.word	0x40010c00
 8004588:	40011000 	.word	0x40011000
 800458c:	40011400 	.word	0x40011400
 8004590:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_GPIO_Init+0x304>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	43db      	mvns	r3, r3
 800459c:	4909      	ldr	r1, [pc, #36]	@ (80045c4 <HAL_GPIO_Init+0x304>)
 800459e:	4013      	ands	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	3301      	adds	r3, #1
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f47f ae8e 	bne.w	80042d4 <HAL_GPIO_Init+0x14>
  }
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	372c      	adds	r7, #44	@ 0x2c
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	40010400 	.word	0x40010400

080045c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
 80045d4:	4613      	mov	r3, r2
 80045d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d8:	787b      	ldrb	r3, [r7, #1]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045e4:	e003      	b.n	80045ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045e6:	887b      	ldrh	r3, [r7, #2]
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr

080045f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004602:	4b08      	ldr	r3, [pc, #32]	@ (8004624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800460e:	4a05      	ldr	r2, [pc, #20]	@ (8004624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f806 	bl	8004628 <HAL_GPIO_EXTI_Callback>
  }
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40010400 	.word	0x40010400

08004628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e272      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8087 	beq.w	800476a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800465c:	4b92      	ldr	r3, [pc, #584]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b04      	cmp	r3, #4
 8004666:	d00c      	beq.n	8004682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004668:	4b8f      	ldr	r3, [pc, #572]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d112      	bne.n	800469a <HAL_RCC_OscConfig+0x5e>
 8004674:	4b8c      	ldr	r3, [pc, #560]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d10b      	bne.n	800469a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004682:	4b89      	ldr	r3, [pc, #548]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d06c      	beq.n	8004768 <HAL_RCC_OscConfig+0x12c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d168      	bne.n	8004768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e24c      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x76>
 80046a4:	4b80      	ldr	r3, [pc, #512]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a7f      	ldr	r2, [pc, #508]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e02e      	b.n	8004710 <HAL_RCC_OscConfig+0xd4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x98>
 80046ba:	4b7b      	ldr	r3, [pc, #492]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7a      	ldr	r2, [pc, #488]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b78      	ldr	r3, [pc, #480]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a77      	ldr	r2, [pc, #476]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e01d      	b.n	8004710 <HAL_RCC_OscConfig+0xd4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0xbc>
 80046de:	4b72      	ldr	r3, [pc, #456]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a71      	ldr	r2, [pc, #452]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b6f      	ldr	r3, [pc, #444]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6e      	ldr	r2, [pc, #440]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e00b      	b.n	8004710 <HAL_RCC_OscConfig+0xd4>
 80046f8:	4b6b      	ldr	r3, [pc, #428]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6a      	ldr	r2, [pc, #424]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80046fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b68      	ldr	r3, [pc, #416]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a67      	ldr	r2, [pc, #412]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800470a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800470e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d013      	beq.n	8004740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7ff fabe 	bl	8003c98 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004720:	f7ff faba 	bl	8003c98 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	@ 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e200      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b5d      	ldr	r3, [pc, #372]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0xe4>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004740:	f7ff faaa 	bl	8003c98 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004748:	f7ff faa6 	bl	8003c98 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	@ 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e1ec      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475a:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x10c>
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d063      	beq.n	800483e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004776:	4b4c      	ldr	r3, [pc, #304]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004782:	4b49      	ldr	r3, [pc, #292]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b08      	cmp	r3, #8
 800478c:	d11c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x18c>
 800478e:	4b46      	ldr	r3, [pc, #280]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d116      	bne.n	80047c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_RCC_OscConfig+0x176>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e1c0      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b2:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4939      	ldr	r1, [pc, #228]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	e03a      	b.n	800483e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d0:	4b36      	ldr	r3, [pc, #216]	@ (80048ac <HAL_RCC_OscConfig+0x270>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d6:	f7ff fa5f 	bl	8003c98 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047de:	f7ff fa5b 	bl	8003c98 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1a1      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f0:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b2a      	ldr	r3, [pc, #168]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4927      	ldr	r1, [pc, #156]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <HAL_RCC_OscConfig+0x270>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7ff fa3e 	bl	8003c98 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004820:	f7ff fa3a 	bl	8003c98 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e180      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004832:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d03a      	beq.n	80048c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d019      	beq.n	8004886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004852:	4b17      	ldr	r3, [pc, #92]	@ (80048b0 <HAL_RCC_OscConfig+0x274>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004858:	f7ff fa1e 	bl	8003c98 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004860:	f7ff fa1a 	bl	8003c98 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e160      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <HAL_RCC_OscConfig+0x26c>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800487e:	2001      	movs	r0, #1
 8004880:	f000 fa9c 	bl	8004dbc <RCC_Delay>
 8004884:	e01c      	b.n	80048c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004886:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <HAL_RCC_OscConfig+0x274>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7ff fa04 	bl	8003c98 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004892:	e00f      	b.n	80048b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7ff fa00 	bl	8003c98 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d908      	bls.n	80048b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e146      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000
 80048ac:	42420000 	.word	0x42420000
 80048b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b4:	4b92      	ldr	r3, [pc, #584]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e9      	bne.n	8004894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a6 	beq.w	8004a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10d      	bne.n	80048fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	4b88      	ldr	r3, [pc, #544]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4a87      	ldr	r2, [pc, #540]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	61d3      	str	r3, [r2, #28]
 80048ea:	4b85      	ldr	r3, [pc, #532]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b82      	ldr	r3, [pc, #520]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d118      	bne.n	8004938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004906:	4b7f      	ldr	r3, [pc, #508]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004912:	f7ff f9c1 	bl	8003c98 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491a:	f7ff f9bd 	bl	8003c98 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b64      	cmp	r3, #100	@ 0x64
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e103      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	4b75      	ldr	r3, [pc, #468]	@ (8004b04 <HAL_RCC_OscConfig+0x4c8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d106      	bne.n	800494e <HAL_RCC_OscConfig+0x312>
 8004940:	4b6f      	ldr	r3, [pc, #444]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4a6e      	ldr	r2, [pc, #440]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6213      	str	r3, [r2, #32]
 800494c:	e02d      	b.n	80049aa <HAL_RCC_OscConfig+0x36e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10c      	bne.n	8004970 <HAL_RCC_OscConfig+0x334>
 8004956:	4b6a      	ldr	r3, [pc, #424]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	4a69      	ldr	r2, [pc, #420]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6213      	str	r3, [r2, #32]
 8004962:	4b67      	ldr	r3, [pc, #412]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	4a66      	ldr	r2, [pc, #408]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6213      	str	r3, [r2, #32]
 800496e:	e01c      	b.n	80049aa <HAL_RCC_OscConfig+0x36e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d10c      	bne.n	8004992 <HAL_RCC_OscConfig+0x356>
 8004978:	4b61      	ldr	r3, [pc, #388]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4a60      	ldr	r2, [pc, #384]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	6213      	str	r3, [r2, #32]
 8004984:	4b5e      	ldr	r3, [pc, #376]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4a5d      	ldr	r2, [pc, #372]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6213      	str	r3, [r2, #32]
 8004990:	e00b      	b.n	80049aa <HAL_RCC_OscConfig+0x36e>
 8004992:	4b5b      	ldr	r3, [pc, #364]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	4a5a      	ldr	r2, [pc, #360]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6213      	str	r3, [r2, #32]
 800499e:	4b58      	ldr	r3, [pc, #352]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	4a57      	ldr	r2, [pc, #348]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d015      	beq.n	80049de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b2:	f7ff f971 	bl	8003c98 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7ff f96d 	bl	8003c98 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0b1      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCC_OscConfig+0x37e>
 80049dc:	e014      	b.n	8004a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7ff f95b 	bl	8003c98 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7ff f957 	bl	8003c98 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e09b      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	4b40      	ldr	r3, [pc, #256]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ee      	bne.n	80049e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4a3b      	ldr	r2, [pc, #236]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8087 	beq.w	8004b32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a24:	4b36      	ldr	r3, [pc, #216]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d061      	beq.n	8004af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d146      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a38:	4b33      	ldr	r3, [pc, #204]	@ (8004b08 <HAL_RCC_OscConfig+0x4cc>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7ff f92b 	bl	8003c98 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a46:	f7ff f927 	bl	8003c98 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e06d      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a58:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6c:	d108      	bne.n	8004a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	4921      	ldr	r1, [pc, #132]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a80:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a19      	ldr	r1, [r3, #32]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	430b      	orrs	r3, r1
 8004a92:	491b      	ldr	r1, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_RCC_OscConfig+0x4cc>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7ff f8fb 	bl	8003c98 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7ff f8f7 	bl	8003c98 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e03d      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x46a>
 8004ac4:	e035      	b.n	8004b32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b10      	ldr	r3, [pc, #64]	@ (8004b08 <HAL_RCC_OscConfig+0x4cc>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7ff f8e4 	bl	8003c98 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7ff f8e0 	bl	8003c98 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e026      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae6:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x498>
 8004af2:	e01e      	b.n	8004b32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e019      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40007000 	.word	0x40007000
 8004b08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_OscConfig+0x500>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000

08004b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0d0      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b54:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d910      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b67      	ldr	r3, [pc, #412]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 0207 	bic.w	r2, r3, #7
 8004b6a:	4965      	ldr	r1, [pc, #404]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b63      	ldr	r3, [pc, #396]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0b8      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b9c:	4b59      	ldr	r3, [pc, #356]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a58      	ldr	r2, [pc, #352]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb4:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a52      	ldr	r2, [pc, #328]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	4b50      	ldr	r3, [pc, #320]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	494d      	ldr	r1, [pc, #308]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d040      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	4b47      	ldr	r3, [pc, #284]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d115      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07f      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfe:	4b41      	ldr	r3, [pc, #260]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e073      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e06b      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1e:	4b39      	ldr	r3, [pc, #228]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4936      	ldr	r1, [pc, #216]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c30:	f7ff f832 	bl	8003c98 <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c38:	f7ff f82e 	bl	8003c98 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e053      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 020c 	and.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1eb      	bne.n	8004c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c60:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d210      	bcs.n	8004c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b24      	ldr	r3, [pc, #144]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 0207 	bic.w	r2, r3, #7
 8004c76:	4922      	ldr	r1, [pc, #136]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e032      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c9c:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4916      	ldr	r1, [pc, #88]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	490e      	ldr	r1, [pc, #56]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cce:	f000 f821 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	490a      	ldr	r1, [pc, #40]	@ (8004d08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	5ccb      	ldrb	r3, [r1, r3]
 8004ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce6:	4a09      	ldr	r2, [pc, #36]	@ (8004d0c <HAL_RCC_ClockConfig+0x1cc>)
 8004ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cea:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCC_ClockConfig+0x1d0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe ff90 	bl	8003c14 <HAL_InitTick>

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40022000 	.word	0x40022000
 8004d04:	40021000 	.word	0x40021000
 8004d08:	08008de4 	.word	0x08008de4
 8004d0c:	20000038 	.word	0x20000038
 8004d10:	2000003c 	.word	0x2000003c

08004d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0x30>
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x36>
 8004d42:	e027      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d44:	4b19      	ldr	r3, [pc, #100]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x98>)
 8004d46:	613b      	str	r3, [r7, #16]
      break;
 8004d48:	e027      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	0c9b      	lsrs	r3, r3, #18
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d62:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	0c5b      	lsrs	r3, r3, #17
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d6e:	5cd3      	ldrb	r3, [r2, r3]
 8004d70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a0d      	ldr	r2, [pc, #52]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x98>)
 8004d76:	fb03 f202 	mul.w	r2, r3, r2
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e004      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0c      	ldr	r2, [pc, #48]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	613b      	str	r3, [r7, #16]
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x98>)
 8004d96:	613b      	str	r3, [r7, #16]
      break;
 8004d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d9a:	693b      	ldr	r3, [r7, #16]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	007a1200 	.word	0x007a1200
 8004db0:	08008df4 	.word	0x08008df4
 8004db4:	08008e04 	.word	0x08008e04
 8004db8:	003d0900 	.word	0x003d0900

08004dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <RCC_Delay+0x34>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <RCC_Delay+0x38>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	0a5b      	lsrs	r3, r3, #9
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dd8:	bf00      	nop
  }
  while (Delay --);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1e5a      	subs	r2, r3, #1
 8004dde:	60fa      	str	r2, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f9      	bne.n	8004dd8 <RCC_Delay+0x1c>
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	20000038 	.word	0x20000038
 8004df4:	10624dd3 	.word	0x10624dd3

08004df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e076      	b.n	8004ef8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e1a:	d009      	beq.n	8004e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
 8004e22:	e005      	b.n	8004e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fe fc2c 	bl	80036a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb4:	ea42 0103 	orr.w	r1, r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	0c1a      	lsrs	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f002 0204 	and.w	r2, r2, #4
 8004ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69da      	ldr	r2, [r3, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	@ 0x28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f12:	f7fe fec1 	bl	8003c98 <HAL_GetTick>
 8004f16:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f1e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f26:	887b      	ldrh	r3, [r7, #2]
 8004f28:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d00c      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x4a>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f36:	d106      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x46>
 8004f40:	7ffb      	ldrb	r3, [r7, #31]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d001      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
 8004f48:	e17f      	b.n	800524a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x5c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x5c>
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e174      	b.n	800524a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x6e>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e16d      	b.n	800524a <HAL_SPI_TransmitReceive+0x34a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d003      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2205      	movs	r2, #5
 8004f86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	887a      	ldrh	r2, [r7, #2]
 8004f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	887a      	ldrh	r2, [r7, #2]
 8004fb2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b40      	cmp	r3, #64	@ 0x40
 8004fcc:	d007      	beq.n	8004fde <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe6:	d17e      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0xf6>
 8004ff0:	8afb      	ldrh	r3, [r7, #22]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d16c      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	881a      	ldrh	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	1c9a      	adds	r2, r3, #2
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501a:	e059      	b.n	80050d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d11b      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x162>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d016      	beq.n	8005062 <HAL_SPI_TransmitReceive+0x162>
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	2b01      	cmp	r3, #1
 8005038:	d113      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	881a      	ldrh	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	1c9a      	adds	r2, r3, #2
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d119      	bne.n	80050a4 <HAL_SPI_TransmitReceive+0x1a4>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d014      	beq.n	80050a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	b292      	uxth	r2, r2
 8005086:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050a0:	2301      	movs	r3, #1
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050a4:	f7fe fdf8 	bl	8003c98 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d80d      	bhi.n	80050d0 <HAL_SPI_TransmitReceive+0x1d0>
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050ba:	d009      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e0bc      	b.n	800524a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1a0      	bne.n	800501c <HAL_SPI_TransmitReceive+0x11c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d19b      	bne.n	800501c <HAL_SPI_TransmitReceive+0x11c>
 80050e4:	e082      	b.n	80051ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x1f4>
 80050ee:	8afb      	ldrh	r3, [r7, #22]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d171      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800511a:	e05d      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d11c      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x264>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d017      	beq.n	8005164 <HAL_SPI_TransmitReceive+0x264>
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	2b01      	cmp	r3, #1
 8005138:	d114      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d119      	bne.n	80051a6 <HAL_SPI_TransmitReceive+0x2a6>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d014      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051a2:	2301      	movs	r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051a6:	f7fe fd77 	bl	8003c98 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d803      	bhi.n	80051be <HAL_SPI_TransmitReceive+0x2be>
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051bc:	d102      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x2c4>
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e038      	b.n	800524a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d19c      	bne.n	800511c <HAL_SPI_TransmitReceive+0x21c>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d197      	bne.n	800511c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f9b1 	bl	8005558 <SPI_EndRxTxTransaction>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e01d      	b.n	800524a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005248:	2300      	movs	r3, #0
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3728      	adds	r7, #40	@ 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	099b      	lsrs	r3, r3, #6
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
    return;
 8005296:	e0be      	b.n	8005416 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_SPI_IRQHandler+0x66>
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	09db      	lsrs	r3, r3, #7
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
    return;
 80052b8:	e0ad      	b.n	8005416 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_SPI_IRQHandler+0x80>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	099b      	lsrs	r3, r3, #6
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80a1 	beq.w	8005416 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 809a 	beq.w	8005416 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	099b      	lsrs	r3, r3, #6
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d023      	beq.n	8005336 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d011      	beq.n	800531e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fe:	f043 0204 	orr.w	r2, r3, #4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	e00b      	b.n	8005336 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]
        return;
 8005334:	e06f      	b.n	8005416 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d014      	beq.n	800536c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005346:	f043 0201 	orr.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005370:	2b00      	cmp	r3, #0
 8005372:	d04f      	beq.n	8005414 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005382:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <HAL_SPI_IRQHandler+0x14c>
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d034      	beq.n	800540a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0203 	bic.w	r2, r2, #3
 80053ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d011      	beq.n	80053dc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053bc:	4a17      	ldr	r2, [pc, #92]	@ (800541c <HAL_SPI_IRQHandler+0x1c8>)
 80053be:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe fdfd 	bl	8003fc4 <HAL_DMA_Abort_IT>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d016      	beq.n	8005412 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e8:	4a0c      	ldr	r2, [pc, #48]	@ (800541c <HAL_SPI_IRQHandler+0x1c8>)
 80053ea:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fde7 	bl	8003fc4 <HAL_DMA_Abort_IT>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005400:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005408:	e003      	b.n	8005412 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fe f906 	bl	800361c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005410:	e000      	b.n	8005414 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005412:	bf00      	nop
    return;
 8005414:	bf00      	nop
  }
}
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	08005421 	.word	0x08005421

08005420 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7fe f8ee 	bl	800361c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005458:	f7fe fc1e 	bl	8003c98 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	4413      	add	r3, r2
 8005466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005468:	f7fe fc16 	bl	8003c98 <HAL_GetTick>
 800546c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800546e:	4b39      	ldr	r3, [pc, #228]	@ (8005554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	015b      	lsls	r3, r3, #5
 8005474:	0d1b      	lsrs	r3, r3, #20
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	fb02 f303 	mul.w	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547e:	e054      	b.n	800552a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005486:	d050      	beq.n	800552a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005488:	f7fe fc06 	bl	8003c98 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	429a      	cmp	r2, r3
 8005496:	d902      	bls.n	800549e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d13d      	bne.n	800551a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054b6:	d111      	bne.n	80054dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c0:	d004      	beq.n	80054cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ca:	d107      	bne.n	80054dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e4:	d10f      	bne.n	8005506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e017      	b.n	800554a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3b01      	subs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d19b      	bne.n	8005480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000038 	.word	0x20000038

08005558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2201      	movs	r2, #1
 800556c:	2102      	movs	r1, #2
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff ff6a 	bl	8005448 <SPI_WaitFlagStateUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e013      	b.n	80055b2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2200      	movs	r2, #0
 8005592:	2180      	movs	r1, #128	@ 0x80
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7ff ff57 	bl	8005448 <SPI_WaitFlagStateUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e000      	b.n	80055b2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d001      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e03a      	b.n	800564a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a18      	ldr	r2, [pc, #96]	@ (8005654 <HAL_TIM_Base_Start_IT+0x98>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x58>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055fe:	d009      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x58>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a14      	ldr	r2, [pc, #80]	@ (8005658 <HAL_TIM_Base_Start_IT+0x9c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x58>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a13      	ldr	r2, [pc, #76]	@ (800565c <HAL_TIM_Base_Start_IT+0xa0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d111      	bne.n	8005638 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b06      	cmp	r3, #6
 8005624:	d010      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	e007      	b.n	8005648 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800

08005660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e041      	b.n	80056f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fe f8b8 	bl	80037fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f000 fab0 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <HAL_TIM_PWM_Start+0x24>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e022      	b.n	800576a <HAL_TIM_PWM_Start+0x6a>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d109      	bne.n	800573e <HAL_TIM_PWM_Start+0x3e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	e015      	b.n	800576a <HAL_TIM_PWM_Start+0x6a>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d109      	bne.n	8005758 <HAL_TIM_PWM_Start+0x58>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e008      	b.n	800576a <HAL_TIM_PWM_Start+0x6a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e05e      	b.n	8005830 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Start+0x82>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005780:	e013      	b.n	80057aa <HAL_TIM_PWM_Start+0xaa>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start+0x92>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005790:	e00b      	b.n	80057aa <HAL_TIM_PWM_Start+0xaa>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xa2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a0:	e003      	b.n	80057aa <HAL_TIM_PWM_Start+0xaa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fc1c 	bl	8005ff0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005838 <HAL_TIM_PWM_Start+0x138>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a18      	ldr	r2, [pc, #96]	@ (8005838 <HAL_TIM_PWM_Start+0x138>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_TIM_PWM_Start+0xfa>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e4:	d009      	beq.n	80057fa <HAL_TIM_PWM_Start+0xfa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a14      	ldr	r2, [pc, #80]	@ (800583c <HAL_TIM_PWM_Start+0x13c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIM_PWM_Start+0xfa>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a12      	ldr	r2, [pc, #72]	@ (8005840 <HAL_TIM_PWM_Start+0x140>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d111      	bne.n	800581e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b06      	cmp	r3, #6
 800580a:	d010      	beq.n	800582e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581c:	e007      	b.n	800582e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0202 	mvn.w	r2, #2
 8005878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f99c 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f98f 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f99e 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d020      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0204 	mvn.w	r2, #4
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f976 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f969 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f978 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d020      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01b      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0208 	mvn.w	r2, #8
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f950 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f943 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f952 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	d020      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0210 	mvn.w	r2, #16
 800595c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2208      	movs	r2, #8
 8005962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f92a 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f91d 	bl	8005bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f92c 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0201 	mvn.w	r2, #1
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8fc 	bl	8005ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fb99 	bl	8006106 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8fc 	bl	8005bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0220 	mvn.w	r2, #32
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb6c 	bl	80060f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e0ae      	b.n	8005ba0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	f200 809f 	bhi.w	8005b90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a52:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005a8d 	.word	0x08005a8d
 8005a5c:	08005b91 	.word	0x08005b91
 8005a60:	08005b91 	.word	0x08005b91
 8005a64:	08005b91 	.word	0x08005b91
 8005a68:	08005acd 	.word	0x08005acd
 8005a6c:	08005b91 	.word	0x08005b91
 8005a70:	08005b91 	.word	0x08005b91
 8005a74:	08005b91 	.word	0x08005b91
 8005a78:	08005b0f 	.word	0x08005b0f
 8005a7c:	08005b91 	.word	0x08005b91
 8005a80:	08005b91 	.word	0x08005b91
 8005a84:	08005b91 	.word	0x08005b91
 8005a88:	08005b4f 	.word	0x08005b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f924 	bl	8005ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0208 	orr.w	r2, r2, #8
 8005aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0204 	bic.w	r2, r2, #4
 8005ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6999      	ldr	r1, [r3, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	619a      	str	r2, [r3, #24]
      break;
 8005aca:	e064      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f96a 	bl	8005dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6999      	ldr	r1, [r3, #24]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	021a      	lsls	r2, r3, #8
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	619a      	str	r2, [r3, #24]
      break;
 8005b0c:	e043      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f9b3 	bl	8005e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0208 	orr.w	r2, r2, #8
 8005b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0204 	bic.w	r2, r2, #4
 8005b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69d9      	ldr	r1, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	61da      	str	r2, [r3, #28]
      break;
 8005b4c:	e023      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f9fd 	bl	8005f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69d9      	ldr	r1, [r3, #28]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	021a      	lsls	r2, r3, #8
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	61da      	str	r2, [r3, #28]
      break;
 8005b8e:	e002      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
      break;
 8005b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr
	...

08005c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a2f      	ldr	r2, [pc, #188]	@ (8005cd4 <TIM_Base_SetConfig+0xd0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_Base_SetConfig+0x30>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c22:	d007      	beq.n	8005c34 <TIM_Base_SetConfig+0x30>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd8 <TIM_Base_SetConfig+0xd4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_Base_SetConfig+0x30>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005cdc <TIM_Base_SetConfig+0xd8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d108      	bne.n	8005c46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a22      	ldr	r2, [pc, #136]	@ (8005cd4 <TIM_Base_SetConfig+0xd0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00b      	beq.n	8005c66 <TIM_Base_SetConfig+0x62>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c54:	d007      	beq.n	8005c66 <TIM_Base_SetConfig+0x62>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd8 <TIM_Base_SetConfig+0xd4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_Base_SetConfig+0x62>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1e      	ldr	r2, [pc, #120]	@ (8005cdc <TIM_Base_SetConfig+0xd8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d108      	bne.n	8005c78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd4 <TIM_Base_SetConfig+0xd0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d103      	bne.n	8005cac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	611a      	str	r2, [r3, #16]
  }
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800

08005ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f023 0201 	bic.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f023 0302 	bic.w	r3, r3, #2
 8005d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a1c      	ldr	r2, [pc, #112]	@ (8005da8 <TIM_OC1_SetConfig+0xc8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10c      	bne.n	8005d56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0308 	bic.w	r3, r3, #8
 8005d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a13      	ldr	r2, [pc, #76]	@ (8005da8 <TIM_OC1_SetConfig+0xc8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d111      	bne.n	8005d82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40012c00 	.word	0x40012c00

08005dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0210 	bic.w	r2, r3, #16
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0320 	bic.w	r3, r3, #32
 8005df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1d      	ldr	r2, [pc, #116]	@ (8005e7c <TIM_OC2_SetConfig+0xd0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10d      	bne.n	8005e28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a14      	ldr	r2, [pc, #80]	@ (8005e7c <TIM_OC2_SetConfig+0xd0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d113      	bne.n	8005e58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	40012c00 	.word	0x40012c00

08005e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <TIM_OC3_SetConfig+0xd0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10d      	bne.n	8005efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a14      	ldr	r2, [pc, #80]	@ (8005f50 <TIM_OC3_SetConfig+0xd0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d113      	bne.n	8005f2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40012c00 	.word	0x40012c00

08005f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	031b      	lsls	r3, r3, #12
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0f      	ldr	r2, [pc, #60]	@ (8005fec <TIM_OC4_SetConfig+0x98>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d109      	bne.n	8005fc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr
 8005fec:	40012c00 	.word	0x40012c00

08005ff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2201      	movs	r2, #1
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a1a      	ldr	r2, [r3, #32]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	43db      	mvns	r3, r3
 8006012:	401a      	ands	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 031f 	and.w	r3, r3, #31
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	fa01 f303 	lsl.w	r3, r1, r3
 8006028:	431a      	orrs	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e046      	b.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a16      	ldr	r2, [pc, #88]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609c:	d009      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a12      	ldr	r2, [pc, #72]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a10      	ldr	r2, [pc, #64]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10c      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800

080060f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <_ZdlPvj>:
 8006118:	f000 b811 	b.w	800613e <_ZdlPv>

0800611c <_Znwj>:
 800611c:	2801      	cmp	r0, #1
 800611e:	bf38      	it	cc
 8006120:	2001      	movcc	r0, #1
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	4620      	mov	r0, r4
 8006128:	f000 faf8 	bl	800671c <malloc>
 800612c:	b100      	cbz	r0, 8006130 <_Znwj+0x14>
 800612e:	bd10      	pop	{r4, pc}
 8006130:	f000 f808 	bl	8006144 <_ZSt15get_new_handlerv>
 8006134:	b908      	cbnz	r0, 800613a <_Znwj+0x1e>
 8006136:	f000 f80d 	bl	8006154 <abort>
 800613a:	4780      	blx	r0
 800613c:	e7f3      	b.n	8006126 <_Znwj+0xa>

0800613e <_ZdlPv>:
 800613e:	f000 baf5 	b.w	800672c <free>
	...

08006144 <_ZSt15get_new_handlerv>:
 8006144:	4b02      	ldr	r3, [pc, #8]	@ (8006150 <_ZSt15get_new_handlerv+0xc>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	f3bf 8f5b 	dmb	ish
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000390 	.word	0x20000390

08006154 <abort>:
 8006154:	2006      	movs	r0, #6
 8006156:	b508      	push	{r3, lr}
 8006158:	f000 fe90 	bl	8006e7c <raise>
 800615c:	2001      	movs	r0, #1
 800615e:	f7fd fc6c 	bl	8003a3a <_exit>
	...

08006164 <exit>:
 8006164:	b508      	push	{r3, lr}
 8006166:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <exit+0x1c>)
 8006168:	4604      	mov	r4, r0
 800616a:	b113      	cbz	r3, 8006172 <exit+0xe>
 800616c:	2100      	movs	r1, #0
 800616e:	f3af 8000 	nop.w
 8006172:	4b04      	ldr	r3, [pc, #16]	@ (8006184 <exit+0x20>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	b103      	cbz	r3, 800617a <exit+0x16>
 8006178:	4798      	blx	r3
 800617a:	4620      	mov	r0, r4
 800617c:	f7fd fc5d 	bl	8003a3a <_exit>
 8006180:	00000000 	.word	0x00000000
 8006184:	200004d4 	.word	0x200004d4

08006188 <__cvt>:
 8006188:	2b00      	cmp	r3, #0
 800618a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618e:	461d      	mov	r5, r3
 8006190:	bfbb      	ittet	lt
 8006192:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006196:	461d      	movlt	r5, r3
 8006198:	2300      	movge	r3, #0
 800619a:	232d      	movlt	r3, #45	@ 0x2d
 800619c:	b088      	sub	sp, #32
 800619e:	4614      	mov	r4, r2
 80061a0:	bfb8      	it	lt
 80061a2:	4614      	movlt	r4, r2
 80061a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80061a8:	7013      	strb	r3, [r2, #0]
 80061aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80061b0:	f023 0820 	bic.w	r8, r3, #32
 80061b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061b8:	d005      	beq.n	80061c6 <__cvt+0x3e>
 80061ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061be:	d100      	bne.n	80061c2 <__cvt+0x3a>
 80061c0:	3601      	adds	r6, #1
 80061c2:	2302      	movs	r3, #2
 80061c4:	e000      	b.n	80061c8 <__cvt+0x40>
 80061c6:	2303      	movs	r3, #3
 80061c8:	aa07      	add	r2, sp, #28
 80061ca:	9204      	str	r2, [sp, #16]
 80061cc:	aa06      	add	r2, sp, #24
 80061ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80061d2:	e9cd 3600 	strd	r3, r6, [sp]
 80061d6:	4622      	mov	r2, r4
 80061d8:	462b      	mov	r3, r5
 80061da:	f000 ff45 	bl	8007068 <_dtoa_r>
 80061de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061e2:	4607      	mov	r7, r0
 80061e4:	d119      	bne.n	800621a <__cvt+0x92>
 80061e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80061e8:	07db      	lsls	r3, r3, #31
 80061ea:	d50e      	bpl.n	800620a <__cvt+0x82>
 80061ec:	eb00 0906 	add.w	r9, r0, r6
 80061f0:	2200      	movs	r2, #0
 80061f2:	2300      	movs	r3, #0
 80061f4:	4620      	mov	r0, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	f7fa fbd6 	bl	80009a8 <__aeabi_dcmpeq>
 80061fc:	b108      	cbz	r0, 8006202 <__cvt+0x7a>
 80061fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8006202:	2230      	movs	r2, #48	@ 0x30
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	454b      	cmp	r3, r9
 8006208:	d31e      	bcc.n	8006248 <__cvt+0xc0>
 800620a:	4638      	mov	r0, r7
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006210:	1bdb      	subs	r3, r3, r7
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	b008      	add	sp, #32
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800621e:	eb00 0906 	add.w	r9, r0, r6
 8006222:	d1e5      	bne.n	80061f0 <__cvt+0x68>
 8006224:	7803      	ldrb	r3, [r0, #0]
 8006226:	2b30      	cmp	r3, #48	@ 0x30
 8006228:	d10a      	bne.n	8006240 <__cvt+0xb8>
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7fa fbb9 	bl	80009a8 <__aeabi_dcmpeq>
 8006236:	b918      	cbnz	r0, 8006240 <__cvt+0xb8>
 8006238:	f1c6 0601 	rsb	r6, r6, #1
 800623c:	f8ca 6000 	str.w	r6, [sl]
 8006240:	f8da 3000 	ldr.w	r3, [sl]
 8006244:	4499      	add	r9, r3
 8006246:	e7d3      	b.n	80061f0 <__cvt+0x68>
 8006248:	1c59      	adds	r1, r3, #1
 800624a:	9107      	str	r1, [sp, #28]
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e7d9      	b.n	8006204 <__cvt+0x7c>

08006250 <__exponent>:
 8006250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006252:	2900      	cmp	r1, #0
 8006254:	bfb6      	itet	lt
 8006256:	232d      	movlt	r3, #45	@ 0x2d
 8006258:	232b      	movge	r3, #43	@ 0x2b
 800625a:	4249      	neglt	r1, r1
 800625c:	2909      	cmp	r1, #9
 800625e:	7002      	strb	r2, [r0, #0]
 8006260:	7043      	strb	r3, [r0, #1]
 8006262:	dd29      	ble.n	80062b8 <__exponent+0x68>
 8006264:	f10d 0307 	add.w	r3, sp, #7
 8006268:	461d      	mov	r5, r3
 800626a:	270a      	movs	r7, #10
 800626c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006270:	461a      	mov	r2, r3
 8006272:	fb07 1416 	mls	r4, r7, r6, r1
 8006276:	3430      	adds	r4, #48	@ 0x30
 8006278:	f802 4c01 	strb.w	r4, [r2, #-1]
 800627c:	460c      	mov	r4, r1
 800627e:	2c63      	cmp	r4, #99	@ 0x63
 8006280:	4631      	mov	r1, r6
 8006282:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006286:	dcf1      	bgt.n	800626c <__exponent+0x1c>
 8006288:	3130      	adds	r1, #48	@ 0x30
 800628a:	1e94      	subs	r4, r2, #2
 800628c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006290:	4623      	mov	r3, r4
 8006292:	1c41      	adds	r1, r0, #1
 8006294:	42ab      	cmp	r3, r5
 8006296:	d30a      	bcc.n	80062ae <__exponent+0x5e>
 8006298:	f10d 0309 	add.w	r3, sp, #9
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	42ac      	cmp	r4, r5
 80062a0:	bf88      	it	hi
 80062a2:	2300      	movhi	r3, #0
 80062a4:	3302      	adds	r3, #2
 80062a6:	4403      	add	r3, r0
 80062a8:	1a18      	subs	r0, r3, r0
 80062aa:	b003      	add	sp, #12
 80062ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062b6:	e7ed      	b.n	8006294 <__exponent+0x44>
 80062b8:	2330      	movs	r3, #48	@ 0x30
 80062ba:	3130      	adds	r1, #48	@ 0x30
 80062bc:	7083      	strb	r3, [r0, #2]
 80062be:	70c1      	strb	r1, [r0, #3]
 80062c0:	1d03      	adds	r3, r0, #4
 80062c2:	e7f1      	b.n	80062a8 <__exponent+0x58>

080062c4 <_printf_float>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	b091      	sub	sp, #68	@ 0x44
 80062ca:	460c      	mov	r4, r1
 80062cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80062d0:	4616      	mov	r6, r2
 80062d2:	461f      	mov	r7, r3
 80062d4:	4605      	mov	r5, r0
 80062d6:	f000 fe2b 	bl	8006f30 <_localeconv_r>
 80062da:	6803      	ldr	r3, [r0, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	9308      	str	r3, [sp, #32]
 80062e0:	f7f9 ff36 	bl	8000150 <strlen>
 80062e4:	2300      	movs	r3, #0
 80062e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80062e8:	f8d8 3000 	ldr.w	r3, [r8]
 80062ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80062ee:	3307      	adds	r3, #7
 80062f0:	f023 0307 	bic.w	r3, r3, #7
 80062f4:	f103 0208 	add.w	r2, r3, #8
 80062f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062fc:	f8d4 b000 	ldr.w	fp, [r4]
 8006300:	f8c8 2000 	str.w	r2, [r8]
 8006304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006308:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800630c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800630e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006312:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006316:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800631a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800631e:	4b9c      	ldr	r3, [pc, #624]	@ (8006590 <_printf_float+0x2cc>)
 8006320:	f7fa fb74 	bl	8000a0c <__aeabi_dcmpun>
 8006324:	bb70      	cbnz	r0, 8006384 <_printf_float+0xc0>
 8006326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800632a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800632e:	4b98      	ldr	r3, [pc, #608]	@ (8006590 <_printf_float+0x2cc>)
 8006330:	f7fa fb4e 	bl	80009d0 <__aeabi_dcmple>
 8006334:	bb30      	cbnz	r0, 8006384 <_printf_float+0xc0>
 8006336:	2200      	movs	r2, #0
 8006338:	2300      	movs	r3, #0
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa fb3d 	bl	80009bc <__aeabi_dcmplt>
 8006342:	b110      	cbz	r0, 800634a <_printf_float+0x86>
 8006344:	232d      	movs	r3, #45	@ 0x2d
 8006346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800634a:	4a92      	ldr	r2, [pc, #584]	@ (8006594 <_printf_float+0x2d0>)
 800634c:	4b92      	ldr	r3, [pc, #584]	@ (8006598 <_printf_float+0x2d4>)
 800634e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006352:	bf8c      	ite	hi
 8006354:	4690      	movhi	r8, r2
 8006356:	4698      	movls	r8, r3
 8006358:	2303      	movs	r3, #3
 800635a:	f04f 0900 	mov.w	r9, #0
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	f02b 0304 	bic.w	r3, fp, #4
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	4633      	mov	r3, r6
 8006368:	4621      	mov	r1, r4
 800636a:	4628      	mov	r0, r5
 800636c:	9700      	str	r7, [sp, #0]
 800636e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006370:	f000 fa86 	bl	8006880 <_printf_common>
 8006374:	3001      	adds	r0, #1
 8006376:	f040 8090 	bne.w	800649a <_printf_float+0x1d6>
 800637a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800637e:	b011      	add	sp, #68	@ 0x44
 8006380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	4640      	mov	r0, r8
 800638a:	4649      	mov	r1, r9
 800638c:	f7fa fb3e 	bl	8000a0c <__aeabi_dcmpun>
 8006390:	b148      	cbz	r0, 80063a6 <_printf_float+0xe2>
 8006392:	464b      	mov	r3, r9
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb8      	it	lt
 8006398:	232d      	movlt	r3, #45	@ 0x2d
 800639a:	4a80      	ldr	r2, [pc, #512]	@ (800659c <_printf_float+0x2d8>)
 800639c:	bfb8      	it	lt
 800639e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063a2:	4b7f      	ldr	r3, [pc, #508]	@ (80065a0 <_printf_float+0x2dc>)
 80063a4:	e7d3      	b.n	800634e <_printf_float+0x8a>
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	d13f      	bne.n	8006430 <_printf_float+0x16c>
 80063b0:	2306      	movs	r3, #6
 80063b2:	6063      	str	r3, [r4, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	9206      	str	r2, [sp, #24]
 80063be:	aa0e      	add	r2, sp, #56	@ 0x38
 80063c0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80063c4:	aa0d      	add	r2, sp, #52	@ 0x34
 80063c6:	9203      	str	r2, [sp, #12]
 80063c8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80063cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80063d0:	6863      	ldr	r3, [r4, #4]
 80063d2:	4642      	mov	r2, r8
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4628      	mov	r0, r5
 80063d8:	464b      	mov	r3, r9
 80063da:	910a      	str	r1, [sp, #40]	@ 0x28
 80063dc:	f7ff fed4 	bl	8006188 <__cvt>
 80063e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063e2:	4680      	mov	r8, r0
 80063e4:	2947      	cmp	r1, #71	@ 0x47
 80063e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80063e8:	d128      	bne.n	800643c <_printf_float+0x178>
 80063ea:	1cc8      	adds	r0, r1, #3
 80063ec:	db02      	blt.n	80063f4 <_printf_float+0x130>
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	4299      	cmp	r1, r3
 80063f2:	dd40      	ble.n	8006476 <_printf_float+0x1b2>
 80063f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80063f8:	fa5f fa8a 	uxtb.w	sl, sl
 80063fc:	4652      	mov	r2, sl
 80063fe:	3901      	subs	r1, #1
 8006400:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006404:	910d      	str	r1, [sp, #52]	@ 0x34
 8006406:	f7ff ff23 	bl	8006250 <__exponent>
 800640a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800640c:	4681      	mov	r9, r0
 800640e:	1813      	adds	r3, r2, r0
 8006410:	2a01      	cmp	r2, #1
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	dc02      	bgt.n	800641c <_printf_float+0x158>
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	07d2      	lsls	r2, r2, #31
 800641a:	d501      	bpl.n	8006420 <_printf_float+0x15c>
 800641c:	3301      	adds	r3, #1
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006424:	2b00      	cmp	r3, #0
 8006426:	d09e      	beq.n	8006366 <_printf_float+0xa2>
 8006428:	232d      	movs	r3, #45	@ 0x2d
 800642a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800642e:	e79a      	b.n	8006366 <_printf_float+0xa2>
 8006430:	2947      	cmp	r1, #71	@ 0x47
 8006432:	d1bf      	bne.n	80063b4 <_printf_float+0xf0>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1bd      	bne.n	80063b4 <_printf_float+0xf0>
 8006438:	2301      	movs	r3, #1
 800643a:	e7ba      	b.n	80063b2 <_printf_float+0xee>
 800643c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006440:	d9dc      	bls.n	80063fc <_printf_float+0x138>
 8006442:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006446:	d118      	bne.n	800647a <_printf_float+0x1b6>
 8006448:	2900      	cmp	r1, #0
 800644a:	6863      	ldr	r3, [r4, #4]
 800644c:	dd0b      	ble.n	8006466 <_printf_float+0x1a2>
 800644e:	6121      	str	r1, [r4, #16]
 8006450:	b913      	cbnz	r3, 8006458 <_printf_float+0x194>
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	07d0      	lsls	r0, r2, #31
 8006456:	d502      	bpl.n	800645e <_printf_float+0x19a>
 8006458:	3301      	adds	r3, #1
 800645a:	440b      	add	r3, r1
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	f04f 0900 	mov.w	r9, #0
 8006462:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006464:	e7dc      	b.n	8006420 <_printf_float+0x15c>
 8006466:	b913      	cbnz	r3, 800646e <_printf_float+0x1aa>
 8006468:	6822      	ldr	r2, [r4, #0]
 800646a:	07d2      	lsls	r2, r2, #31
 800646c:	d501      	bpl.n	8006472 <_printf_float+0x1ae>
 800646e:	3302      	adds	r3, #2
 8006470:	e7f4      	b.n	800645c <_printf_float+0x198>
 8006472:	2301      	movs	r3, #1
 8006474:	e7f2      	b.n	800645c <_printf_float+0x198>
 8006476:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800647a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800647c:	4299      	cmp	r1, r3
 800647e:	db05      	blt.n	800648c <_printf_float+0x1c8>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	6121      	str	r1, [r4, #16]
 8006484:	07d8      	lsls	r0, r3, #31
 8006486:	d5ea      	bpl.n	800645e <_printf_float+0x19a>
 8006488:	1c4b      	adds	r3, r1, #1
 800648a:	e7e7      	b.n	800645c <_printf_float+0x198>
 800648c:	2900      	cmp	r1, #0
 800648e:	bfcc      	ite	gt
 8006490:	2201      	movgt	r2, #1
 8006492:	f1c1 0202 	rsble	r2, r1, #2
 8006496:	4413      	add	r3, r2
 8006498:	e7e0      	b.n	800645c <_printf_float+0x198>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	055a      	lsls	r2, r3, #21
 800649e:	d407      	bmi.n	80064b0 <_printf_float+0x1ec>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	4642      	mov	r2, r8
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	d12b      	bne.n	8006506 <_printf_float+0x242>
 80064ae:	e764      	b.n	800637a <_printf_float+0xb6>
 80064b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064b4:	f240 80dc 	bls.w	8006670 <_printf_float+0x3ac>
 80064b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064bc:	2200      	movs	r2, #0
 80064be:	2300      	movs	r3, #0
 80064c0:	f7fa fa72 	bl	80009a8 <__aeabi_dcmpeq>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d033      	beq.n	8006530 <_printf_float+0x26c>
 80064c8:	2301      	movs	r3, #1
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	4a35      	ldr	r2, [pc, #212]	@ (80065a4 <_printf_float+0x2e0>)
 80064d0:	47b8      	blx	r7
 80064d2:	3001      	adds	r0, #1
 80064d4:	f43f af51 	beq.w	800637a <_printf_float+0xb6>
 80064d8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80064dc:	4543      	cmp	r3, r8
 80064de:	db02      	blt.n	80064e6 <_printf_float+0x222>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	07d8      	lsls	r0, r3, #31
 80064e4:	d50f      	bpl.n	8006506 <_printf_float+0x242>
 80064e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	f43f af42 	beq.w	800637a <_printf_float+0xb6>
 80064f6:	f04f 0900 	mov.w	r9, #0
 80064fa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80064fe:	f104 0a1a 	add.w	sl, r4, #26
 8006502:	45c8      	cmp	r8, r9
 8006504:	dc09      	bgt.n	800651a <_printf_float+0x256>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	079b      	lsls	r3, r3, #30
 800650a:	f100 8102 	bmi.w	8006712 <_printf_float+0x44e>
 800650e:	68e0      	ldr	r0, [r4, #12]
 8006510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006512:	4298      	cmp	r0, r3
 8006514:	bfb8      	it	lt
 8006516:	4618      	movlt	r0, r3
 8006518:	e731      	b.n	800637e <_printf_float+0xba>
 800651a:	2301      	movs	r3, #1
 800651c:	4652      	mov	r2, sl
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	47b8      	blx	r7
 8006524:	3001      	adds	r0, #1
 8006526:	f43f af28 	beq.w	800637a <_printf_float+0xb6>
 800652a:	f109 0901 	add.w	r9, r9, #1
 800652e:	e7e8      	b.n	8006502 <_printf_float+0x23e>
 8006530:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006532:	2b00      	cmp	r3, #0
 8006534:	dc38      	bgt.n	80065a8 <_printf_float+0x2e4>
 8006536:	2301      	movs	r3, #1
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	4a19      	ldr	r2, [pc, #100]	@ (80065a4 <_printf_float+0x2e0>)
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f af1a 	beq.w	800637a <_printf_float+0xb6>
 8006546:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800654a:	ea59 0303 	orrs.w	r3, r9, r3
 800654e:	d102      	bne.n	8006556 <_printf_float+0x292>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	07d9      	lsls	r1, r3, #31
 8006554:	d5d7      	bpl.n	8006506 <_printf_float+0x242>
 8006556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800655a:	4631      	mov	r1, r6
 800655c:	4628      	mov	r0, r5
 800655e:	47b8      	blx	r7
 8006560:	3001      	adds	r0, #1
 8006562:	f43f af0a 	beq.w	800637a <_printf_float+0xb6>
 8006566:	f04f 0a00 	mov.w	sl, #0
 800656a:	f104 0b1a 	add.w	fp, r4, #26
 800656e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006570:	425b      	negs	r3, r3
 8006572:	4553      	cmp	r3, sl
 8006574:	dc01      	bgt.n	800657a <_printf_float+0x2b6>
 8006576:	464b      	mov	r3, r9
 8006578:	e793      	b.n	80064a2 <_printf_float+0x1de>
 800657a:	2301      	movs	r3, #1
 800657c:	465a      	mov	r2, fp
 800657e:	4631      	mov	r1, r6
 8006580:	4628      	mov	r0, r5
 8006582:	47b8      	blx	r7
 8006584:	3001      	adds	r0, #1
 8006586:	f43f aef8 	beq.w	800637a <_printf_float+0xb6>
 800658a:	f10a 0a01 	add.w	sl, sl, #1
 800658e:	e7ee      	b.n	800656e <_printf_float+0x2aa>
 8006590:	7fefffff 	.word	0x7fefffff
 8006594:	08008e0a 	.word	0x08008e0a
 8006598:	08008e06 	.word	0x08008e06
 800659c:	08008e12 	.word	0x08008e12
 80065a0:	08008e0e 	.word	0x08008e0e
 80065a4:	08008e16 	.word	0x08008e16
 80065a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065aa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80065ae:	4553      	cmp	r3, sl
 80065b0:	bfa8      	it	ge
 80065b2:	4653      	movge	r3, sl
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	4699      	mov	r9, r3
 80065b8:	dc36      	bgt.n	8006628 <_printf_float+0x364>
 80065ba:	f04f 0b00 	mov.w	fp, #0
 80065be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065c2:	f104 021a 	add.w	r2, r4, #26
 80065c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ca:	eba3 0309 	sub.w	r3, r3, r9
 80065ce:	455b      	cmp	r3, fp
 80065d0:	dc31      	bgt.n	8006636 <_printf_float+0x372>
 80065d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065d4:	459a      	cmp	sl, r3
 80065d6:	dc3a      	bgt.n	800664e <_printf_float+0x38a>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	07da      	lsls	r2, r3, #31
 80065dc:	d437      	bmi.n	800664e <_printf_float+0x38a>
 80065de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065e0:	ebaa 0903 	sub.w	r9, sl, r3
 80065e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065e6:	ebaa 0303 	sub.w	r3, sl, r3
 80065ea:	4599      	cmp	r9, r3
 80065ec:	bfa8      	it	ge
 80065ee:	4699      	movge	r9, r3
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	dc33      	bgt.n	800665e <_printf_float+0x39a>
 80065f6:	f04f 0800 	mov.w	r8, #0
 80065fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065fe:	f104 0b1a 	add.w	fp, r4, #26
 8006602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006604:	ebaa 0303 	sub.w	r3, sl, r3
 8006608:	eba3 0309 	sub.w	r3, r3, r9
 800660c:	4543      	cmp	r3, r8
 800660e:	f77f af7a 	ble.w	8006506 <_printf_float+0x242>
 8006612:	2301      	movs	r3, #1
 8006614:	465a      	mov	r2, fp
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	f43f aeac 	beq.w	800637a <_printf_float+0xb6>
 8006622:	f108 0801 	add.w	r8, r8, #1
 8006626:	e7ec      	b.n	8006602 <_printf_float+0x33e>
 8006628:	4642      	mov	r2, r8
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	d1c2      	bne.n	80065ba <_printf_float+0x2f6>
 8006634:	e6a1      	b.n	800637a <_printf_float+0xb6>
 8006636:	2301      	movs	r3, #1
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	920a      	str	r2, [sp, #40]	@ 0x28
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae9a 	beq.w	800637a <_printf_float+0xb6>
 8006646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006648:	f10b 0b01 	add.w	fp, fp, #1
 800664c:	e7bb      	b.n	80065c6 <_printf_float+0x302>
 800664e:	4631      	mov	r1, r6
 8006650:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	d1c0      	bne.n	80065de <_printf_float+0x31a>
 800665c:	e68d      	b.n	800637a <_printf_float+0xb6>
 800665e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006660:	464b      	mov	r3, r9
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	4442      	add	r2, r8
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	d1c3      	bne.n	80065f6 <_printf_float+0x332>
 800666e:	e684      	b.n	800637a <_printf_float+0xb6>
 8006670:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006674:	f1ba 0f01 	cmp.w	sl, #1
 8006678:	dc01      	bgt.n	800667e <_printf_float+0x3ba>
 800667a:	07db      	lsls	r3, r3, #31
 800667c:	d536      	bpl.n	80066ec <_printf_float+0x428>
 800667e:	2301      	movs	r3, #1
 8006680:	4642      	mov	r2, r8
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	47b8      	blx	r7
 8006688:	3001      	adds	r0, #1
 800668a:	f43f ae76 	beq.w	800637a <_printf_float+0xb6>
 800668e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f ae6e 	beq.w	800637a <_printf_float+0xb6>
 800669e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066a2:	2200      	movs	r2, #0
 80066a4:	2300      	movs	r3, #0
 80066a6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80066aa:	f7fa f97d 	bl	80009a8 <__aeabi_dcmpeq>
 80066ae:	b9c0      	cbnz	r0, 80066e2 <_printf_float+0x41e>
 80066b0:	4653      	mov	r3, sl
 80066b2:	f108 0201 	add.w	r2, r8, #1
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	d10c      	bne.n	80066da <_printf_float+0x416>
 80066c0:	e65b      	b.n	800637a <_printf_float+0xb6>
 80066c2:	2301      	movs	r3, #1
 80066c4:	465a      	mov	r2, fp
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f ae54 	beq.w	800637a <_printf_float+0xb6>
 80066d2:	f108 0801 	add.w	r8, r8, #1
 80066d6:	45d0      	cmp	r8, sl
 80066d8:	dbf3      	blt.n	80066c2 <_printf_float+0x3fe>
 80066da:	464b      	mov	r3, r9
 80066dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066e0:	e6e0      	b.n	80064a4 <_printf_float+0x1e0>
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	f104 0b1a 	add.w	fp, r4, #26
 80066ea:	e7f4      	b.n	80066d6 <_printf_float+0x412>
 80066ec:	2301      	movs	r3, #1
 80066ee:	4642      	mov	r2, r8
 80066f0:	e7e1      	b.n	80066b6 <_printf_float+0x3f2>
 80066f2:	2301      	movs	r3, #1
 80066f4:	464a      	mov	r2, r9
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f ae3c 	beq.w	800637a <_printf_float+0xb6>
 8006702:	f108 0801 	add.w	r8, r8, #1
 8006706:	68e3      	ldr	r3, [r4, #12]
 8006708:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800670a:	1a5b      	subs	r3, r3, r1
 800670c:	4543      	cmp	r3, r8
 800670e:	dcf0      	bgt.n	80066f2 <_printf_float+0x42e>
 8006710:	e6fd      	b.n	800650e <_printf_float+0x24a>
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	f104 0919 	add.w	r9, r4, #25
 800671a:	e7f4      	b.n	8006706 <_printf_float+0x442>

0800671c <malloc>:
 800671c:	4b02      	ldr	r3, [pc, #8]	@ (8006728 <malloc+0xc>)
 800671e:	4601      	mov	r1, r0
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f000 b82d 	b.w	8006780 <_malloc_r>
 8006726:	bf00      	nop
 8006728:	20000050 	.word	0x20000050

0800672c <free>:
 800672c:	4b02      	ldr	r3, [pc, #8]	@ (8006738 <free+0xc>)
 800672e:	4601      	mov	r1, r0
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	f001 ba6d 	b.w	8007c10 <_free_r>
 8006736:	bf00      	nop
 8006738:	20000050 	.word	0x20000050

0800673c <sbrk_aligned>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4e0f      	ldr	r6, [pc, #60]	@ (800677c <sbrk_aligned+0x40>)
 8006740:	460c      	mov	r4, r1
 8006742:	6831      	ldr	r1, [r6, #0]
 8006744:	4605      	mov	r5, r0
 8006746:	b911      	cbnz	r1, 800674e <sbrk_aligned+0x12>
 8006748:	f000 fbb4 	bl	8006eb4 <_sbrk_r>
 800674c:	6030      	str	r0, [r6, #0]
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	f000 fbaf 	bl	8006eb4 <_sbrk_r>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d103      	bne.n	8006762 <sbrk_aligned+0x26>
 800675a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800675e:	4620      	mov	r0, r4
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	1cc4      	adds	r4, r0, #3
 8006764:	f024 0403 	bic.w	r4, r4, #3
 8006768:	42a0      	cmp	r0, r4
 800676a:	d0f8      	beq.n	800675e <sbrk_aligned+0x22>
 800676c:	1a21      	subs	r1, r4, r0
 800676e:	4628      	mov	r0, r5
 8006770:	f000 fba0 	bl	8006eb4 <_sbrk_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d1f2      	bne.n	800675e <sbrk_aligned+0x22>
 8006778:	e7ef      	b.n	800675a <sbrk_aligned+0x1e>
 800677a:	bf00      	nop
 800677c:	20000394 	.word	0x20000394

08006780 <_malloc_r>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	1ccd      	adds	r5, r1, #3
 8006786:	f025 0503 	bic.w	r5, r5, #3
 800678a:	3508      	adds	r5, #8
 800678c:	2d0c      	cmp	r5, #12
 800678e:	bf38      	it	cc
 8006790:	250c      	movcc	r5, #12
 8006792:	2d00      	cmp	r5, #0
 8006794:	4606      	mov	r6, r0
 8006796:	db01      	blt.n	800679c <_malloc_r+0x1c>
 8006798:	42a9      	cmp	r1, r5
 800679a:	d904      	bls.n	80067a6 <_malloc_r+0x26>
 800679c:	230c      	movs	r3, #12
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	2000      	movs	r0, #0
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800687c <_malloc_r+0xfc>
 80067aa:	f000 f9f9 	bl	8006ba0 <__malloc_lock>
 80067ae:	f8d8 3000 	ldr.w	r3, [r8]
 80067b2:	461c      	mov	r4, r3
 80067b4:	bb44      	cbnz	r4, 8006808 <_malloc_r+0x88>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff ffbf 	bl	800673c <sbrk_aligned>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	4604      	mov	r4, r0
 80067c2:	d158      	bne.n	8006876 <_malloc_r+0xf6>
 80067c4:	f8d8 4000 	ldr.w	r4, [r8]
 80067c8:	4627      	mov	r7, r4
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	d143      	bne.n	8006856 <_malloc_r+0xd6>
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d04b      	beq.n	800686a <_malloc_r+0xea>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	4639      	mov	r1, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	eb04 0903 	add.w	r9, r4, r3
 80067dc:	f000 fb6a 	bl	8006eb4 <_sbrk_r>
 80067e0:	4581      	cmp	r9, r0
 80067e2:	d142      	bne.n	800686a <_malloc_r+0xea>
 80067e4:	6821      	ldr	r1, [r4, #0]
 80067e6:	4630      	mov	r0, r6
 80067e8:	1a6d      	subs	r5, r5, r1
 80067ea:	4629      	mov	r1, r5
 80067ec:	f7ff ffa6 	bl	800673c <sbrk_aligned>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d03a      	beq.n	800686a <_malloc_r+0xea>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	442b      	add	r3, r5
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	f8d8 3000 	ldr.w	r3, [r8]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	bb62      	cbnz	r2, 800685c <_malloc_r+0xdc>
 8006802:	f8c8 7000 	str.w	r7, [r8]
 8006806:	e00f      	b.n	8006828 <_malloc_r+0xa8>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	1b52      	subs	r2, r2, r5
 800680c:	d420      	bmi.n	8006850 <_malloc_r+0xd0>
 800680e:	2a0b      	cmp	r2, #11
 8006810:	d917      	bls.n	8006842 <_malloc_r+0xc2>
 8006812:	1961      	adds	r1, r4, r5
 8006814:	42a3      	cmp	r3, r4
 8006816:	6025      	str	r5, [r4, #0]
 8006818:	bf18      	it	ne
 800681a:	6059      	strne	r1, [r3, #4]
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	bf08      	it	eq
 8006820:	f8c8 1000 	streq.w	r1, [r8]
 8006824:	5162      	str	r2, [r4, r5]
 8006826:	604b      	str	r3, [r1, #4]
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f9bf 	bl	8006bac <__malloc_unlock>
 800682e:	f104 000b 	add.w	r0, r4, #11
 8006832:	1d23      	adds	r3, r4, #4
 8006834:	f020 0007 	bic.w	r0, r0, #7
 8006838:	1ac2      	subs	r2, r0, r3
 800683a:	bf1c      	itt	ne
 800683c:	1a1b      	subne	r3, r3, r0
 800683e:	50a3      	strne	r3, [r4, r2]
 8006840:	e7af      	b.n	80067a2 <_malloc_r+0x22>
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	42a3      	cmp	r3, r4
 8006846:	bf0c      	ite	eq
 8006848:	f8c8 2000 	streq.w	r2, [r8]
 800684c:	605a      	strne	r2, [r3, #4]
 800684e:	e7eb      	b.n	8006828 <_malloc_r+0xa8>
 8006850:	4623      	mov	r3, r4
 8006852:	6864      	ldr	r4, [r4, #4]
 8006854:	e7ae      	b.n	80067b4 <_malloc_r+0x34>
 8006856:	463c      	mov	r4, r7
 8006858:	687f      	ldr	r7, [r7, #4]
 800685a:	e7b6      	b.n	80067ca <_malloc_r+0x4a>
 800685c:	461a      	mov	r2, r3
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	d1fb      	bne.n	800685c <_malloc_r+0xdc>
 8006864:	2300      	movs	r3, #0
 8006866:	6053      	str	r3, [r2, #4]
 8006868:	e7de      	b.n	8006828 <_malloc_r+0xa8>
 800686a:	230c      	movs	r3, #12
 800686c:	4630      	mov	r0, r6
 800686e:	6033      	str	r3, [r6, #0]
 8006870:	f000 f99c 	bl	8006bac <__malloc_unlock>
 8006874:	e794      	b.n	80067a0 <_malloc_r+0x20>
 8006876:	6005      	str	r5, [r0, #0]
 8006878:	e7d6      	b.n	8006828 <_malloc_r+0xa8>
 800687a:	bf00      	nop
 800687c:	20000398 	.word	0x20000398

08006880 <_printf_common>:
 8006880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	4616      	mov	r6, r2
 8006886:	4698      	mov	r8, r3
 8006888:	688a      	ldr	r2, [r1, #8]
 800688a:	690b      	ldr	r3, [r1, #16]
 800688c:	4607      	mov	r7, r0
 800688e:	4293      	cmp	r3, r2
 8006890:	bfb8      	it	lt
 8006892:	4613      	movlt	r3, r2
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800689a:	460c      	mov	r4, r1
 800689c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068a0:	b10a      	cbz	r2, 80068a6 <_printf_common+0x26>
 80068a2:	3301      	adds	r3, #1
 80068a4:	6033      	str	r3, [r6, #0]
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	0699      	lsls	r1, r3, #26
 80068aa:	bf42      	ittt	mi
 80068ac:	6833      	ldrmi	r3, [r6, #0]
 80068ae:	3302      	addmi	r3, #2
 80068b0:	6033      	strmi	r3, [r6, #0]
 80068b2:	6825      	ldr	r5, [r4, #0]
 80068b4:	f015 0506 	ands.w	r5, r5, #6
 80068b8:	d106      	bne.n	80068c8 <_printf_common+0x48>
 80068ba:	f104 0a19 	add.w	sl, r4, #25
 80068be:	68e3      	ldr	r3, [r4, #12]
 80068c0:	6832      	ldr	r2, [r6, #0]
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	42ab      	cmp	r3, r5
 80068c6:	dc2b      	bgt.n	8006920 <_printf_common+0xa0>
 80068c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	3b00      	subs	r3, #0
 80068d0:	bf18      	it	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	0692      	lsls	r2, r2, #26
 80068d6:	d430      	bmi.n	800693a <_printf_common+0xba>
 80068d8:	4641      	mov	r1, r8
 80068da:	4638      	mov	r0, r7
 80068dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068e0:	47c8      	blx	r9
 80068e2:	3001      	adds	r0, #1
 80068e4:	d023      	beq.n	800692e <_printf_common+0xae>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	6922      	ldr	r2, [r4, #16]
 80068ea:	f003 0306 	and.w	r3, r3, #6
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	bf14      	ite	ne
 80068f2:	2500      	movne	r5, #0
 80068f4:	6833      	ldreq	r3, [r6, #0]
 80068f6:	f04f 0600 	mov.w	r6, #0
 80068fa:	bf08      	it	eq
 80068fc:	68e5      	ldreq	r5, [r4, #12]
 80068fe:	f104 041a 	add.w	r4, r4, #26
 8006902:	bf08      	it	eq
 8006904:	1aed      	subeq	r5, r5, r3
 8006906:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800690a:	bf08      	it	eq
 800690c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006910:	4293      	cmp	r3, r2
 8006912:	bfc4      	itt	gt
 8006914:	1a9b      	subgt	r3, r3, r2
 8006916:	18ed      	addgt	r5, r5, r3
 8006918:	42b5      	cmp	r5, r6
 800691a:	d11a      	bne.n	8006952 <_printf_common+0xd2>
 800691c:	2000      	movs	r0, #0
 800691e:	e008      	b.n	8006932 <_printf_common+0xb2>
 8006920:	2301      	movs	r3, #1
 8006922:	4652      	mov	r2, sl
 8006924:	4641      	mov	r1, r8
 8006926:	4638      	mov	r0, r7
 8006928:	47c8      	blx	r9
 800692a:	3001      	adds	r0, #1
 800692c:	d103      	bne.n	8006936 <_printf_common+0xb6>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	3501      	adds	r5, #1
 8006938:	e7c1      	b.n	80068be <_printf_common+0x3e>
 800693a:	2030      	movs	r0, #48	@ 0x30
 800693c:	18e1      	adds	r1, r4, r3
 800693e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006948:	4422      	add	r2, r4
 800694a:	3302      	adds	r3, #2
 800694c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006950:	e7c2      	b.n	80068d8 <_printf_common+0x58>
 8006952:	2301      	movs	r3, #1
 8006954:	4622      	mov	r2, r4
 8006956:	4641      	mov	r1, r8
 8006958:	4638      	mov	r0, r7
 800695a:	47c8      	blx	r9
 800695c:	3001      	adds	r0, #1
 800695e:	d0e6      	beq.n	800692e <_printf_common+0xae>
 8006960:	3601      	adds	r6, #1
 8006962:	e7d9      	b.n	8006918 <_printf_common+0x98>

08006964 <_printf_i>:
 8006964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	7e0f      	ldrb	r7, [r1, #24]
 800696a:	4691      	mov	r9, r2
 800696c:	2f78      	cmp	r7, #120	@ 0x78
 800696e:	4680      	mov	r8, r0
 8006970:	460c      	mov	r4, r1
 8006972:	469a      	mov	sl, r3
 8006974:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800697a:	d807      	bhi.n	800698c <_printf_i+0x28>
 800697c:	2f62      	cmp	r7, #98	@ 0x62
 800697e:	d80a      	bhi.n	8006996 <_printf_i+0x32>
 8006980:	2f00      	cmp	r7, #0
 8006982:	f000 80d1 	beq.w	8006b28 <_printf_i+0x1c4>
 8006986:	2f58      	cmp	r7, #88	@ 0x58
 8006988:	f000 80b8 	beq.w	8006afc <_printf_i+0x198>
 800698c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006994:	e03a      	b.n	8006a0c <_printf_i+0xa8>
 8006996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800699a:	2b15      	cmp	r3, #21
 800699c:	d8f6      	bhi.n	800698c <_printf_i+0x28>
 800699e:	a101      	add	r1, pc, #4	@ (adr r1, 80069a4 <_printf_i+0x40>)
 80069a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	0800698d 	.word	0x0800698d
 80069b0:	0800698d 	.word	0x0800698d
 80069b4:	0800698d 	.word	0x0800698d
 80069b8:	0800698d 	.word	0x0800698d
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	0800698d 	.word	0x0800698d
 80069c4:	0800698d 	.word	0x0800698d
 80069c8:	0800698d 	.word	0x0800698d
 80069cc:	0800698d 	.word	0x0800698d
 80069d0:	08006b0f 	.word	0x08006b0f
 80069d4:	08006a3b 	.word	0x08006a3b
 80069d8:	08006ac9 	.word	0x08006ac9
 80069dc:	0800698d 	.word	0x0800698d
 80069e0:	0800698d 	.word	0x0800698d
 80069e4:	08006b31 	.word	0x08006b31
 80069e8:	0800698d 	.word	0x0800698d
 80069ec:	08006a3b 	.word	0x08006a3b
 80069f0:	0800698d 	.word	0x0800698d
 80069f4:	0800698d 	.word	0x0800698d
 80069f8:	08006ad1 	.word	0x08006ad1
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6032      	str	r2, [r6, #0]
 8006a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e09c      	b.n	8006b4a <_printf_i+0x1e6>
 8006a10:	6833      	ldr	r3, [r6, #0]
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	1d19      	adds	r1, r3, #4
 8006a16:	6031      	str	r1, [r6, #0]
 8006a18:	0606      	lsls	r6, r0, #24
 8006a1a:	d501      	bpl.n	8006a20 <_printf_i+0xbc>
 8006a1c:	681d      	ldr	r5, [r3, #0]
 8006a1e:	e003      	b.n	8006a28 <_printf_i+0xc4>
 8006a20:	0645      	lsls	r5, r0, #25
 8006a22:	d5fb      	bpl.n	8006a1c <_printf_i+0xb8>
 8006a24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	da03      	bge.n	8006a34 <_printf_i+0xd0>
 8006a2c:	232d      	movs	r3, #45	@ 0x2d
 8006a2e:	426d      	negs	r5, r5
 8006a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a34:	230a      	movs	r3, #10
 8006a36:	4858      	ldr	r0, [pc, #352]	@ (8006b98 <_printf_i+0x234>)
 8006a38:	e011      	b.n	8006a5e <_printf_i+0xfa>
 8006a3a:	6821      	ldr	r1, [r4, #0]
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	0608      	lsls	r0, r1, #24
 8006a40:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a44:	d402      	bmi.n	8006a4c <_printf_i+0xe8>
 8006a46:	0649      	lsls	r1, r1, #25
 8006a48:	bf48      	it	mi
 8006a4a:	b2ad      	uxthmi	r5, r5
 8006a4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a4e:	6033      	str	r3, [r6, #0]
 8006a50:	bf14      	ite	ne
 8006a52:	230a      	movne	r3, #10
 8006a54:	2308      	moveq	r3, #8
 8006a56:	4850      	ldr	r0, [pc, #320]	@ (8006b98 <_printf_i+0x234>)
 8006a58:	2100      	movs	r1, #0
 8006a5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a5e:	6866      	ldr	r6, [r4, #4]
 8006a60:	2e00      	cmp	r6, #0
 8006a62:	60a6      	str	r6, [r4, #8]
 8006a64:	db05      	blt.n	8006a72 <_printf_i+0x10e>
 8006a66:	6821      	ldr	r1, [r4, #0]
 8006a68:	432e      	orrs	r6, r5
 8006a6a:	f021 0104 	bic.w	r1, r1, #4
 8006a6e:	6021      	str	r1, [r4, #0]
 8006a70:	d04b      	beq.n	8006b0a <_printf_i+0x1a6>
 8006a72:	4616      	mov	r6, r2
 8006a74:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a78:	fb03 5711 	mls	r7, r3, r1, r5
 8006a7c:	5dc7      	ldrb	r7, [r0, r7]
 8006a7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a82:	462f      	mov	r7, r5
 8006a84:	42bb      	cmp	r3, r7
 8006a86:	460d      	mov	r5, r1
 8006a88:	d9f4      	bls.n	8006a74 <_printf_i+0x110>
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d10b      	bne.n	8006aa6 <_printf_i+0x142>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	07df      	lsls	r7, r3, #31
 8006a92:	d508      	bpl.n	8006aa6 <_printf_i+0x142>
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	6861      	ldr	r1, [r4, #4]
 8006a98:	4299      	cmp	r1, r3
 8006a9a:	bfde      	ittt	le
 8006a9c:	2330      	movle	r3, #48	@ 0x30
 8006a9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aa2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006aa6:	1b92      	subs	r2, r2, r6
 8006aa8:	6122      	str	r2, [r4, #16]
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f8cd a000 	str.w	sl, [sp]
 8006ab4:	aa03      	add	r2, sp, #12
 8006ab6:	f7ff fee3 	bl	8006880 <_printf_common>
 8006aba:	3001      	adds	r0, #1
 8006abc:	d14a      	bne.n	8006b54 <_printf_i+0x1f0>
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ac2:	b004      	add	sp, #16
 8006ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	f043 0320 	orr.w	r3, r3, #32
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	2778      	movs	r7, #120	@ 0x78
 8006ad2:	4832      	ldr	r0, [pc, #200]	@ (8006b9c <_printf_i+0x238>)
 8006ad4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	6831      	ldr	r1, [r6, #0]
 8006adc:	061f      	lsls	r7, r3, #24
 8006ade:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ae2:	d402      	bmi.n	8006aea <_printf_i+0x186>
 8006ae4:	065f      	lsls	r7, r3, #25
 8006ae6:	bf48      	it	mi
 8006ae8:	b2ad      	uxthmi	r5, r5
 8006aea:	6031      	str	r1, [r6, #0]
 8006aec:	07d9      	lsls	r1, r3, #31
 8006aee:	bf44      	itt	mi
 8006af0:	f043 0320 	orrmi.w	r3, r3, #32
 8006af4:	6023      	strmi	r3, [r4, #0]
 8006af6:	b11d      	cbz	r5, 8006b00 <_printf_i+0x19c>
 8006af8:	2310      	movs	r3, #16
 8006afa:	e7ad      	b.n	8006a58 <_printf_i+0xf4>
 8006afc:	4826      	ldr	r0, [pc, #152]	@ (8006b98 <_printf_i+0x234>)
 8006afe:	e7e9      	b.n	8006ad4 <_printf_i+0x170>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	f023 0320 	bic.w	r3, r3, #32
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	e7f6      	b.n	8006af8 <_printf_i+0x194>
 8006b0a:	4616      	mov	r6, r2
 8006b0c:	e7bd      	b.n	8006a8a <_printf_i+0x126>
 8006b0e:	6833      	ldr	r3, [r6, #0]
 8006b10:	6825      	ldr	r5, [r4, #0]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6961      	ldr	r1, [r4, #20]
 8006b16:	6030      	str	r0, [r6, #0]
 8006b18:	062e      	lsls	r6, r5, #24
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	d501      	bpl.n	8006b22 <_printf_i+0x1be>
 8006b1e:	6019      	str	r1, [r3, #0]
 8006b20:	e002      	b.n	8006b28 <_printf_i+0x1c4>
 8006b22:	0668      	lsls	r0, r5, #25
 8006b24:	d5fb      	bpl.n	8006b1e <_printf_i+0x1ba>
 8006b26:	8019      	strh	r1, [r3, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4616      	mov	r6, r2
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	e7bc      	b.n	8006aaa <_printf_i+0x146>
 8006b30:	6833      	ldr	r3, [r6, #0]
 8006b32:	2100      	movs	r1, #0
 8006b34:	1d1a      	adds	r2, r3, #4
 8006b36:	6032      	str	r2, [r6, #0]
 8006b38:	681e      	ldr	r6, [r3, #0]
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f000 f9fb 	bl	8006f38 <memchr>
 8006b42:	b108      	cbz	r0, 8006b48 <_printf_i+0x1e4>
 8006b44:	1b80      	subs	r0, r0, r6
 8006b46:	6060      	str	r0, [r4, #4]
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b52:	e7aa      	b.n	8006aaa <_printf_i+0x146>
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	47d0      	blx	sl
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0ad      	beq.n	8006abe <_printf_i+0x15a>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	079b      	lsls	r3, r3, #30
 8006b66:	d413      	bmi.n	8006b90 <_printf_i+0x22c>
 8006b68:	68e0      	ldr	r0, [r4, #12]
 8006b6a:	9b03      	ldr	r3, [sp, #12]
 8006b6c:	4298      	cmp	r0, r3
 8006b6e:	bfb8      	it	lt
 8006b70:	4618      	movlt	r0, r3
 8006b72:	e7a6      	b.n	8006ac2 <_printf_i+0x15e>
 8006b74:	2301      	movs	r3, #1
 8006b76:	4632      	mov	r2, r6
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	47d0      	blx	sl
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d09d      	beq.n	8006abe <_printf_i+0x15a>
 8006b82:	3501      	adds	r5, #1
 8006b84:	68e3      	ldr	r3, [r4, #12]
 8006b86:	9903      	ldr	r1, [sp, #12]
 8006b88:	1a5b      	subs	r3, r3, r1
 8006b8a:	42ab      	cmp	r3, r5
 8006b8c:	dcf2      	bgt.n	8006b74 <_printf_i+0x210>
 8006b8e:	e7eb      	b.n	8006b68 <_printf_i+0x204>
 8006b90:	2500      	movs	r5, #0
 8006b92:	f104 0619 	add.w	r6, r4, #25
 8006b96:	e7f5      	b.n	8006b84 <_printf_i+0x220>
 8006b98:	08008e18 	.word	0x08008e18
 8006b9c:	08008e29 	.word	0x08008e29

08006ba0 <__malloc_lock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	@ (8006ba8 <__malloc_lock+0x8>)
 8006ba2:	f000 b9c2 	b.w	8006f2a <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	200004d8 	.word	0x200004d8

08006bac <__malloc_unlock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__malloc_unlock+0x8>)
 8006bae:	f000 b9bd 	b.w	8006f2c <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	200004d8 	.word	0x200004d8

08006bb8 <std>:
 8006bb8:	2300      	movs	r3, #0
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bc6:	6083      	str	r3, [r0, #8]
 8006bc8:	8181      	strh	r1, [r0, #12]
 8006bca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bcc:	81c2      	strh	r2, [r0, #14]
 8006bce:	6183      	str	r3, [r0, #24]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	305c      	adds	r0, #92	@ 0x5c
 8006bd6:	f000 f921 	bl	8006e1c <memset>
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <std+0x58>)
 8006bdc:	6224      	str	r4, [r4, #32]
 8006bde:	6263      	str	r3, [r4, #36]	@ 0x24
 8006be0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <std+0x5c>)
 8006be2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006be4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <std+0x60>)
 8006be6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006be8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <std+0x64>)
 8006bea:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bec:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <std+0x68>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d006      	beq.n	8006c00 <std+0x48>
 8006bf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bf6:	4294      	cmp	r4, r2
 8006bf8:	d002      	beq.n	8006c00 <std+0x48>
 8006bfa:	33d0      	adds	r3, #208	@ 0xd0
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	d105      	bne.n	8006c0c <std+0x54>
 8006c00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	f000 b98e 	b.w	8006f28 <__retarget_lock_init_recursive>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	bf00      	nop
 8006c10:	08008765 	.word	0x08008765
 8006c14:	08008787 	.word	0x08008787
 8006c18:	080087bf 	.word	0x080087bf
 8006c1c:	080087e3 	.word	0x080087e3
 8006c20:	2000039c 	.word	0x2000039c

08006c24 <stdio_exit_handler>:
 8006c24:	4a02      	ldr	r2, [pc, #8]	@ (8006c30 <stdio_exit_handler+0xc>)
 8006c26:	4903      	ldr	r1, [pc, #12]	@ (8006c34 <stdio_exit_handler+0x10>)
 8006c28:	4803      	ldr	r0, [pc, #12]	@ (8006c38 <stdio_exit_handler+0x14>)
 8006c2a:	f000 b869 	b.w	8006d00 <_fwalk_sglue>
 8006c2e:	bf00      	nop
 8006c30:	20000044 	.word	0x20000044
 8006c34:	08008021 	.word	0x08008021
 8006c38:	20000054 	.word	0x20000054

08006c3c <cleanup_stdio>:
 8006c3c:	6841      	ldr	r1, [r0, #4]
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <cleanup_stdio+0x34>)
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4299      	cmp	r1, r3
 8006c44:	4604      	mov	r4, r0
 8006c46:	d001      	beq.n	8006c4c <cleanup_stdio+0x10>
 8006c48:	f001 f9ea 	bl	8008020 <_fflush_r>
 8006c4c:	68a1      	ldr	r1, [r4, #8]
 8006c4e:	4b09      	ldr	r3, [pc, #36]	@ (8006c74 <cleanup_stdio+0x38>)
 8006c50:	4299      	cmp	r1, r3
 8006c52:	d002      	beq.n	8006c5a <cleanup_stdio+0x1e>
 8006c54:	4620      	mov	r0, r4
 8006c56:	f001 f9e3 	bl	8008020 <_fflush_r>
 8006c5a:	68e1      	ldr	r1, [r4, #12]
 8006c5c:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <cleanup_stdio+0x3c>)
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	d004      	beq.n	8006c6c <cleanup_stdio+0x30>
 8006c62:	4620      	mov	r0, r4
 8006c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c68:	f001 b9da 	b.w	8008020 <_fflush_r>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	2000039c 	.word	0x2000039c
 8006c74:	20000404 	.word	0x20000404
 8006c78:	2000046c 	.word	0x2000046c

08006c7c <global_stdio_init.part.0>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cac <global_stdio_init.part.0+0x30>)
 8006c80:	4c0b      	ldr	r4, [pc, #44]	@ (8006cb0 <global_stdio_init.part.0+0x34>)
 8006c82:	4a0c      	ldr	r2, [pc, #48]	@ (8006cb4 <global_stdio_init.part.0+0x38>)
 8006c84:	4620      	mov	r0, r4
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	2104      	movs	r1, #4
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f7ff ff94 	bl	8006bb8 <std>
 8006c90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c94:	2201      	movs	r2, #1
 8006c96:	2109      	movs	r1, #9
 8006c98:	f7ff ff8e 	bl	8006bb8 <std>
 8006c9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca6:	2112      	movs	r1, #18
 8006ca8:	f7ff bf86 	b.w	8006bb8 <std>
 8006cac:	200004d4 	.word	0x200004d4
 8006cb0:	2000039c 	.word	0x2000039c
 8006cb4:	08006c25 	.word	0x08006c25

08006cb8 <__sfp_lock_acquire>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	@ (8006cc0 <__sfp_lock_acquire+0x8>)
 8006cba:	f000 b936 	b.w	8006f2a <__retarget_lock_acquire_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	200004d9 	.word	0x200004d9

08006cc4 <__sfp_lock_release>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	@ (8006ccc <__sfp_lock_release+0x8>)
 8006cc6:	f000 b931 	b.w	8006f2c <__retarget_lock_release_recursive>
 8006cca:	bf00      	nop
 8006ccc:	200004d9 	.word	0x200004d9

08006cd0 <__sinit>:
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	f7ff fff0 	bl	8006cb8 <__sfp_lock_acquire>
 8006cd8:	6a23      	ldr	r3, [r4, #32]
 8006cda:	b11b      	cbz	r3, 8006ce4 <__sinit+0x14>
 8006cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce0:	f7ff bff0 	b.w	8006cc4 <__sfp_lock_release>
 8006ce4:	4b04      	ldr	r3, [pc, #16]	@ (8006cf8 <__sinit+0x28>)
 8006ce6:	6223      	str	r3, [r4, #32]
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <__sinit+0x2c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f5      	bne.n	8006cdc <__sinit+0xc>
 8006cf0:	f7ff ffc4 	bl	8006c7c <global_stdio_init.part.0>
 8006cf4:	e7f2      	b.n	8006cdc <__sinit+0xc>
 8006cf6:	bf00      	nop
 8006cf8:	08006c3d 	.word	0x08006c3d
 8006cfc:	200004d4 	.word	0x200004d4

08006d00 <_fwalk_sglue>:
 8006d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4607      	mov	r7, r0
 8006d06:	4688      	mov	r8, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d10:	f1b9 0901 	subs.w	r9, r9, #1
 8006d14:	d505      	bpl.n	8006d22 <_fwalk_sglue+0x22>
 8006d16:	6824      	ldr	r4, [r4, #0]
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	d1f7      	bne.n	8006d0c <_fwalk_sglue+0xc>
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d907      	bls.n	8006d38 <_fwalk_sglue+0x38>
 8006d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	d003      	beq.n	8006d38 <_fwalk_sglue+0x38>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c0      	blx	r8
 8006d36:	4306      	orrs	r6, r0
 8006d38:	3568      	adds	r5, #104	@ 0x68
 8006d3a:	e7e9      	b.n	8006d10 <_fwalk_sglue+0x10>

08006d3c <iprintf>:
 8006d3c:	b40f      	push	{r0, r1, r2, r3}
 8006d3e:	b507      	push	{r0, r1, r2, lr}
 8006d40:	4906      	ldr	r1, [pc, #24]	@ (8006d5c <iprintf+0x20>)
 8006d42:	ab04      	add	r3, sp, #16
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4a:	6881      	ldr	r1, [r0, #8]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	f000 ffcf 	bl	8007cf0 <_vfiprintf_r>
 8006d52:	b003      	add	sp, #12
 8006d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d58:	b004      	add	sp, #16
 8006d5a:	4770      	bx	lr
 8006d5c:	20000050 	.word	0x20000050

08006d60 <_puts_r>:
 8006d60:	6a03      	ldr	r3, [r0, #32]
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	4605      	mov	r5, r0
 8006d66:	460e      	mov	r6, r1
 8006d68:	6884      	ldr	r4, [r0, #8]
 8006d6a:	b90b      	cbnz	r3, 8006d70 <_puts_r+0x10>
 8006d6c:	f7ff ffb0 	bl	8006cd0 <__sinit>
 8006d70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d72:	07db      	lsls	r3, r3, #31
 8006d74:	d405      	bmi.n	8006d82 <_puts_r+0x22>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	0598      	lsls	r0, r3, #22
 8006d7a:	d402      	bmi.n	8006d82 <_puts_r+0x22>
 8006d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d7e:	f000 f8d4 	bl	8006f2a <__retarget_lock_acquire_recursive>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	0719      	lsls	r1, r3, #28
 8006d86:	d502      	bpl.n	8006d8e <_puts_r+0x2e>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d135      	bne.n	8006dfa <_puts_r+0x9a>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f001 fd69 	bl	8008868 <__swsetup_r>
 8006d96:	b380      	cbz	r0, 8006dfa <_puts_r+0x9a>
 8006d98:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006d9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d9e:	07da      	lsls	r2, r3, #31
 8006da0:	d405      	bmi.n	8006dae <_puts_r+0x4e>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	059b      	lsls	r3, r3, #22
 8006da6:	d402      	bmi.n	8006dae <_puts_r+0x4e>
 8006da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006daa:	f000 f8bf 	bl	8006f2c <__retarget_lock_release_recursive>
 8006dae:	4628      	mov	r0, r5
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	da04      	bge.n	8006dc0 <_puts_r+0x60>
 8006db6:	69a2      	ldr	r2, [r4, #24]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	dc17      	bgt.n	8006dec <_puts_r+0x8c>
 8006dbc:	290a      	cmp	r1, #10
 8006dbe:	d015      	beq.n	8006dec <_puts_r+0x8c>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	6022      	str	r2, [r4, #0]
 8006dc6:	7019      	strb	r1, [r3, #0]
 8006dc8:	68a3      	ldr	r3, [r4, #8]
 8006dca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	60a3      	str	r3, [r4, #8]
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	d1ed      	bne.n	8006db2 <_puts_r+0x52>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da11      	bge.n	8006dfe <_puts_r+0x9e>
 8006dda:	4622      	mov	r2, r4
 8006ddc:	210a      	movs	r1, #10
 8006dde:	4628      	mov	r0, r5
 8006de0:	f001 fd03 	bl	80087ea <__swbuf_r>
 8006de4:	3001      	adds	r0, #1
 8006de6:	d0d7      	beq.n	8006d98 <_puts_r+0x38>
 8006de8:	250a      	movs	r5, #10
 8006dea:	e7d7      	b.n	8006d9c <_puts_r+0x3c>
 8006dec:	4622      	mov	r2, r4
 8006dee:	4628      	mov	r0, r5
 8006df0:	f001 fcfb 	bl	80087ea <__swbuf_r>
 8006df4:	3001      	adds	r0, #1
 8006df6:	d1e7      	bne.n	8006dc8 <_puts_r+0x68>
 8006df8:	e7ce      	b.n	8006d98 <_puts_r+0x38>
 8006dfa:	3e01      	subs	r6, #1
 8006dfc:	e7e4      	b.n	8006dc8 <_puts_r+0x68>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	220a      	movs	r2, #10
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e7ee      	b.n	8006de8 <_puts_r+0x88>
	...

08006e0c <puts>:
 8006e0c:	4b02      	ldr	r3, [pc, #8]	@ (8006e18 <puts+0xc>)
 8006e0e:	4601      	mov	r1, r0
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f7ff bfa5 	b.w	8006d60 <_puts_r>
 8006e16:	bf00      	nop
 8006e18:	20000050 	.word	0x20000050

08006e1c <memset>:
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4402      	add	r2, r0
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d100      	bne.n	8006e26 <memset+0xa>
 8006e24:	4770      	bx	lr
 8006e26:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2a:	e7f9      	b.n	8006e20 <memset+0x4>

08006e2c <_raise_r>:
 8006e2c:	291f      	cmp	r1, #31
 8006e2e:	b538      	push	{r3, r4, r5, lr}
 8006e30:	4605      	mov	r5, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	d904      	bls.n	8006e40 <_raise_r+0x14>
 8006e36:	2316      	movs	r3, #22
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e42:	b112      	cbz	r2, 8006e4a <_raise_r+0x1e>
 8006e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e48:	b94b      	cbnz	r3, 8006e5e <_raise_r+0x32>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 f830 	bl	8006eb0 <_getpid_r>
 8006e50:	4622      	mov	r2, r4
 8006e52:	4601      	mov	r1, r0
 8006e54:	4628      	mov	r0, r5
 8006e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e5a:	f000 b817 	b.w	8006e8c <_kill_r>
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d00a      	beq.n	8006e78 <_raise_r+0x4c>
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	d103      	bne.n	8006e6e <_raise_r+0x42>
 8006e66:	2316      	movs	r3, #22
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	e7e7      	b.n	8006e3e <_raise_r+0x12>
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4620      	mov	r0, r4
 8006e72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e76:	4798      	blx	r3
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e7e0      	b.n	8006e3e <_raise_r+0x12>

08006e7c <raise>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	@ (8006e88 <raise+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f7ff bfd3 	b.w	8006e2c <_raise_r>
 8006e86:	bf00      	nop
 8006e88:	20000050 	.word	0x20000050

08006e8c <_kill_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4d06      	ldr	r5, [pc, #24]	@ (8006eac <_kill_r+0x20>)
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	602b      	str	r3, [r5, #0]
 8006e9a:	f7fc fdbe 	bl	8003a1a <_kill>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d102      	bne.n	8006ea8 <_kill_r+0x1c>
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	b103      	cbz	r3, 8006ea8 <_kill_r+0x1c>
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	bd38      	pop	{r3, r4, r5, pc}
 8006eaa:	bf00      	nop
 8006eac:	200004dc 	.word	0x200004dc

08006eb0 <_getpid_r>:
 8006eb0:	f7fc bdac 	b.w	8003a0c <_getpid>

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4d05      	ldr	r5, [pc, #20]	@ (8006ed0 <_sbrk_r+0x1c>)
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fc fe30 	bl	8003b24 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	200004dc 	.word	0x200004dc

08006ed4 <__errno>:
 8006ed4:	4b01      	ldr	r3, [pc, #4]	@ (8006edc <__errno+0x8>)
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000050 	.word	0x20000050

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	4d0c      	ldr	r5, [pc, #48]	@ (8006f18 <__libc_init_array+0x38>)
 8006ee6:	4c0d      	ldr	r4, [pc, #52]	@ (8006f1c <__libc_init_array+0x3c>)
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	42a6      	cmp	r6, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	f001 fe4c 	bl	8008b8c <_init>
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4d0a      	ldr	r5, [pc, #40]	@ (8006f20 <__libc_init_array+0x40>)
 8006ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8006f24 <__libc_init_array+0x44>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	42a6      	cmp	r6, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f08:	4798      	blx	r3
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f12:	4798      	blx	r3
 8006f14:	3601      	adds	r6, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	08009184 	.word	0x08009184
 8006f1c:	08009184 	.word	0x08009184
 8006f20:	08009184 	.word	0x08009184
 8006f24:	08009188 	.word	0x08009188

08006f28 <__retarget_lock_init_recursive>:
 8006f28:	4770      	bx	lr

08006f2a <__retarget_lock_acquire_recursive>:
 8006f2a:	4770      	bx	lr

08006f2c <__retarget_lock_release_recursive>:
 8006f2c:	4770      	bx	lr
	...

08006f30 <_localeconv_r>:
 8006f30:	4800      	ldr	r0, [pc, #0]	@ (8006f34 <_localeconv_r+0x4>)
 8006f32:	4770      	bx	lr
 8006f34:	20000190 	.word	0x20000190

08006f38 <memchr>:
 8006f38:	4603      	mov	r3, r0
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	b2c9      	uxtb	r1, r1
 8006f3e:	4402      	add	r2, r0
 8006f40:	4293      	cmp	r3, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	d101      	bne.n	8006f4a <memchr+0x12>
 8006f46:	2000      	movs	r0, #0
 8006f48:	e003      	b.n	8006f52 <memchr+0x1a>
 8006f4a:	7804      	ldrb	r4, [r0, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	428c      	cmp	r4, r1
 8006f50:	d1f6      	bne.n	8006f40 <memchr+0x8>
 8006f52:	bd10      	pop	{r4, pc}

08006f54 <quorem>:
 8006f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	6903      	ldr	r3, [r0, #16]
 8006f5a:	690c      	ldr	r4, [r1, #16]
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	42a3      	cmp	r3, r4
 8006f60:	db7e      	blt.n	8007060 <quorem+0x10c>
 8006f62:	3c01      	subs	r4, #1
 8006f64:	00a3      	lsls	r3, r4, #2
 8006f66:	f100 0514 	add.w	r5, r0, #20
 8006f6a:	f101 0814 	add.w	r8, r1, #20
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	429a      	cmp	r2, r3
 8006f82:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f8a:	d32e      	bcc.n	8006fea <quorem+0x96>
 8006f8c:	f04f 0a00 	mov.w	sl, #0
 8006f90:	46c4      	mov	ip, r8
 8006f92:	46ae      	mov	lr, r5
 8006f94:	46d3      	mov	fp, sl
 8006f96:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f9a:	b298      	uxth	r0, r3
 8006f9c:	fb06 a000 	mla	r0, r6, r0, sl
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	0c02      	lsrs	r2, r0, #16
 8006fa4:	fb06 2303 	mla	r3, r6, r3, r2
 8006fa8:	f8de 2000 	ldr.w	r2, [lr]
 8006fac:	b280      	uxth	r0, r0
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	1a12      	subs	r2, r2, r0
 8006fb2:	445a      	add	r2, fp
 8006fb4:	f8de 0000 	ldr.w	r0, [lr]
 8006fb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fcc:	45e1      	cmp	r9, ip
 8006fce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006fd2:	f84e 2b04 	str.w	r2, [lr], #4
 8006fd6:	d2de      	bcs.n	8006f96 <quorem+0x42>
 8006fd8:	9b00      	ldr	r3, [sp, #0]
 8006fda:	58eb      	ldr	r3, [r5, r3]
 8006fdc:	b92b      	cbnz	r3, 8006fea <quorem+0x96>
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	d32f      	bcc.n	8007048 <quorem+0xf4>
 8006fe8:	613c      	str	r4, [r7, #16]
 8006fea:	4638      	mov	r0, r7
 8006fec:	f001 fab2 	bl	8008554 <__mcmp>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	db25      	blt.n	8007040 <quorem+0xec>
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ffc:	f8d1 c000 	ldr.w	ip, [r1]
 8007000:	fa1f fe82 	uxth.w	lr, r2
 8007004:	fa1f f38c 	uxth.w	r3, ip
 8007008:	eba3 030e 	sub.w	r3, r3, lr
 800700c:	4403      	add	r3, r0
 800700e:	0c12      	lsrs	r2, r2, #16
 8007010:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007014:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800701e:	45c1      	cmp	r9, r8
 8007020:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007024:	f841 3b04 	str.w	r3, [r1], #4
 8007028:	d2e6      	bcs.n	8006ff8 <quorem+0xa4>
 800702a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800702e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007032:	b922      	cbnz	r2, 800703e <quorem+0xea>
 8007034:	3b04      	subs	r3, #4
 8007036:	429d      	cmp	r5, r3
 8007038:	461a      	mov	r2, r3
 800703a:	d30b      	bcc.n	8007054 <quorem+0x100>
 800703c:	613c      	str	r4, [r7, #16]
 800703e:	3601      	adds	r6, #1
 8007040:	4630      	mov	r0, r6
 8007042:	b003      	add	sp, #12
 8007044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	3b04      	subs	r3, #4
 800704c:	2a00      	cmp	r2, #0
 800704e:	d1cb      	bne.n	8006fe8 <quorem+0x94>
 8007050:	3c01      	subs	r4, #1
 8007052:	e7c6      	b.n	8006fe2 <quorem+0x8e>
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	3b04      	subs	r3, #4
 8007058:	2a00      	cmp	r2, #0
 800705a:	d1ef      	bne.n	800703c <quorem+0xe8>
 800705c:	3c01      	subs	r4, #1
 800705e:	e7ea      	b.n	8007036 <quorem+0xe2>
 8007060:	2000      	movs	r0, #0
 8007062:	e7ee      	b.n	8007042 <quorem+0xee>
 8007064:	0000      	movs	r0, r0
	...

08007068 <_dtoa_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	69c7      	ldr	r7, [r0, #28]
 8007072:	b097      	sub	sp, #92	@ 0x5c
 8007074:	4681      	mov	r9, r0
 8007076:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800707a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800707c:	b97f      	cbnz	r7, 800709e <_dtoa_r+0x36>
 800707e:	2010      	movs	r0, #16
 8007080:	f7ff fb4c 	bl	800671c <malloc>
 8007084:	4602      	mov	r2, r0
 8007086:	f8c9 001c 	str.w	r0, [r9, #28]
 800708a:	b920      	cbnz	r0, 8007096 <_dtoa_r+0x2e>
 800708c:	21ef      	movs	r1, #239	@ 0xef
 800708e:	4bac      	ldr	r3, [pc, #688]	@ (8007340 <_dtoa_r+0x2d8>)
 8007090:	48ac      	ldr	r0, [pc, #688]	@ (8007344 <_dtoa_r+0x2dc>)
 8007092:	f001 fd17 	bl	8008ac4 <__assert_func>
 8007096:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800709a:	6007      	str	r7, [r0, #0]
 800709c:	60c7      	str	r7, [r0, #12]
 800709e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	b159      	cbz	r1, 80070be <_dtoa_r+0x56>
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	2301      	movs	r3, #1
 80070aa:	4093      	lsls	r3, r2
 80070ac:	604a      	str	r2, [r1, #4]
 80070ae:	608b      	str	r3, [r1, #8]
 80070b0:	4648      	mov	r0, r9
 80070b2:	f001 f81d 	bl	80080f0 <_Bfree>
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	1e2b      	subs	r3, r5, #0
 80070c0:	bfaf      	iteee	ge
 80070c2:	2300      	movge	r3, #0
 80070c4:	2201      	movlt	r2, #1
 80070c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070ca:	9307      	strlt	r3, [sp, #28]
 80070cc:	bfa8      	it	ge
 80070ce:	6033      	strge	r3, [r6, #0]
 80070d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80070d4:	4b9c      	ldr	r3, [pc, #624]	@ (8007348 <_dtoa_r+0x2e0>)
 80070d6:	bfb8      	it	lt
 80070d8:	6032      	strlt	r2, [r6, #0]
 80070da:	ea33 0308 	bics.w	r3, r3, r8
 80070de:	d112      	bne.n	8007106 <_dtoa_r+0x9e>
 80070e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80070ec:	4323      	orrs	r3, r4
 80070ee:	f000 855e 	beq.w	8007bae <_dtoa_r+0xb46>
 80070f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800734c <_dtoa_r+0x2e4>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8560 	beq.w	8007bbe <_dtoa_r+0xb56>
 80070fe:	f10a 0303 	add.w	r3, sl, #3
 8007102:	f000 bd5a 	b.w	8007bba <_dtoa_r+0xb52>
 8007106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800710a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800710e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	f7f9 fc47 	bl	80009a8 <__aeabi_dcmpeq>
 800711a:	4607      	mov	r7, r0
 800711c:	b158      	cbz	r0, 8007136 <_dtoa_r+0xce>
 800711e:	2301      	movs	r3, #1
 8007120:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007126:	b113      	cbz	r3, 800712e <_dtoa_r+0xc6>
 8007128:	4b89      	ldr	r3, [pc, #548]	@ (8007350 <_dtoa_r+0x2e8>)
 800712a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007354 <_dtoa_r+0x2ec>
 8007132:	f000 bd44 	b.w	8007bbe <_dtoa_r+0xb56>
 8007136:	ab14      	add	r3, sp, #80	@ 0x50
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	ab15      	add	r3, sp, #84	@ 0x54
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	4648      	mov	r0, r9
 8007140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007144:	f001 fab6 	bl	80086b4 <__d2b>
 8007148:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800714c:	9003      	str	r0, [sp, #12]
 800714e:	2e00      	cmp	r6, #0
 8007150:	d078      	beq.n	8007244 <_dtoa_r+0x1dc>
 8007152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007158:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800715c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007160:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007164:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007168:	9712      	str	r7, [sp, #72]	@ 0x48
 800716a:	4619      	mov	r1, r3
 800716c:	2200      	movs	r2, #0
 800716e:	4b7a      	ldr	r3, [pc, #488]	@ (8007358 <_dtoa_r+0x2f0>)
 8007170:	f7f8 fffa 	bl	8000168 <__aeabi_dsub>
 8007174:	a36c      	add	r3, pc, #432	@ (adr r3, 8007328 <_dtoa_r+0x2c0>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f9 f9ad 	bl	80004d8 <__aeabi_dmul>
 800717e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007330 <_dtoa_r+0x2c8>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f8 fff2 	bl	800016c <__adddf3>
 8007188:	4604      	mov	r4, r0
 800718a:	4630      	mov	r0, r6
 800718c:	460d      	mov	r5, r1
 800718e:	f7f9 f939 	bl	8000404 <__aeabi_i2d>
 8007192:	a369      	add	r3, pc, #420	@ (adr r3, 8007338 <_dtoa_r+0x2d0>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f9 f99e 	bl	80004d8 <__aeabi_dmul>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7f8 ffe2 	bl	800016c <__adddf3>
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	f7f9 fc44 	bl	8000a38 <__aeabi_d2iz>
 80071b0:	2200      	movs	r2, #0
 80071b2:	4607      	mov	r7, r0
 80071b4:	2300      	movs	r3, #0
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 fbff 	bl	80009bc <__aeabi_dcmplt>
 80071be:	b140      	cbz	r0, 80071d2 <_dtoa_r+0x16a>
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7f9 f91f 	bl	8000404 <__aeabi_i2d>
 80071c6:	4622      	mov	r2, r4
 80071c8:	462b      	mov	r3, r5
 80071ca:	f7f9 fbed 	bl	80009a8 <__aeabi_dcmpeq>
 80071ce:	b900      	cbnz	r0, 80071d2 <_dtoa_r+0x16a>
 80071d0:	3f01      	subs	r7, #1
 80071d2:	2f16      	cmp	r7, #22
 80071d4:	d854      	bhi.n	8007280 <_dtoa_r+0x218>
 80071d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071da:	4b60      	ldr	r3, [pc, #384]	@ (800735c <_dtoa_r+0x2f4>)
 80071dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f7f9 fbea 	bl	80009bc <__aeabi_dcmplt>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d04b      	beq.n	8007284 <_dtoa_r+0x21c>
 80071ec:	2300      	movs	r3, #0
 80071ee:	3f01      	subs	r7, #1
 80071f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071f4:	1b9b      	subs	r3, r3, r6
 80071f6:	1e5a      	subs	r2, r3, #1
 80071f8:	bf49      	itett	mi
 80071fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80071fe:	2300      	movpl	r3, #0
 8007200:	9304      	strmi	r3, [sp, #16]
 8007202:	2300      	movmi	r3, #0
 8007204:	9209      	str	r2, [sp, #36]	@ 0x24
 8007206:	bf54      	ite	pl
 8007208:	9304      	strpl	r3, [sp, #16]
 800720a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800720c:	2f00      	cmp	r7, #0
 800720e:	db3b      	blt.n	8007288 <_dtoa_r+0x220>
 8007210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007212:	970e      	str	r7, [sp, #56]	@ 0x38
 8007214:	443b      	add	r3, r7
 8007216:	9309      	str	r3, [sp, #36]	@ 0x24
 8007218:	2300      	movs	r3, #0
 800721a:	930a      	str	r3, [sp, #40]	@ 0x28
 800721c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800721e:	2b09      	cmp	r3, #9
 8007220:	d865      	bhi.n	80072ee <_dtoa_r+0x286>
 8007222:	2b05      	cmp	r3, #5
 8007224:	bfc4      	itt	gt
 8007226:	3b04      	subgt	r3, #4
 8007228:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800722a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800722c:	bfc8      	it	gt
 800722e:	2400      	movgt	r4, #0
 8007230:	f1a3 0302 	sub.w	r3, r3, #2
 8007234:	bfd8      	it	le
 8007236:	2401      	movle	r4, #1
 8007238:	2b03      	cmp	r3, #3
 800723a:	d864      	bhi.n	8007306 <_dtoa_r+0x29e>
 800723c:	e8df f003 	tbb	[pc, r3]
 8007240:	2c385553 	.word	0x2c385553
 8007244:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007248:	441e      	add	r6, r3
 800724a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800724e:	2b20      	cmp	r3, #32
 8007250:	bfc1      	itttt	gt
 8007252:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007256:	fa08 f803 	lslgt.w	r8, r8, r3
 800725a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800725e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007262:	bfd6      	itet	le
 8007264:	f1c3 0320 	rsble	r3, r3, #32
 8007268:	ea48 0003 	orrgt.w	r0, r8, r3
 800726c:	fa04 f003 	lslle.w	r0, r4, r3
 8007270:	f7f9 f8b8 	bl	80003e4 <__aeabi_ui2d>
 8007274:	2201      	movs	r2, #1
 8007276:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800727a:	3e01      	subs	r6, #1
 800727c:	9212      	str	r2, [sp, #72]	@ 0x48
 800727e:	e774      	b.n	800716a <_dtoa_r+0x102>
 8007280:	2301      	movs	r3, #1
 8007282:	e7b5      	b.n	80071f0 <_dtoa_r+0x188>
 8007284:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007286:	e7b4      	b.n	80071f2 <_dtoa_r+0x18a>
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	1bdb      	subs	r3, r3, r7
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	427b      	negs	r3, r7
 8007290:	930a      	str	r3, [sp, #40]	@ 0x28
 8007292:	2300      	movs	r3, #0
 8007294:	930e      	str	r3, [sp, #56]	@ 0x38
 8007296:	e7c1      	b.n	800721c <_dtoa_r+0x1b4>
 8007298:	2301      	movs	r3, #1
 800729a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800729c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800729e:	eb07 0b03 	add.w	fp, r7, r3
 80072a2:	f10b 0301 	add.w	r3, fp, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	9308      	str	r3, [sp, #32]
 80072aa:	bfb8      	it	lt
 80072ac:	2301      	movlt	r3, #1
 80072ae:	e006      	b.n	80072be <_dtoa_r+0x256>
 80072b0:	2301      	movs	r3, #1
 80072b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd28      	ble.n	800730c <_dtoa_r+0x2a4>
 80072ba:	469b      	mov	fp, r3
 80072bc:	9308      	str	r3, [sp, #32]
 80072be:	2100      	movs	r1, #0
 80072c0:	2204      	movs	r2, #4
 80072c2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80072c6:	f102 0514 	add.w	r5, r2, #20
 80072ca:	429d      	cmp	r5, r3
 80072cc:	d926      	bls.n	800731c <_dtoa_r+0x2b4>
 80072ce:	6041      	str	r1, [r0, #4]
 80072d0:	4648      	mov	r0, r9
 80072d2:	f000 fecd 	bl	8008070 <_Balloc>
 80072d6:	4682      	mov	sl, r0
 80072d8:	2800      	cmp	r0, #0
 80072da:	d143      	bne.n	8007364 <_dtoa_r+0x2fc>
 80072dc:	4602      	mov	r2, r0
 80072de:	f240 11af 	movw	r1, #431	@ 0x1af
 80072e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <_dtoa_r+0x2f8>)
 80072e4:	e6d4      	b.n	8007090 <_dtoa_r+0x28>
 80072e6:	2300      	movs	r3, #0
 80072e8:	e7e3      	b.n	80072b2 <_dtoa_r+0x24a>
 80072ea:	2300      	movs	r3, #0
 80072ec:	e7d5      	b.n	800729a <_dtoa_r+0x232>
 80072ee:	2401      	movs	r4, #1
 80072f0:	2300      	movs	r3, #0
 80072f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80072f6:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80072fa:	2200      	movs	r2, #0
 80072fc:	2312      	movs	r3, #18
 80072fe:	f8cd b020 	str.w	fp, [sp, #32]
 8007302:	9221      	str	r2, [sp, #132]	@ 0x84
 8007304:	e7db      	b.n	80072be <_dtoa_r+0x256>
 8007306:	2301      	movs	r3, #1
 8007308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800730a:	e7f4      	b.n	80072f6 <_dtoa_r+0x28e>
 800730c:	f04f 0b01 	mov.w	fp, #1
 8007310:	465b      	mov	r3, fp
 8007312:	f8cd b020 	str.w	fp, [sp, #32]
 8007316:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800731a:	e7d0      	b.n	80072be <_dtoa_r+0x256>
 800731c:	3101      	adds	r1, #1
 800731e:	0052      	lsls	r2, r2, #1
 8007320:	e7d1      	b.n	80072c6 <_dtoa_r+0x25e>
 8007322:	bf00      	nop
 8007324:	f3af 8000 	nop.w
 8007328:	636f4361 	.word	0x636f4361
 800732c:	3fd287a7 	.word	0x3fd287a7
 8007330:	8b60c8b3 	.word	0x8b60c8b3
 8007334:	3fc68a28 	.word	0x3fc68a28
 8007338:	509f79fb 	.word	0x509f79fb
 800733c:	3fd34413 	.word	0x3fd34413
 8007340:	08008e47 	.word	0x08008e47
 8007344:	08008e5e 	.word	0x08008e5e
 8007348:	7ff00000 	.word	0x7ff00000
 800734c:	08008e43 	.word	0x08008e43
 8007350:	08008e17 	.word	0x08008e17
 8007354:	08008e16 	.word	0x08008e16
 8007358:	3ff80000 	.word	0x3ff80000
 800735c:	08008fb0 	.word	0x08008fb0
 8007360:	08008eb6 	.word	0x08008eb6
 8007364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007368:	6018      	str	r0, [r3, #0]
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	2b0e      	cmp	r3, #14
 800736e:	f200 80a1 	bhi.w	80074b4 <_dtoa_r+0x44c>
 8007372:	2c00      	cmp	r4, #0
 8007374:	f000 809e 	beq.w	80074b4 <_dtoa_r+0x44c>
 8007378:	2f00      	cmp	r7, #0
 800737a:	dd33      	ble.n	80073e4 <_dtoa_r+0x37c>
 800737c:	4b9c      	ldr	r3, [pc, #624]	@ (80075f0 <_dtoa_r+0x588>)
 800737e:	f007 020f 	and.w	r2, r7, #15
 8007382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007386:	05f8      	lsls	r0, r7, #23
 8007388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800738c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007390:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007394:	d516      	bpl.n	80073c4 <_dtoa_r+0x35c>
 8007396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800739a:	4b96      	ldr	r3, [pc, #600]	@ (80075f4 <_dtoa_r+0x58c>)
 800739c:	2603      	movs	r6, #3
 800739e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a2:	f7f9 f9c3 	bl	800072c <__aeabi_ddiv>
 80073a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073aa:	f004 040f 	and.w	r4, r4, #15
 80073ae:	4d91      	ldr	r5, [pc, #580]	@ (80075f4 <_dtoa_r+0x58c>)
 80073b0:	b954      	cbnz	r4, 80073c8 <_dtoa_r+0x360>
 80073b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ba:	f7f9 f9b7 	bl	800072c <__aeabi_ddiv>
 80073be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073c2:	e028      	b.n	8007416 <_dtoa_r+0x3ae>
 80073c4:	2602      	movs	r6, #2
 80073c6:	e7f2      	b.n	80073ae <_dtoa_r+0x346>
 80073c8:	07e1      	lsls	r1, r4, #31
 80073ca:	d508      	bpl.n	80073de <_dtoa_r+0x376>
 80073cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073d4:	f7f9 f880 	bl	80004d8 <__aeabi_dmul>
 80073d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073dc:	3601      	adds	r6, #1
 80073de:	1064      	asrs	r4, r4, #1
 80073e0:	3508      	adds	r5, #8
 80073e2:	e7e5      	b.n	80073b0 <_dtoa_r+0x348>
 80073e4:	f000 80af 	beq.w	8007546 <_dtoa_r+0x4de>
 80073e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ec:	427c      	negs	r4, r7
 80073ee:	4b80      	ldr	r3, [pc, #512]	@ (80075f0 <_dtoa_r+0x588>)
 80073f0:	f004 020f 	and.w	r2, r4, #15
 80073f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f9 f86c 	bl	80004d8 <__aeabi_dmul>
 8007400:	2602      	movs	r6, #2
 8007402:	2300      	movs	r3, #0
 8007404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007408:	4d7a      	ldr	r5, [pc, #488]	@ (80075f4 <_dtoa_r+0x58c>)
 800740a:	1124      	asrs	r4, r4, #4
 800740c:	2c00      	cmp	r4, #0
 800740e:	f040 808f 	bne.w	8007530 <_dtoa_r+0x4c8>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1d3      	bne.n	80073be <_dtoa_r+0x356>
 8007416:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800741a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8094 	beq.w	800754a <_dtoa_r+0x4e2>
 8007422:	2200      	movs	r2, #0
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	4b73      	ldr	r3, [pc, #460]	@ (80075f8 <_dtoa_r+0x590>)
 800742a:	f7f9 fac7 	bl	80009bc <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	f000 808b 	beq.w	800754a <_dtoa_r+0x4e2>
 8007434:	9b08      	ldr	r3, [sp, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8087 	beq.w	800754a <_dtoa_r+0x4e2>
 800743c:	f1bb 0f00 	cmp.w	fp, #0
 8007440:	dd34      	ble.n	80074ac <_dtoa_r+0x444>
 8007442:	4620      	mov	r0, r4
 8007444:	2200      	movs	r2, #0
 8007446:	4629      	mov	r1, r5
 8007448:	4b6c      	ldr	r3, [pc, #432]	@ (80075fc <_dtoa_r+0x594>)
 800744a:	f7f9 f845 	bl	80004d8 <__aeabi_dmul>
 800744e:	465c      	mov	r4, fp
 8007450:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007454:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007458:	3601      	adds	r6, #1
 800745a:	4630      	mov	r0, r6
 800745c:	f7f8 ffd2 	bl	8000404 <__aeabi_i2d>
 8007460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007464:	f7f9 f838 	bl	80004d8 <__aeabi_dmul>
 8007468:	2200      	movs	r2, #0
 800746a:	4b65      	ldr	r3, [pc, #404]	@ (8007600 <_dtoa_r+0x598>)
 800746c:	f7f8 fe7e 	bl	800016c <__adddf3>
 8007470:	4605      	mov	r5, r0
 8007472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007476:	2c00      	cmp	r4, #0
 8007478:	d16a      	bne.n	8007550 <_dtoa_r+0x4e8>
 800747a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800747e:	2200      	movs	r2, #0
 8007480:	4b60      	ldr	r3, [pc, #384]	@ (8007604 <_dtoa_r+0x59c>)
 8007482:	f7f8 fe71 	bl	8000168 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800748e:	462a      	mov	r2, r5
 8007490:	4633      	mov	r3, r6
 8007492:	f7f9 fab1 	bl	80009f8 <__aeabi_dcmpgt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f040 8298 	bne.w	80079cc <_dtoa_r+0x964>
 800749c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a0:	462a      	mov	r2, r5
 80074a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074a6:	f7f9 fa89 	bl	80009bc <__aeabi_dcmplt>
 80074aa:	bb38      	cbnz	r0, 80074fc <_dtoa_r+0x494>
 80074ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80074b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80074b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f2c0 8157 	blt.w	800776a <_dtoa_r+0x702>
 80074bc:	2f0e      	cmp	r7, #14
 80074be:	f300 8154 	bgt.w	800776a <_dtoa_r+0x702>
 80074c2:	4b4b      	ldr	r3, [pc, #300]	@ (80075f0 <_dtoa_r+0x588>)
 80074c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f280 80e5 	bge.w	80076a2 <_dtoa_r+0x63a>
 80074d8:	9b08      	ldr	r3, [sp, #32]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f300 80e1 	bgt.w	80076a2 <_dtoa_r+0x63a>
 80074e0:	d10c      	bne.n	80074fc <_dtoa_r+0x494>
 80074e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e6:	2200      	movs	r2, #0
 80074e8:	4b46      	ldr	r3, [pc, #280]	@ (8007604 <_dtoa_r+0x59c>)
 80074ea:	f7f8 fff5 	bl	80004d8 <__aeabi_dmul>
 80074ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074f2:	f7f9 fa77 	bl	80009e4 <__aeabi_dcmpge>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f000 8266 	beq.w	80079c8 <_dtoa_r+0x960>
 80074fc:	2400      	movs	r4, #0
 80074fe:	4625      	mov	r5, r4
 8007500:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007502:	4656      	mov	r6, sl
 8007504:	ea6f 0803 	mvn.w	r8, r3
 8007508:	2700      	movs	r7, #0
 800750a:	4621      	mov	r1, r4
 800750c:	4648      	mov	r0, r9
 800750e:	f000 fdef 	bl	80080f0 <_Bfree>
 8007512:	2d00      	cmp	r5, #0
 8007514:	f000 80bd 	beq.w	8007692 <_dtoa_r+0x62a>
 8007518:	b12f      	cbz	r7, 8007526 <_dtoa_r+0x4be>
 800751a:	42af      	cmp	r7, r5
 800751c:	d003      	beq.n	8007526 <_dtoa_r+0x4be>
 800751e:	4639      	mov	r1, r7
 8007520:	4648      	mov	r0, r9
 8007522:	f000 fde5 	bl	80080f0 <_Bfree>
 8007526:	4629      	mov	r1, r5
 8007528:	4648      	mov	r0, r9
 800752a:	f000 fde1 	bl	80080f0 <_Bfree>
 800752e:	e0b0      	b.n	8007692 <_dtoa_r+0x62a>
 8007530:	07e2      	lsls	r2, r4, #31
 8007532:	d505      	bpl.n	8007540 <_dtoa_r+0x4d8>
 8007534:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007538:	f7f8 ffce 	bl	80004d8 <__aeabi_dmul>
 800753c:	2301      	movs	r3, #1
 800753e:	3601      	adds	r6, #1
 8007540:	1064      	asrs	r4, r4, #1
 8007542:	3508      	adds	r5, #8
 8007544:	e762      	b.n	800740c <_dtoa_r+0x3a4>
 8007546:	2602      	movs	r6, #2
 8007548:	e765      	b.n	8007416 <_dtoa_r+0x3ae>
 800754a:	46b8      	mov	r8, r7
 800754c:	9c08      	ldr	r4, [sp, #32]
 800754e:	e784      	b.n	800745a <_dtoa_r+0x3f2>
 8007550:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <_dtoa_r+0x588>)
 8007552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007554:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800755c:	4454      	add	r4, sl
 800755e:	2900      	cmp	r1, #0
 8007560:	d054      	beq.n	800760c <_dtoa_r+0x5a4>
 8007562:	2000      	movs	r0, #0
 8007564:	4928      	ldr	r1, [pc, #160]	@ (8007608 <_dtoa_r+0x5a0>)
 8007566:	f7f9 f8e1 	bl	800072c <__aeabi_ddiv>
 800756a:	4633      	mov	r3, r6
 800756c:	462a      	mov	r2, r5
 800756e:	f7f8 fdfb 	bl	8000168 <__aeabi_dsub>
 8007572:	4656      	mov	r6, sl
 8007574:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800757c:	f7f9 fa5c 	bl	8000a38 <__aeabi_d2iz>
 8007580:	4605      	mov	r5, r0
 8007582:	f7f8 ff3f 	bl	8000404 <__aeabi_i2d>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800758e:	f7f8 fdeb 	bl	8000168 <__aeabi_dsub>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	3530      	adds	r5, #48	@ 0x30
 8007598:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800759c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075a0:	f806 5b01 	strb.w	r5, [r6], #1
 80075a4:	f7f9 fa0a 	bl	80009bc <__aeabi_dcmplt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d172      	bne.n	8007692 <_dtoa_r+0x62a>
 80075ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075b0:	2000      	movs	r0, #0
 80075b2:	4911      	ldr	r1, [pc, #68]	@ (80075f8 <_dtoa_r+0x590>)
 80075b4:	f7f8 fdd8 	bl	8000168 <__aeabi_dsub>
 80075b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075bc:	f7f9 f9fe 	bl	80009bc <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f040 80b4 	bne.w	800772e <_dtoa_r+0x6c6>
 80075c6:	42a6      	cmp	r6, r4
 80075c8:	f43f af70 	beq.w	80074ac <_dtoa_r+0x444>
 80075cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075d0:	2200      	movs	r2, #0
 80075d2:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <_dtoa_r+0x594>)
 80075d4:	f7f8 ff80 	bl	80004d8 <__aeabi_dmul>
 80075d8:	2200      	movs	r2, #0
 80075da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075e2:	4b06      	ldr	r3, [pc, #24]	@ (80075fc <_dtoa_r+0x594>)
 80075e4:	f7f8 ff78 	bl	80004d8 <__aeabi_dmul>
 80075e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075ec:	e7c4      	b.n	8007578 <_dtoa_r+0x510>
 80075ee:	bf00      	nop
 80075f0:	08008fb0 	.word	0x08008fb0
 80075f4:	08008f88 	.word	0x08008f88
 80075f8:	3ff00000 	.word	0x3ff00000
 80075fc:	40240000 	.word	0x40240000
 8007600:	401c0000 	.word	0x401c0000
 8007604:	40140000 	.word	0x40140000
 8007608:	3fe00000 	.word	0x3fe00000
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	f7f8 ff62 	bl	80004d8 <__aeabi_dmul>
 8007614:	4656      	mov	r6, sl
 8007616:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800761a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800761c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007620:	f7f9 fa0a 	bl	8000a38 <__aeabi_d2iz>
 8007624:	4605      	mov	r5, r0
 8007626:	f7f8 feed 	bl	8000404 <__aeabi_i2d>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007632:	f7f8 fd99 	bl	8000168 <__aeabi_dsub>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	3530      	adds	r5, #48	@ 0x30
 800763c:	f806 5b01 	strb.w	r5, [r6], #1
 8007640:	42a6      	cmp	r6, r4
 8007642:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	d124      	bne.n	8007696 <_dtoa_r+0x62e>
 800764c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007650:	4bae      	ldr	r3, [pc, #696]	@ (800790c <_dtoa_r+0x8a4>)
 8007652:	f7f8 fd8b 	bl	800016c <__adddf3>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765e:	f7f9 f9cb 	bl	80009f8 <__aeabi_dcmpgt>
 8007662:	2800      	cmp	r0, #0
 8007664:	d163      	bne.n	800772e <_dtoa_r+0x6c6>
 8007666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800766a:	2000      	movs	r0, #0
 800766c:	49a7      	ldr	r1, [pc, #668]	@ (800790c <_dtoa_r+0x8a4>)
 800766e:	f7f8 fd7b 	bl	8000168 <__aeabi_dsub>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800767a:	f7f9 f99f 	bl	80009bc <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f af14 	beq.w	80074ac <_dtoa_r+0x444>
 8007684:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007686:	1e73      	subs	r3, r6, #1
 8007688:	9313      	str	r3, [sp, #76]	@ 0x4c
 800768a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800768e:	2b30      	cmp	r3, #48	@ 0x30
 8007690:	d0f8      	beq.n	8007684 <_dtoa_r+0x61c>
 8007692:	4647      	mov	r7, r8
 8007694:	e03b      	b.n	800770e <_dtoa_r+0x6a6>
 8007696:	4b9e      	ldr	r3, [pc, #632]	@ (8007910 <_dtoa_r+0x8a8>)
 8007698:	f7f8 ff1e 	bl	80004d8 <__aeabi_dmul>
 800769c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076a0:	e7bc      	b.n	800761c <_dtoa_r+0x5b4>
 80076a2:	4656      	mov	r6, sl
 80076a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80076a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f9 f83c 	bl	800072c <__aeabi_ddiv>
 80076b4:	f7f9 f9c0 	bl	8000a38 <__aeabi_d2iz>
 80076b8:	4680      	mov	r8, r0
 80076ba:	f7f8 fea3 	bl	8000404 <__aeabi_i2d>
 80076be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c2:	f7f8 ff09 	bl	80004d8 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7f8 fd4b 	bl	8000168 <__aeabi_dsub>
 80076d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076d6:	9d08      	ldr	r5, [sp, #32]
 80076d8:	f806 4b01 	strb.w	r4, [r6], #1
 80076dc:	eba6 040a 	sub.w	r4, r6, sl
 80076e0:	42a5      	cmp	r5, r4
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	d133      	bne.n	8007750 <_dtoa_r+0x6e8>
 80076e8:	f7f8 fd40 	bl	800016c <__adddf3>
 80076ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f0:	4604      	mov	r4, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	f7f9 f980 	bl	80009f8 <__aeabi_dcmpgt>
 80076f8:	b9c0      	cbnz	r0, 800772c <_dtoa_r+0x6c4>
 80076fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7f9 f951 	bl	80009a8 <__aeabi_dcmpeq>
 8007706:	b110      	cbz	r0, 800770e <_dtoa_r+0x6a6>
 8007708:	f018 0f01 	tst.w	r8, #1
 800770c:	d10e      	bne.n	800772c <_dtoa_r+0x6c4>
 800770e:	4648      	mov	r0, r9
 8007710:	9903      	ldr	r1, [sp, #12]
 8007712:	f000 fced 	bl	80080f0 <_Bfree>
 8007716:	2300      	movs	r3, #0
 8007718:	7033      	strb	r3, [r6, #0]
 800771a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800771c:	3701      	adds	r7, #1
 800771e:	601f      	str	r7, [r3, #0]
 8007720:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 824b 	beq.w	8007bbe <_dtoa_r+0xb56>
 8007728:	601e      	str	r6, [r3, #0]
 800772a:	e248      	b.n	8007bbe <_dtoa_r+0xb56>
 800772c:	46b8      	mov	r8, r7
 800772e:	4633      	mov	r3, r6
 8007730:	461e      	mov	r6, r3
 8007732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007736:	2a39      	cmp	r2, #57	@ 0x39
 8007738:	d106      	bne.n	8007748 <_dtoa_r+0x6e0>
 800773a:	459a      	cmp	sl, r3
 800773c:	d1f8      	bne.n	8007730 <_dtoa_r+0x6c8>
 800773e:	2230      	movs	r2, #48	@ 0x30
 8007740:	f108 0801 	add.w	r8, r8, #1
 8007744:	f88a 2000 	strb.w	r2, [sl]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	3201      	adds	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e7a0      	b.n	8007692 <_dtoa_r+0x62a>
 8007750:	2200      	movs	r2, #0
 8007752:	4b6f      	ldr	r3, [pc, #444]	@ (8007910 <_dtoa_r+0x8a8>)
 8007754:	f7f8 fec0 	bl	80004d8 <__aeabi_dmul>
 8007758:	2200      	movs	r2, #0
 800775a:	2300      	movs	r3, #0
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	f7f9 f922 	bl	80009a8 <__aeabi_dcmpeq>
 8007764:	2800      	cmp	r0, #0
 8007766:	d09f      	beq.n	80076a8 <_dtoa_r+0x640>
 8007768:	e7d1      	b.n	800770e <_dtoa_r+0x6a6>
 800776a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800776c:	2a00      	cmp	r2, #0
 800776e:	f000 80ea 	beq.w	8007946 <_dtoa_r+0x8de>
 8007772:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007774:	2a01      	cmp	r2, #1
 8007776:	f300 80cd 	bgt.w	8007914 <_dtoa_r+0x8ac>
 800777a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800777c:	2a00      	cmp	r2, #0
 800777e:	f000 80c1 	beq.w	8007904 <_dtoa_r+0x89c>
 8007782:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007786:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007788:	9e04      	ldr	r6, [sp, #16]
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	2101      	movs	r1, #1
 800778e:	441a      	add	r2, r3
 8007790:	9204      	str	r2, [sp, #16]
 8007792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007794:	4648      	mov	r0, r9
 8007796:	441a      	add	r2, r3
 8007798:	9209      	str	r2, [sp, #36]	@ 0x24
 800779a:	f000 fd5d 	bl	8008258 <__i2b>
 800779e:	4605      	mov	r5, r0
 80077a0:	b166      	cbz	r6, 80077bc <_dtoa_r+0x754>
 80077a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dd09      	ble.n	80077bc <_dtoa_r+0x754>
 80077a8:	42b3      	cmp	r3, r6
 80077aa:	bfa8      	it	ge
 80077ac:	4633      	movge	r3, r6
 80077ae:	9a04      	ldr	r2, [sp, #16]
 80077b0:	1af6      	subs	r6, r6, r3
 80077b2:	1ad2      	subs	r2, r2, r3
 80077b4:	9204      	str	r2, [sp, #16]
 80077b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80077bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077be:	b30b      	cbz	r3, 8007804 <_dtoa_r+0x79c>
 80077c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80c6 	beq.w	8007954 <_dtoa_r+0x8ec>
 80077c8:	2c00      	cmp	r4, #0
 80077ca:	f000 80c0 	beq.w	800794e <_dtoa_r+0x8e6>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4622      	mov	r2, r4
 80077d2:	4648      	mov	r0, r9
 80077d4:	f000 fdf8 	bl	80083c8 <__pow5mult>
 80077d8:	9a03      	ldr	r2, [sp, #12]
 80077da:	4601      	mov	r1, r0
 80077dc:	4605      	mov	r5, r0
 80077de:	4648      	mov	r0, r9
 80077e0:	f000 fd50 	bl	8008284 <__multiply>
 80077e4:	9903      	ldr	r1, [sp, #12]
 80077e6:	4680      	mov	r8, r0
 80077e8:	4648      	mov	r0, r9
 80077ea:	f000 fc81 	bl	80080f0 <_Bfree>
 80077ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077f0:	1b1b      	subs	r3, r3, r4
 80077f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f4:	f000 80b1 	beq.w	800795a <_dtoa_r+0x8f2>
 80077f8:	4641      	mov	r1, r8
 80077fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077fc:	4648      	mov	r0, r9
 80077fe:	f000 fde3 	bl	80083c8 <__pow5mult>
 8007802:	9003      	str	r0, [sp, #12]
 8007804:	2101      	movs	r1, #1
 8007806:	4648      	mov	r0, r9
 8007808:	f000 fd26 	bl	8008258 <__i2b>
 800780c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800780e:	4604      	mov	r4, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 81d8 	beq.w	8007bc6 <_dtoa_r+0xb5e>
 8007816:	461a      	mov	r2, r3
 8007818:	4601      	mov	r1, r0
 800781a:	4648      	mov	r0, r9
 800781c:	f000 fdd4 	bl	80083c8 <__pow5mult>
 8007820:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007822:	4604      	mov	r4, r0
 8007824:	2b01      	cmp	r3, #1
 8007826:	f300 809f 	bgt.w	8007968 <_dtoa_r+0x900>
 800782a:	9b06      	ldr	r3, [sp, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8097 	bne.w	8007960 <_dtoa_r+0x8f8>
 8007832:	9b07      	ldr	r3, [sp, #28]
 8007834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 8093 	bne.w	8007964 <_dtoa_r+0x8fc>
 800783e:	9b07      	ldr	r3, [sp, #28]
 8007840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007844:	0d1b      	lsrs	r3, r3, #20
 8007846:	051b      	lsls	r3, r3, #20
 8007848:	b133      	cbz	r3, 8007858 <_dtoa_r+0x7f0>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	3301      	adds	r3, #1
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007852:	3301      	adds	r3, #1
 8007854:	9309      	str	r3, [sp, #36]	@ 0x24
 8007856:	2301      	movs	r3, #1
 8007858:	930a      	str	r3, [sp, #40]	@ 0x28
 800785a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 81b8 	beq.w	8007bd2 <_dtoa_r+0xb6a>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007868:	6918      	ldr	r0, [r3, #16]
 800786a:	f000 fca9 	bl	80081c0 <__hi0bits>
 800786e:	f1c0 0020 	rsb	r0, r0, #32
 8007872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007874:	4418      	add	r0, r3
 8007876:	f010 001f 	ands.w	r0, r0, #31
 800787a:	f000 8082 	beq.w	8007982 <_dtoa_r+0x91a>
 800787e:	f1c0 0320 	rsb	r3, r0, #32
 8007882:	2b04      	cmp	r3, #4
 8007884:	dd73      	ble.n	800796e <_dtoa_r+0x906>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	f1c0 001c 	rsb	r0, r0, #28
 800788c:	4403      	add	r3, r0
 800788e:	9304      	str	r3, [sp, #16]
 8007890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007892:	4406      	add	r6, r0
 8007894:	4403      	add	r3, r0
 8007896:	9309      	str	r3, [sp, #36]	@ 0x24
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd05      	ble.n	80078aa <_dtoa_r+0x842>
 800789e:	461a      	mov	r2, r3
 80078a0:	4648      	mov	r0, r9
 80078a2:	9903      	ldr	r1, [sp, #12]
 80078a4:	f000 fdea 	bl	800847c <__lshift>
 80078a8:	9003      	str	r0, [sp, #12]
 80078aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd05      	ble.n	80078bc <_dtoa_r+0x854>
 80078b0:	4621      	mov	r1, r4
 80078b2:	461a      	mov	r2, r3
 80078b4:	4648      	mov	r0, r9
 80078b6:	f000 fde1 	bl	800847c <__lshift>
 80078ba:	4604      	mov	r4, r0
 80078bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d061      	beq.n	8007986 <_dtoa_r+0x91e>
 80078c2:	4621      	mov	r1, r4
 80078c4:	9803      	ldr	r0, [sp, #12]
 80078c6:	f000 fe45 	bl	8008554 <__mcmp>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	da5b      	bge.n	8007986 <_dtoa_r+0x91e>
 80078ce:	2300      	movs	r3, #0
 80078d0:	220a      	movs	r2, #10
 80078d2:	4648      	mov	r0, r9
 80078d4:	9903      	ldr	r1, [sp, #12]
 80078d6:	f000 fc2d 	bl	8008134 <__multadd>
 80078da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078dc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80078e0:	9003      	str	r0, [sp, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8177 	beq.w	8007bd6 <_dtoa_r+0xb6e>
 80078e8:	4629      	mov	r1, r5
 80078ea:	2300      	movs	r3, #0
 80078ec:	220a      	movs	r2, #10
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 fc20 	bl	8008134 <__multadd>
 80078f4:	f1bb 0f00 	cmp.w	fp, #0
 80078f8:	4605      	mov	r5, r0
 80078fa:	dc6f      	bgt.n	80079dc <_dtoa_r+0x974>
 80078fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc49      	bgt.n	8007996 <_dtoa_r+0x92e>
 8007902:	e06b      	b.n	80079dc <_dtoa_r+0x974>
 8007904:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800790a:	e73c      	b.n	8007786 <_dtoa_r+0x71e>
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	40240000 	.word	0x40240000
 8007914:	9b08      	ldr	r3, [sp, #32]
 8007916:	1e5c      	subs	r4, r3, #1
 8007918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791a:	42a3      	cmp	r3, r4
 800791c:	db09      	blt.n	8007932 <_dtoa_r+0x8ca>
 800791e:	1b1c      	subs	r4, r3, r4
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f6bf af30 	bge.w	8007788 <_dtoa_r+0x720>
 8007928:	9b04      	ldr	r3, [sp, #16]
 800792a:	9a08      	ldr	r2, [sp, #32]
 800792c:	1a9e      	subs	r6, r3, r2
 800792e:	2300      	movs	r3, #0
 8007930:	e72b      	b.n	800778a <_dtoa_r+0x722>
 8007932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007936:	1ae3      	subs	r3, r4, r3
 8007938:	441a      	add	r2, r3
 800793a:	940a      	str	r4, [sp, #40]	@ 0x28
 800793c:	9e04      	ldr	r6, [sp, #16]
 800793e:	2400      	movs	r4, #0
 8007940:	9b08      	ldr	r3, [sp, #32]
 8007942:	920e      	str	r2, [sp, #56]	@ 0x38
 8007944:	e721      	b.n	800778a <_dtoa_r+0x722>
 8007946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007948:	9e04      	ldr	r6, [sp, #16]
 800794a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800794c:	e728      	b.n	80077a0 <_dtoa_r+0x738>
 800794e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007952:	e751      	b.n	80077f8 <_dtoa_r+0x790>
 8007954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007956:	9903      	ldr	r1, [sp, #12]
 8007958:	e750      	b.n	80077fc <_dtoa_r+0x794>
 800795a:	f8cd 800c 	str.w	r8, [sp, #12]
 800795e:	e751      	b.n	8007804 <_dtoa_r+0x79c>
 8007960:	2300      	movs	r3, #0
 8007962:	e779      	b.n	8007858 <_dtoa_r+0x7f0>
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	e777      	b.n	8007858 <_dtoa_r+0x7f0>
 8007968:	2300      	movs	r3, #0
 800796a:	930a      	str	r3, [sp, #40]	@ 0x28
 800796c:	e779      	b.n	8007862 <_dtoa_r+0x7fa>
 800796e:	d093      	beq.n	8007898 <_dtoa_r+0x830>
 8007970:	9a04      	ldr	r2, [sp, #16]
 8007972:	331c      	adds	r3, #28
 8007974:	441a      	add	r2, r3
 8007976:	9204      	str	r2, [sp, #16]
 8007978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800797a:	441e      	add	r6, r3
 800797c:	441a      	add	r2, r3
 800797e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007980:	e78a      	b.n	8007898 <_dtoa_r+0x830>
 8007982:	4603      	mov	r3, r0
 8007984:	e7f4      	b.n	8007970 <_dtoa_r+0x908>
 8007986:	9b08      	ldr	r3, [sp, #32]
 8007988:	46b8      	mov	r8, r7
 800798a:	2b00      	cmp	r3, #0
 800798c:	dc20      	bgt.n	80079d0 <_dtoa_r+0x968>
 800798e:	469b      	mov	fp, r3
 8007990:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007992:	2b02      	cmp	r3, #2
 8007994:	dd1e      	ble.n	80079d4 <_dtoa_r+0x96c>
 8007996:	f1bb 0f00 	cmp.w	fp, #0
 800799a:	f47f adb1 	bne.w	8007500 <_dtoa_r+0x498>
 800799e:	4621      	mov	r1, r4
 80079a0:	465b      	mov	r3, fp
 80079a2:	2205      	movs	r2, #5
 80079a4:	4648      	mov	r0, r9
 80079a6:	f000 fbc5 	bl	8008134 <__multadd>
 80079aa:	4601      	mov	r1, r0
 80079ac:	4604      	mov	r4, r0
 80079ae:	9803      	ldr	r0, [sp, #12]
 80079b0:	f000 fdd0 	bl	8008554 <__mcmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f77f ada3 	ble.w	8007500 <_dtoa_r+0x498>
 80079ba:	4656      	mov	r6, sl
 80079bc:	2331      	movs	r3, #49	@ 0x31
 80079be:	f108 0801 	add.w	r8, r8, #1
 80079c2:	f806 3b01 	strb.w	r3, [r6], #1
 80079c6:	e59f      	b.n	8007508 <_dtoa_r+0x4a0>
 80079c8:	46b8      	mov	r8, r7
 80079ca:	9c08      	ldr	r4, [sp, #32]
 80079cc:	4625      	mov	r5, r4
 80079ce:	e7f4      	b.n	80079ba <_dtoa_r+0x952>
 80079d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80079d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8101 	beq.w	8007bde <_dtoa_r+0xb76>
 80079dc:	2e00      	cmp	r6, #0
 80079de:	dd05      	ble.n	80079ec <_dtoa_r+0x984>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4632      	mov	r2, r6
 80079e4:	4648      	mov	r0, r9
 80079e6:	f000 fd49 	bl	800847c <__lshift>
 80079ea:	4605      	mov	r5, r0
 80079ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d05c      	beq.n	8007aac <_dtoa_r+0xa44>
 80079f2:	4648      	mov	r0, r9
 80079f4:	6869      	ldr	r1, [r5, #4]
 80079f6:	f000 fb3b 	bl	8008070 <_Balloc>
 80079fa:	4606      	mov	r6, r0
 80079fc:	b928      	cbnz	r0, 8007a0a <_dtoa_r+0x9a2>
 80079fe:	4602      	mov	r2, r0
 8007a00:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a04:	4b80      	ldr	r3, [pc, #512]	@ (8007c08 <_dtoa_r+0xba0>)
 8007a06:	f7ff bb43 	b.w	8007090 <_dtoa_r+0x28>
 8007a0a:	692a      	ldr	r2, [r5, #16]
 8007a0c:	f105 010c 	add.w	r1, r5, #12
 8007a10:	3202      	adds	r2, #2
 8007a12:	0092      	lsls	r2, r2, #2
 8007a14:	300c      	adds	r0, #12
 8007a16:	f001 f847 	bl	8008aa8 <memcpy>
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 fd2c 	bl	800847c <__lshift>
 8007a24:	462f      	mov	r7, r5
 8007a26:	4605      	mov	r5, r0
 8007a28:	f10a 0301 	add.w	r3, sl, #1
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	eb0a 030b 	add.w	r3, sl, fp
 8007a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a34:	9b06      	ldr	r3, [sp, #24]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	9803      	ldr	r0, [sp, #12]
 8007a42:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007a46:	f7ff fa85 	bl	8006f54 <quorem>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	3330      	adds	r3, #48	@ 0x30
 8007a50:	9006      	str	r0, [sp, #24]
 8007a52:	9803      	ldr	r0, [sp, #12]
 8007a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a56:	f000 fd7d 	bl	8008554 <__mcmp>
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	9008      	str	r0, [sp, #32]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4648      	mov	r0, r9
 8007a62:	f000 fd93 	bl	800858c <__mdiff>
 8007a66:	68c2      	ldr	r2, [r0, #12]
 8007a68:	4606      	mov	r6, r0
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a6c:	bb02      	cbnz	r2, 8007ab0 <_dtoa_r+0xa48>
 8007a6e:	4601      	mov	r1, r0
 8007a70:	9803      	ldr	r0, [sp, #12]
 8007a72:	f000 fd6f 	bl	8008554 <__mcmp>
 8007a76:	4602      	mov	r2, r0
 8007a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007a82:	f000 fb35 	bl	80080f0 <_Bfree>
 8007a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a8a:	9e04      	ldr	r6, [sp, #16]
 8007a8c:	ea42 0103 	orr.w	r1, r2, r3
 8007a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a92:	4319      	orrs	r1, r3
 8007a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a96:	d10d      	bne.n	8007ab4 <_dtoa_r+0xa4c>
 8007a98:	2b39      	cmp	r3, #57	@ 0x39
 8007a9a:	d027      	beq.n	8007aec <_dtoa_r+0xa84>
 8007a9c:	9a08      	ldr	r2, [sp, #32]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	dd01      	ble.n	8007aa6 <_dtoa_r+0xa3e>
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	3331      	adds	r3, #49	@ 0x31
 8007aa6:	f88b 3000 	strb.w	r3, [fp]
 8007aaa:	e52e      	b.n	800750a <_dtoa_r+0x4a2>
 8007aac:	4628      	mov	r0, r5
 8007aae:	e7b9      	b.n	8007a24 <_dtoa_r+0x9bc>
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	e7e2      	b.n	8007a7a <_dtoa_r+0xa12>
 8007ab4:	9908      	ldr	r1, [sp, #32]
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	db04      	blt.n	8007ac4 <_dtoa_r+0xa5c>
 8007aba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007abc:	4301      	orrs	r1, r0
 8007abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ac0:	4301      	orrs	r1, r0
 8007ac2:	d120      	bne.n	8007b06 <_dtoa_r+0xa9e>
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	ddee      	ble.n	8007aa6 <_dtoa_r+0xa3e>
 8007ac8:	2201      	movs	r2, #1
 8007aca:	9903      	ldr	r1, [sp, #12]
 8007acc:	4648      	mov	r0, r9
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	f000 fcd4 	bl	800847c <__lshift>
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	9003      	str	r0, [sp, #12]
 8007ad8:	f000 fd3c 	bl	8008554 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	dc02      	bgt.n	8007ae8 <_dtoa_r+0xa80>
 8007ae2:	d1e0      	bne.n	8007aa6 <_dtoa_r+0xa3e>
 8007ae4:	07da      	lsls	r2, r3, #31
 8007ae6:	d5de      	bpl.n	8007aa6 <_dtoa_r+0xa3e>
 8007ae8:	2b39      	cmp	r3, #57	@ 0x39
 8007aea:	d1da      	bne.n	8007aa2 <_dtoa_r+0xa3a>
 8007aec:	2339      	movs	r3, #57	@ 0x39
 8007aee:	f88b 3000 	strb.w	r3, [fp]
 8007af2:	4633      	mov	r3, r6
 8007af4:	461e      	mov	r6, r3
 8007af6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	2a39      	cmp	r2, #57	@ 0x39
 8007afe:	d04e      	beq.n	8007b9e <_dtoa_r+0xb36>
 8007b00:	3201      	adds	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e501      	b.n	800750a <_dtoa_r+0x4a2>
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	dd03      	ble.n	8007b12 <_dtoa_r+0xaaa>
 8007b0a:	2b39      	cmp	r3, #57	@ 0x39
 8007b0c:	d0ee      	beq.n	8007aec <_dtoa_r+0xa84>
 8007b0e:	3301      	adds	r3, #1
 8007b10:	e7c9      	b.n	8007aa6 <_dtoa_r+0xa3e>
 8007b12:	9a04      	ldr	r2, [sp, #16]
 8007b14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b1a:	428a      	cmp	r2, r1
 8007b1c:	d028      	beq.n	8007b70 <_dtoa_r+0xb08>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	220a      	movs	r2, #10
 8007b22:	9903      	ldr	r1, [sp, #12]
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 fb05 	bl	8008134 <__multadd>
 8007b2a:	42af      	cmp	r7, r5
 8007b2c:	9003      	str	r0, [sp, #12]
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	f04f 020a 	mov.w	r2, #10
 8007b36:	4639      	mov	r1, r7
 8007b38:	4648      	mov	r0, r9
 8007b3a:	d107      	bne.n	8007b4c <_dtoa_r+0xae4>
 8007b3c:	f000 fafa 	bl	8008134 <__multadd>
 8007b40:	4607      	mov	r7, r0
 8007b42:	4605      	mov	r5, r0
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	3301      	adds	r3, #1
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	e777      	b.n	8007a3c <_dtoa_r+0x9d4>
 8007b4c:	f000 faf2 	bl	8008134 <__multadd>
 8007b50:	4629      	mov	r1, r5
 8007b52:	4607      	mov	r7, r0
 8007b54:	2300      	movs	r3, #0
 8007b56:	220a      	movs	r2, #10
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f000 faeb 	bl	8008134 <__multadd>
 8007b5e:	4605      	mov	r5, r0
 8007b60:	e7f0      	b.n	8007b44 <_dtoa_r+0xadc>
 8007b62:	f1bb 0f00 	cmp.w	fp, #0
 8007b66:	bfcc      	ite	gt
 8007b68:	465e      	movgt	r6, fp
 8007b6a:	2601      	movle	r6, #1
 8007b6c:	2700      	movs	r7, #0
 8007b6e:	4456      	add	r6, sl
 8007b70:	2201      	movs	r2, #1
 8007b72:	9903      	ldr	r1, [sp, #12]
 8007b74:	4648      	mov	r0, r9
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	f000 fc80 	bl	800847c <__lshift>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	9003      	str	r0, [sp, #12]
 8007b80:	f000 fce8 	bl	8008554 <__mcmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	dcb4      	bgt.n	8007af2 <_dtoa_r+0xa8a>
 8007b88:	d102      	bne.n	8007b90 <_dtoa_r+0xb28>
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	07db      	lsls	r3, r3, #31
 8007b8e:	d4b0      	bmi.n	8007af2 <_dtoa_r+0xa8a>
 8007b90:	4633      	mov	r3, r6
 8007b92:	461e      	mov	r6, r3
 8007b94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b98:	2a30      	cmp	r2, #48	@ 0x30
 8007b9a:	d0fa      	beq.n	8007b92 <_dtoa_r+0xb2a>
 8007b9c:	e4b5      	b.n	800750a <_dtoa_r+0x4a2>
 8007b9e:	459a      	cmp	sl, r3
 8007ba0:	d1a8      	bne.n	8007af4 <_dtoa_r+0xa8c>
 8007ba2:	2331      	movs	r3, #49	@ 0x31
 8007ba4:	f108 0801 	add.w	r8, r8, #1
 8007ba8:	f88a 3000 	strb.w	r3, [sl]
 8007bac:	e4ad      	b.n	800750a <_dtoa_r+0x4a2>
 8007bae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007c0c <_dtoa_r+0xba4>
 8007bb4:	b11b      	cbz	r3, 8007bbe <_dtoa_r+0xb56>
 8007bb6:	f10a 0308 	add.w	r3, sl, #8
 8007bba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	b017      	add	sp, #92	@ 0x5c
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f77f ae2e 	ble.w	800782a <_dtoa_r+0x7c2>
 8007bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	e64d      	b.n	8007872 <_dtoa_r+0x80a>
 8007bd6:	f1bb 0f00 	cmp.w	fp, #0
 8007bda:	f77f aed9 	ble.w	8007990 <_dtoa_r+0x928>
 8007bde:	4656      	mov	r6, sl
 8007be0:	4621      	mov	r1, r4
 8007be2:	9803      	ldr	r0, [sp, #12]
 8007be4:	f7ff f9b6 	bl	8006f54 <quorem>
 8007be8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007bec:	f806 3b01 	strb.w	r3, [r6], #1
 8007bf0:	eba6 020a 	sub.w	r2, r6, sl
 8007bf4:	4593      	cmp	fp, r2
 8007bf6:	ddb4      	ble.n	8007b62 <_dtoa_r+0xafa>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	220a      	movs	r2, #10
 8007bfc:	4648      	mov	r0, r9
 8007bfe:	9903      	ldr	r1, [sp, #12]
 8007c00:	f000 fa98 	bl	8008134 <__multadd>
 8007c04:	9003      	str	r0, [sp, #12]
 8007c06:	e7eb      	b.n	8007be0 <_dtoa_r+0xb78>
 8007c08:	08008eb6 	.word	0x08008eb6
 8007c0c:	08008e3a 	.word	0x08008e3a

08007c10 <_free_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d040      	beq.n	8007c9a <_free_r+0x8a>
 8007c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1c:	1f0c      	subs	r4, r1, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfb8      	it	lt
 8007c22:	18e4      	addlt	r4, r4, r3
 8007c24:	f7fe ffbc 	bl	8006ba0 <__malloc_lock>
 8007c28:	4a1c      	ldr	r2, [pc, #112]	@ (8007c9c <_free_r+0x8c>)
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	b933      	cbnz	r3, 8007c3c <_free_r+0x2c>
 8007c2e:	6063      	str	r3, [r4, #4]
 8007c30:	6014      	str	r4, [r2, #0]
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c38:	f7fe bfb8 	b.w	8006bac <__malloc_unlock>
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	d908      	bls.n	8007c52 <_free_r+0x42>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf01      	itttt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	1809      	addeq	r1, r1, r0
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	e7ed      	b.n	8007c2e <_free_r+0x1e>
 8007c52:	461a      	mov	r2, r3
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b10b      	cbz	r3, 8007c5c <_free_r+0x4c>
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d9fa      	bls.n	8007c52 <_free_r+0x42>
 8007c5c:	6811      	ldr	r1, [r2, #0]
 8007c5e:	1850      	adds	r0, r2, r1
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d10b      	bne.n	8007c7c <_free_r+0x6c>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	4401      	add	r1, r0
 8007c68:	1850      	adds	r0, r2, r1
 8007c6a:	4283      	cmp	r3, r0
 8007c6c:	6011      	str	r1, [r2, #0]
 8007c6e:	d1e0      	bne.n	8007c32 <_free_r+0x22>
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4408      	add	r0, r1
 8007c76:	6010      	str	r0, [r2, #0]
 8007c78:	6053      	str	r3, [r2, #4]
 8007c7a:	e7da      	b.n	8007c32 <_free_r+0x22>
 8007c7c:	d902      	bls.n	8007c84 <_free_r+0x74>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	e7d6      	b.n	8007c32 <_free_r+0x22>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	bf01      	itttt	eq
 8007c8c:	6819      	ldreq	r1, [r3, #0]
 8007c8e:	685b      	ldreq	r3, [r3, #4]
 8007c90:	1809      	addeq	r1, r1, r0
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	6063      	str	r3, [r4, #4]
 8007c96:	6054      	str	r4, [r2, #4]
 8007c98:	e7cb      	b.n	8007c32 <_free_r+0x22>
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000398 	.word	0x20000398

08007ca0 <__sfputc_r>:
 8007ca0:	6893      	ldr	r3, [r2, #8]
 8007ca2:	b410      	push	{r4}
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	6093      	str	r3, [r2, #8]
 8007caa:	da07      	bge.n	8007cbc <__sfputc_r+0x1c>
 8007cac:	6994      	ldr	r4, [r2, #24]
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	db01      	blt.n	8007cb6 <__sfputc_r+0x16>
 8007cb2:	290a      	cmp	r1, #10
 8007cb4:	d102      	bne.n	8007cbc <__sfputc_r+0x1c>
 8007cb6:	bc10      	pop	{r4}
 8007cb8:	f000 bd97 	b.w	80087ea <__swbuf_r>
 8007cbc:	6813      	ldr	r3, [r2, #0]
 8007cbe:	1c58      	adds	r0, r3, #1
 8007cc0:	6010      	str	r0, [r2, #0]
 8007cc2:	7019      	strb	r1, [r3, #0]
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	bc10      	pop	{r4}
 8007cc8:	4770      	bx	lr

08007cca <__sfputs_r>:
 8007cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ccc:	4606      	mov	r6, r0
 8007cce:	460f      	mov	r7, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	18d5      	adds	r5, r2, r3
 8007cd4:	42ac      	cmp	r4, r5
 8007cd6:	d101      	bne.n	8007cdc <__sfputs_r+0x12>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e007      	b.n	8007cec <__sfputs_r+0x22>
 8007cdc:	463a      	mov	r2, r7
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce4:	f7ff ffdc 	bl	8007ca0 <__sfputc_r>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d1f3      	bne.n	8007cd4 <__sfputs_r+0xa>
 8007cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cf0 <_vfiprintf_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	460d      	mov	r5, r1
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	4698      	mov	r8, r3
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	b09d      	sub	sp, #116	@ 0x74
 8007cfe:	b118      	cbz	r0, 8007d08 <_vfiprintf_r+0x18>
 8007d00:	6a03      	ldr	r3, [r0, #32]
 8007d02:	b90b      	cbnz	r3, 8007d08 <_vfiprintf_r+0x18>
 8007d04:	f7fe ffe4 	bl	8006cd0 <__sinit>
 8007d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d0a:	07d9      	lsls	r1, r3, #31
 8007d0c:	d405      	bmi.n	8007d1a <_vfiprintf_r+0x2a>
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	059a      	lsls	r2, r3, #22
 8007d12:	d402      	bmi.n	8007d1a <_vfiprintf_r+0x2a>
 8007d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d16:	f7ff f908 	bl	8006f2a <__retarget_lock_acquire_recursive>
 8007d1a:	89ab      	ldrh	r3, [r5, #12]
 8007d1c:	071b      	lsls	r3, r3, #28
 8007d1e:	d501      	bpl.n	8007d24 <_vfiprintf_r+0x34>
 8007d20:	692b      	ldr	r3, [r5, #16]
 8007d22:	b99b      	cbnz	r3, 8007d4c <_vfiprintf_r+0x5c>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 fd9e 	bl	8008868 <__swsetup_r>
 8007d2c:	b170      	cbz	r0, 8007d4c <_vfiprintf_r+0x5c>
 8007d2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d30:	07dc      	lsls	r4, r3, #31
 8007d32:	d504      	bpl.n	8007d3e <_vfiprintf_r+0x4e>
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d38:	b01d      	add	sp, #116	@ 0x74
 8007d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	0598      	lsls	r0, r3, #22
 8007d42:	d4f7      	bmi.n	8007d34 <_vfiprintf_r+0x44>
 8007d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d46:	f7ff f8f1 	bl	8006f2c <__retarget_lock_release_recursive>
 8007d4a:	e7f3      	b.n	8007d34 <_vfiprintf_r+0x44>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d50:	2320      	movs	r3, #32
 8007d52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d56:	2330      	movs	r3, #48	@ 0x30
 8007d58:	f04f 0901 	mov.w	r9, #1
 8007d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007f0c <_vfiprintf_r+0x21c>
 8007d64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d68:	4623      	mov	r3, r4
 8007d6a:	469a      	mov	sl, r3
 8007d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d70:	b10a      	cbz	r2, 8007d76 <_vfiprintf_r+0x86>
 8007d72:	2a25      	cmp	r2, #37	@ 0x25
 8007d74:	d1f9      	bne.n	8007d6a <_vfiprintf_r+0x7a>
 8007d76:	ebba 0b04 	subs.w	fp, sl, r4
 8007d7a:	d00b      	beq.n	8007d94 <_vfiprintf_r+0xa4>
 8007d7c:	465b      	mov	r3, fp
 8007d7e:	4622      	mov	r2, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff ffa1 	bl	8007cca <__sfputs_r>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f000 80a7 	beq.w	8007edc <_vfiprintf_r+0x1ec>
 8007d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d90:	445a      	add	r2, fp
 8007d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d94:	f89a 3000 	ldrb.w	r3, [sl]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 809f 	beq.w	8007edc <_vfiprintf_r+0x1ec>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da8:	f10a 0a01 	add.w	sl, sl, #1
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	9307      	str	r3, [sp, #28]
 8007db0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007db4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007db6:	4654      	mov	r4, sl
 8007db8:	2205      	movs	r2, #5
 8007dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dbe:	4853      	ldr	r0, [pc, #332]	@ (8007f0c <_vfiprintf_r+0x21c>)
 8007dc0:	f7ff f8ba 	bl	8006f38 <memchr>
 8007dc4:	9a04      	ldr	r2, [sp, #16]
 8007dc6:	b9d8      	cbnz	r0, 8007e00 <_vfiprintf_r+0x110>
 8007dc8:	06d1      	lsls	r1, r2, #27
 8007dca:	bf44      	itt	mi
 8007dcc:	2320      	movmi	r3, #32
 8007dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dd2:	0713      	lsls	r3, r2, #28
 8007dd4:	bf44      	itt	mi
 8007dd6:	232b      	movmi	r3, #43	@ 0x2b
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8007de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007de2:	d015      	beq.n	8007e10 <_vfiprintf_r+0x120>
 8007de4:	4654      	mov	r4, sl
 8007de6:	2000      	movs	r0, #0
 8007de8:	f04f 0c0a 	mov.w	ip, #10
 8007dec:	9a07      	ldr	r2, [sp, #28]
 8007dee:	4621      	mov	r1, r4
 8007df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df4:	3b30      	subs	r3, #48	@ 0x30
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d94b      	bls.n	8007e92 <_vfiprintf_r+0x1a2>
 8007dfa:	b1b0      	cbz	r0, 8007e2a <_vfiprintf_r+0x13a>
 8007dfc:	9207      	str	r2, [sp, #28]
 8007dfe:	e014      	b.n	8007e2a <_vfiprintf_r+0x13a>
 8007e00:	eba0 0308 	sub.w	r3, r0, r8
 8007e04:	fa09 f303 	lsl.w	r3, r9, r3
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	46a2      	mov	sl, r4
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	e7d2      	b.n	8007db6 <_vfiprintf_r+0xc6>
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	1d19      	adds	r1, r3, #4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	9103      	str	r1, [sp, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bfbb      	ittet	lt
 8007e1c:	425b      	neglt	r3, r3
 8007e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e22:	9307      	strge	r3, [sp, #28]
 8007e24:	9307      	strlt	r3, [sp, #28]
 8007e26:	bfb8      	it	lt
 8007e28:	9204      	strlt	r2, [sp, #16]
 8007e2a:	7823      	ldrb	r3, [r4, #0]
 8007e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e2e:	d10a      	bne.n	8007e46 <_vfiprintf_r+0x156>
 8007e30:	7863      	ldrb	r3, [r4, #1]
 8007e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e34:	d132      	bne.n	8007e9c <_vfiprintf_r+0x1ac>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	3402      	adds	r4, #2
 8007e3a:	1d1a      	adds	r2, r3, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	9203      	str	r2, [sp, #12]
 8007e40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e44:	9305      	str	r3, [sp, #20]
 8007e46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007f10 <_vfiprintf_r+0x220>
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	7821      	ldrb	r1, [r4, #0]
 8007e50:	f7ff f872 	bl	8006f38 <memchr>
 8007e54:	b138      	cbz	r0, 8007e66 <_vfiprintf_r+0x176>
 8007e56:	2240      	movs	r2, #64	@ 0x40
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	eba0 000a 	sub.w	r0, r0, sl
 8007e5e:	4082      	lsls	r2, r0
 8007e60:	4313      	orrs	r3, r2
 8007e62:	3401      	adds	r4, #1
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6a:	2206      	movs	r2, #6
 8007e6c:	4829      	ldr	r0, [pc, #164]	@ (8007f14 <_vfiprintf_r+0x224>)
 8007e6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e72:	f7ff f861 	bl	8006f38 <memchr>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d03f      	beq.n	8007efa <_vfiprintf_r+0x20a>
 8007e7a:	4b27      	ldr	r3, [pc, #156]	@ (8007f18 <_vfiprintf_r+0x228>)
 8007e7c:	bb1b      	cbnz	r3, 8007ec6 <_vfiprintf_r+0x1d6>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	3307      	adds	r3, #7
 8007e82:	f023 0307 	bic.w	r3, r3, #7
 8007e86:	3308      	adds	r3, #8
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8c:	443b      	add	r3, r7
 8007e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e90:	e76a      	b.n	8007d68 <_vfiprintf_r+0x78>
 8007e92:	460c      	mov	r4, r1
 8007e94:	2001      	movs	r0, #1
 8007e96:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e9a:	e7a8      	b.n	8007dee <_vfiprintf_r+0xfe>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f04f 0c0a 	mov.w	ip, #10
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	3401      	adds	r4, #1
 8007ea6:	9305      	str	r3, [sp, #20]
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eae:	3a30      	subs	r2, #48	@ 0x30
 8007eb0:	2a09      	cmp	r2, #9
 8007eb2:	d903      	bls.n	8007ebc <_vfiprintf_r+0x1cc>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0c6      	beq.n	8007e46 <_vfiprintf_r+0x156>
 8007eb8:	9105      	str	r1, [sp, #20]
 8007eba:	e7c4      	b.n	8007e46 <_vfiprintf_r+0x156>
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ec4:	e7f0      	b.n	8007ea8 <_vfiprintf_r+0x1b8>
 8007ec6:	ab03      	add	r3, sp, #12
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	462a      	mov	r2, r5
 8007ecc:	4630      	mov	r0, r6
 8007ece:	4b13      	ldr	r3, [pc, #76]	@ (8007f1c <_vfiprintf_r+0x22c>)
 8007ed0:	a904      	add	r1, sp, #16
 8007ed2:	f7fe f9f7 	bl	80062c4 <_printf_float>
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	1c78      	adds	r0, r7, #1
 8007eda:	d1d6      	bne.n	8007e8a <_vfiprintf_r+0x19a>
 8007edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ede:	07d9      	lsls	r1, r3, #31
 8007ee0:	d405      	bmi.n	8007eee <_vfiprintf_r+0x1fe>
 8007ee2:	89ab      	ldrh	r3, [r5, #12]
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d402      	bmi.n	8007eee <_vfiprintf_r+0x1fe>
 8007ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eea:	f7ff f81f 	bl	8006f2c <__retarget_lock_release_recursive>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	065b      	lsls	r3, r3, #25
 8007ef2:	f53f af1f 	bmi.w	8007d34 <_vfiprintf_r+0x44>
 8007ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ef8:	e71e      	b.n	8007d38 <_vfiprintf_r+0x48>
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	462a      	mov	r2, r5
 8007f00:	4630      	mov	r0, r6
 8007f02:	4b06      	ldr	r3, [pc, #24]	@ (8007f1c <_vfiprintf_r+0x22c>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	f7fe fd2d 	bl	8006964 <_printf_i>
 8007f0a:	e7e4      	b.n	8007ed6 <_vfiprintf_r+0x1e6>
 8007f0c:	08008ec7 	.word	0x08008ec7
 8007f10:	08008ecd 	.word	0x08008ecd
 8007f14:	08008ed1 	.word	0x08008ed1
 8007f18:	080062c5 	.word	0x080062c5
 8007f1c:	08007ccb 	.word	0x08007ccb

08007f20 <__sflush_r>:
 8007f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	0716      	lsls	r6, r2, #28
 8007f28:	4605      	mov	r5, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	d454      	bmi.n	8007fd8 <__sflush_r+0xb8>
 8007f2e:	684b      	ldr	r3, [r1, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dc02      	bgt.n	8007f3a <__sflush_r+0x1a>
 8007f34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	dd48      	ble.n	8007fcc <__sflush_r+0xac>
 8007f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f3c:	2e00      	cmp	r6, #0
 8007f3e:	d045      	beq.n	8007fcc <__sflush_r+0xac>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f46:	682f      	ldr	r7, [r5, #0]
 8007f48:	6a21      	ldr	r1, [r4, #32]
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	d030      	beq.n	8007fb0 <__sflush_r+0x90>
 8007f4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	0759      	lsls	r1, r3, #29
 8007f54:	d505      	bpl.n	8007f62 <__sflush_r+0x42>
 8007f56:	6863      	ldr	r3, [r4, #4]
 8007f58:	1ad2      	subs	r2, r2, r3
 8007f5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f5c:	b10b      	cbz	r3, 8007f62 <__sflush_r+0x42>
 8007f5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f60:	1ad2      	subs	r2, r2, r3
 8007f62:	2300      	movs	r3, #0
 8007f64:	4628      	mov	r0, r5
 8007f66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f68:	6a21      	ldr	r1, [r4, #32]
 8007f6a:	47b0      	blx	r6
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	d106      	bne.n	8007f80 <__sflush_r+0x60>
 8007f72:	6829      	ldr	r1, [r5, #0]
 8007f74:	291d      	cmp	r1, #29
 8007f76:	d82b      	bhi.n	8007fd0 <__sflush_r+0xb0>
 8007f78:	4a28      	ldr	r2, [pc, #160]	@ (800801c <__sflush_r+0xfc>)
 8007f7a:	40ca      	lsrs	r2, r1
 8007f7c:	07d6      	lsls	r6, r2, #31
 8007f7e:	d527      	bpl.n	8007fd0 <__sflush_r+0xb0>
 8007f80:	2200      	movs	r2, #0
 8007f82:	6062      	str	r2, [r4, #4]
 8007f84:	6922      	ldr	r2, [r4, #16]
 8007f86:	04d9      	lsls	r1, r3, #19
 8007f88:	6022      	str	r2, [r4, #0]
 8007f8a:	d504      	bpl.n	8007f96 <__sflush_r+0x76>
 8007f8c:	1c42      	adds	r2, r0, #1
 8007f8e:	d101      	bne.n	8007f94 <__sflush_r+0x74>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b903      	cbnz	r3, 8007f96 <__sflush_r+0x76>
 8007f94:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f98:	602f      	str	r7, [r5, #0]
 8007f9a:	b1b9      	cbz	r1, 8007fcc <__sflush_r+0xac>
 8007f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fa0:	4299      	cmp	r1, r3
 8007fa2:	d002      	beq.n	8007faa <__sflush_r+0x8a>
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f7ff fe33 	bl	8007c10 <_free_r>
 8007faa:	2300      	movs	r3, #0
 8007fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fae:	e00d      	b.n	8007fcc <__sflush_r+0xac>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b0      	blx	r6
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	1c50      	adds	r0, r2, #1
 8007fba:	d1c9      	bne.n	8007f50 <__sflush_r+0x30>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0c6      	beq.n	8007f50 <__sflush_r+0x30>
 8007fc2:	2b1d      	cmp	r3, #29
 8007fc4:	d001      	beq.n	8007fca <__sflush_r+0xaa>
 8007fc6:	2b16      	cmp	r3, #22
 8007fc8:	d11d      	bne.n	8008006 <__sflush_r+0xe6>
 8007fca:	602f      	str	r7, [r5, #0]
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e021      	b.n	8008014 <__sflush_r+0xf4>
 8007fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd4:	b21b      	sxth	r3, r3
 8007fd6:	e01a      	b.n	800800e <__sflush_r+0xee>
 8007fd8:	690f      	ldr	r7, [r1, #16]
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	d0f6      	beq.n	8007fcc <__sflush_r+0xac>
 8007fde:	0793      	lsls	r3, r2, #30
 8007fe0:	bf18      	it	ne
 8007fe2:	2300      	movne	r3, #0
 8007fe4:	680e      	ldr	r6, [r1, #0]
 8007fe6:	bf08      	it	eq
 8007fe8:	694b      	ldreq	r3, [r1, #20]
 8007fea:	1bf6      	subs	r6, r6, r7
 8007fec:	600f      	str	r7, [r1, #0]
 8007fee:	608b      	str	r3, [r1, #8]
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	ddeb      	ble.n	8007fcc <__sflush_r+0xac>
 8007ff4:	4633      	mov	r3, r6
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	6a21      	ldr	r1, [r4, #32]
 8007ffc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008000:	47e0      	blx	ip
 8008002:	2800      	cmp	r0, #0
 8008004:	dc07      	bgt.n	8008016 <__sflush_r+0xf6>
 8008006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800800e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008016:	4407      	add	r7, r0
 8008018:	1a36      	subs	r6, r6, r0
 800801a:	e7e9      	b.n	8007ff0 <__sflush_r+0xd0>
 800801c:	20400001 	.word	0x20400001

08008020 <_fflush_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	690b      	ldr	r3, [r1, #16]
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	b913      	cbnz	r3, 8008030 <_fflush_r+0x10>
 800802a:	2500      	movs	r5, #0
 800802c:	4628      	mov	r0, r5
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	b118      	cbz	r0, 800803a <_fflush_r+0x1a>
 8008032:	6a03      	ldr	r3, [r0, #32]
 8008034:	b90b      	cbnz	r3, 800803a <_fflush_r+0x1a>
 8008036:	f7fe fe4b 	bl	8006cd0 <__sinit>
 800803a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f3      	beq.n	800802a <_fflush_r+0xa>
 8008042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008044:	07d0      	lsls	r0, r2, #31
 8008046:	d404      	bmi.n	8008052 <_fflush_r+0x32>
 8008048:	0599      	lsls	r1, r3, #22
 800804a:	d402      	bmi.n	8008052 <_fflush_r+0x32>
 800804c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800804e:	f7fe ff6c 	bl	8006f2a <__retarget_lock_acquire_recursive>
 8008052:	4628      	mov	r0, r5
 8008054:	4621      	mov	r1, r4
 8008056:	f7ff ff63 	bl	8007f20 <__sflush_r>
 800805a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800805c:	4605      	mov	r5, r0
 800805e:	07da      	lsls	r2, r3, #31
 8008060:	d4e4      	bmi.n	800802c <_fflush_r+0xc>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	059b      	lsls	r3, r3, #22
 8008066:	d4e1      	bmi.n	800802c <_fflush_r+0xc>
 8008068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800806a:	f7fe ff5f 	bl	8006f2c <__retarget_lock_release_recursive>
 800806e:	e7dd      	b.n	800802c <_fflush_r+0xc>

08008070 <_Balloc>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	69c6      	ldr	r6, [r0, #28]
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	b976      	cbnz	r6, 8008098 <_Balloc+0x28>
 800807a:	2010      	movs	r0, #16
 800807c:	f7fe fb4e 	bl	800671c <malloc>
 8008080:	4602      	mov	r2, r0
 8008082:	61e0      	str	r0, [r4, #28]
 8008084:	b920      	cbnz	r0, 8008090 <_Balloc+0x20>
 8008086:	216b      	movs	r1, #107	@ 0x6b
 8008088:	4b17      	ldr	r3, [pc, #92]	@ (80080e8 <_Balloc+0x78>)
 800808a:	4818      	ldr	r0, [pc, #96]	@ (80080ec <_Balloc+0x7c>)
 800808c:	f000 fd1a 	bl	8008ac4 <__assert_func>
 8008090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008094:	6006      	str	r6, [r0, #0]
 8008096:	60c6      	str	r6, [r0, #12]
 8008098:	69e6      	ldr	r6, [r4, #28]
 800809a:	68f3      	ldr	r3, [r6, #12]
 800809c:	b183      	cbz	r3, 80080c0 <_Balloc+0x50>
 800809e:	69e3      	ldr	r3, [r4, #28]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080a6:	b9b8      	cbnz	r0, 80080d8 <_Balloc+0x68>
 80080a8:	2101      	movs	r1, #1
 80080aa:	fa01 f605 	lsl.w	r6, r1, r5
 80080ae:	1d72      	adds	r2, r6, #5
 80080b0:	4620      	mov	r0, r4
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	f000 fd24 	bl	8008b00 <_calloc_r>
 80080b8:	b160      	cbz	r0, 80080d4 <_Balloc+0x64>
 80080ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080be:	e00e      	b.n	80080de <_Balloc+0x6e>
 80080c0:	2221      	movs	r2, #33	@ 0x21
 80080c2:	2104      	movs	r1, #4
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fd1b 	bl	8008b00 <_calloc_r>
 80080ca:	69e3      	ldr	r3, [r4, #28]
 80080cc:	60f0      	str	r0, [r6, #12]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e4      	bne.n	800809e <_Balloc+0x2e>
 80080d4:	2000      	movs	r0, #0
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	6802      	ldr	r2, [r0, #0]
 80080da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080de:	2300      	movs	r3, #0
 80080e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080e4:	e7f7      	b.n	80080d6 <_Balloc+0x66>
 80080e6:	bf00      	nop
 80080e8:	08008e47 	.word	0x08008e47
 80080ec:	08008ed8 	.word	0x08008ed8

080080f0 <_Bfree>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	69c6      	ldr	r6, [r0, #28]
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b976      	cbnz	r6, 8008118 <_Bfree+0x28>
 80080fa:	2010      	movs	r0, #16
 80080fc:	f7fe fb0e 	bl	800671c <malloc>
 8008100:	4602      	mov	r2, r0
 8008102:	61e8      	str	r0, [r5, #28]
 8008104:	b920      	cbnz	r0, 8008110 <_Bfree+0x20>
 8008106:	218f      	movs	r1, #143	@ 0x8f
 8008108:	4b08      	ldr	r3, [pc, #32]	@ (800812c <_Bfree+0x3c>)
 800810a:	4809      	ldr	r0, [pc, #36]	@ (8008130 <_Bfree+0x40>)
 800810c:	f000 fcda 	bl	8008ac4 <__assert_func>
 8008110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008114:	6006      	str	r6, [r0, #0]
 8008116:	60c6      	str	r6, [r0, #12]
 8008118:	b13c      	cbz	r4, 800812a <_Bfree+0x3a>
 800811a:	69eb      	ldr	r3, [r5, #28]
 800811c:	6862      	ldr	r2, [r4, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008124:	6021      	str	r1, [r4, #0]
 8008126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	08008e47 	.word	0x08008e47
 8008130:	08008ed8 	.word	0x08008ed8

08008134 <__multadd>:
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	4607      	mov	r7, r0
 800813a:	460c      	mov	r4, r1
 800813c:	461e      	mov	r6, r3
 800813e:	2000      	movs	r0, #0
 8008140:	690d      	ldr	r5, [r1, #16]
 8008142:	f101 0c14 	add.w	ip, r1, #20
 8008146:	f8dc 3000 	ldr.w	r3, [ip]
 800814a:	3001      	adds	r0, #1
 800814c:	b299      	uxth	r1, r3
 800814e:	fb02 6101 	mla	r1, r2, r1, r6
 8008152:	0c1e      	lsrs	r6, r3, #16
 8008154:	0c0b      	lsrs	r3, r1, #16
 8008156:	fb02 3306 	mla	r3, r2, r6, r3
 800815a:	b289      	uxth	r1, r1
 800815c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008160:	4285      	cmp	r5, r0
 8008162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008166:	f84c 1b04 	str.w	r1, [ip], #4
 800816a:	dcec      	bgt.n	8008146 <__multadd+0x12>
 800816c:	b30e      	cbz	r6, 80081b2 <__multadd+0x7e>
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	42ab      	cmp	r3, r5
 8008172:	dc19      	bgt.n	80081a8 <__multadd+0x74>
 8008174:	6861      	ldr	r1, [r4, #4]
 8008176:	4638      	mov	r0, r7
 8008178:	3101      	adds	r1, #1
 800817a:	f7ff ff79 	bl	8008070 <_Balloc>
 800817e:	4680      	mov	r8, r0
 8008180:	b928      	cbnz	r0, 800818e <__multadd+0x5a>
 8008182:	4602      	mov	r2, r0
 8008184:	21ba      	movs	r1, #186	@ 0xba
 8008186:	4b0c      	ldr	r3, [pc, #48]	@ (80081b8 <__multadd+0x84>)
 8008188:	480c      	ldr	r0, [pc, #48]	@ (80081bc <__multadd+0x88>)
 800818a:	f000 fc9b 	bl	8008ac4 <__assert_func>
 800818e:	6922      	ldr	r2, [r4, #16]
 8008190:	f104 010c 	add.w	r1, r4, #12
 8008194:	3202      	adds	r2, #2
 8008196:	0092      	lsls	r2, r2, #2
 8008198:	300c      	adds	r0, #12
 800819a:	f000 fc85 	bl	8008aa8 <memcpy>
 800819e:	4621      	mov	r1, r4
 80081a0:	4638      	mov	r0, r7
 80081a2:	f7ff ffa5 	bl	80080f0 <_Bfree>
 80081a6:	4644      	mov	r4, r8
 80081a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081ac:	3501      	adds	r5, #1
 80081ae:	615e      	str	r6, [r3, #20]
 80081b0:	6125      	str	r5, [r4, #16]
 80081b2:	4620      	mov	r0, r4
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	08008eb6 	.word	0x08008eb6
 80081bc:	08008ed8 	.word	0x08008ed8

080081c0 <__hi0bits>:
 80081c0:	4603      	mov	r3, r0
 80081c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081c6:	bf3a      	itte	cc
 80081c8:	0403      	lslcc	r3, r0, #16
 80081ca:	2010      	movcc	r0, #16
 80081cc:	2000      	movcs	r0, #0
 80081ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081d2:	bf3c      	itt	cc
 80081d4:	021b      	lslcc	r3, r3, #8
 80081d6:	3008      	addcc	r0, #8
 80081d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081dc:	bf3c      	itt	cc
 80081de:	011b      	lslcc	r3, r3, #4
 80081e0:	3004      	addcc	r0, #4
 80081e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e6:	bf3c      	itt	cc
 80081e8:	009b      	lslcc	r3, r3, #2
 80081ea:	3002      	addcc	r0, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	db05      	blt.n	80081fc <__hi0bits+0x3c>
 80081f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081f4:	f100 0001 	add.w	r0, r0, #1
 80081f8:	bf08      	it	eq
 80081fa:	2020      	moveq	r0, #32
 80081fc:	4770      	bx	lr

080081fe <__lo0bits>:
 80081fe:	6803      	ldr	r3, [r0, #0]
 8008200:	4602      	mov	r2, r0
 8008202:	f013 0007 	ands.w	r0, r3, #7
 8008206:	d00b      	beq.n	8008220 <__lo0bits+0x22>
 8008208:	07d9      	lsls	r1, r3, #31
 800820a:	d421      	bmi.n	8008250 <__lo0bits+0x52>
 800820c:	0798      	lsls	r0, r3, #30
 800820e:	bf49      	itett	mi
 8008210:	085b      	lsrmi	r3, r3, #1
 8008212:	089b      	lsrpl	r3, r3, #2
 8008214:	2001      	movmi	r0, #1
 8008216:	6013      	strmi	r3, [r2, #0]
 8008218:	bf5c      	itt	pl
 800821a:	2002      	movpl	r0, #2
 800821c:	6013      	strpl	r3, [r2, #0]
 800821e:	4770      	bx	lr
 8008220:	b299      	uxth	r1, r3
 8008222:	b909      	cbnz	r1, 8008228 <__lo0bits+0x2a>
 8008224:	2010      	movs	r0, #16
 8008226:	0c1b      	lsrs	r3, r3, #16
 8008228:	b2d9      	uxtb	r1, r3
 800822a:	b909      	cbnz	r1, 8008230 <__lo0bits+0x32>
 800822c:	3008      	adds	r0, #8
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	0719      	lsls	r1, r3, #28
 8008232:	bf04      	itt	eq
 8008234:	091b      	lsreq	r3, r3, #4
 8008236:	3004      	addeq	r0, #4
 8008238:	0799      	lsls	r1, r3, #30
 800823a:	bf04      	itt	eq
 800823c:	089b      	lsreq	r3, r3, #2
 800823e:	3002      	addeq	r0, #2
 8008240:	07d9      	lsls	r1, r3, #31
 8008242:	d403      	bmi.n	800824c <__lo0bits+0x4e>
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	f100 0001 	add.w	r0, r0, #1
 800824a:	d003      	beq.n	8008254 <__lo0bits+0x56>
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	4770      	bx	lr
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	2020      	movs	r0, #32
 8008256:	4770      	bx	lr

08008258 <__i2b>:
 8008258:	b510      	push	{r4, lr}
 800825a:	460c      	mov	r4, r1
 800825c:	2101      	movs	r1, #1
 800825e:	f7ff ff07 	bl	8008070 <_Balloc>
 8008262:	4602      	mov	r2, r0
 8008264:	b928      	cbnz	r0, 8008272 <__i2b+0x1a>
 8008266:	f240 1145 	movw	r1, #325	@ 0x145
 800826a:	4b04      	ldr	r3, [pc, #16]	@ (800827c <__i2b+0x24>)
 800826c:	4804      	ldr	r0, [pc, #16]	@ (8008280 <__i2b+0x28>)
 800826e:	f000 fc29 	bl	8008ac4 <__assert_func>
 8008272:	2301      	movs	r3, #1
 8008274:	6144      	str	r4, [r0, #20]
 8008276:	6103      	str	r3, [r0, #16]
 8008278:	bd10      	pop	{r4, pc}
 800827a:	bf00      	nop
 800827c:	08008eb6 	.word	0x08008eb6
 8008280:	08008ed8 	.word	0x08008ed8

08008284 <__multiply>:
 8008284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008288:	4617      	mov	r7, r2
 800828a:	690a      	ldr	r2, [r1, #16]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4689      	mov	r9, r1
 8008290:	429a      	cmp	r2, r3
 8008292:	bfa2      	ittt	ge
 8008294:	463b      	movge	r3, r7
 8008296:	460f      	movge	r7, r1
 8008298:	4699      	movge	r9, r3
 800829a:	693d      	ldr	r5, [r7, #16]
 800829c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	eb05 060a 	add.w	r6, r5, sl
 80082a8:	42b3      	cmp	r3, r6
 80082aa:	b085      	sub	sp, #20
 80082ac:	bfb8      	it	lt
 80082ae:	3101      	addlt	r1, #1
 80082b0:	f7ff fede 	bl	8008070 <_Balloc>
 80082b4:	b930      	cbnz	r0, 80082c4 <__multiply+0x40>
 80082b6:	4602      	mov	r2, r0
 80082b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082bc:	4b40      	ldr	r3, [pc, #256]	@ (80083c0 <__multiply+0x13c>)
 80082be:	4841      	ldr	r0, [pc, #260]	@ (80083c4 <__multiply+0x140>)
 80082c0:	f000 fc00 	bl	8008ac4 <__assert_func>
 80082c4:	f100 0414 	add.w	r4, r0, #20
 80082c8:	4623      	mov	r3, r4
 80082ca:	2200      	movs	r2, #0
 80082cc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80082d0:	4573      	cmp	r3, lr
 80082d2:	d320      	bcc.n	8008316 <__multiply+0x92>
 80082d4:	f107 0814 	add.w	r8, r7, #20
 80082d8:	f109 0114 	add.w	r1, r9, #20
 80082dc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80082e0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80082e4:	9302      	str	r3, [sp, #8]
 80082e6:	1beb      	subs	r3, r5, r7
 80082e8:	3b15      	subs	r3, #21
 80082ea:	f023 0303 	bic.w	r3, r3, #3
 80082ee:	3304      	adds	r3, #4
 80082f0:	3715      	adds	r7, #21
 80082f2:	42bd      	cmp	r5, r7
 80082f4:	bf38      	it	cc
 80082f6:	2304      	movcc	r3, #4
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	9b02      	ldr	r3, [sp, #8]
 80082fc:	9103      	str	r1, [sp, #12]
 80082fe:	428b      	cmp	r3, r1
 8008300:	d80c      	bhi.n	800831c <__multiply+0x98>
 8008302:	2e00      	cmp	r6, #0
 8008304:	dd03      	ble.n	800830e <__multiply+0x8a>
 8008306:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800830a:	2b00      	cmp	r3, #0
 800830c:	d055      	beq.n	80083ba <__multiply+0x136>
 800830e:	6106      	str	r6, [r0, #16]
 8008310:	b005      	add	sp, #20
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	f843 2b04 	str.w	r2, [r3], #4
 800831a:	e7d9      	b.n	80082d0 <__multiply+0x4c>
 800831c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008320:	f1ba 0f00 	cmp.w	sl, #0
 8008324:	d01f      	beq.n	8008366 <__multiply+0xe2>
 8008326:	46c4      	mov	ip, r8
 8008328:	46a1      	mov	r9, r4
 800832a:	2700      	movs	r7, #0
 800832c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008330:	f8d9 3000 	ldr.w	r3, [r9]
 8008334:	fa1f fb82 	uxth.w	fp, r2
 8008338:	b29b      	uxth	r3, r3
 800833a:	fb0a 330b 	mla	r3, sl, fp, r3
 800833e:	443b      	add	r3, r7
 8008340:	f8d9 7000 	ldr.w	r7, [r9]
 8008344:	0c12      	lsrs	r2, r2, #16
 8008346:	0c3f      	lsrs	r7, r7, #16
 8008348:	fb0a 7202 	mla	r2, sl, r2, r7
 800834c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008350:	b29b      	uxth	r3, r3
 8008352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008356:	4565      	cmp	r5, ip
 8008358:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800835c:	f849 3b04 	str.w	r3, [r9], #4
 8008360:	d8e4      	bhi.n	800832c <__multiply+0xa8>
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	50e7      	str	r7, [r4, r3]
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	3104      	adds	r1, #4
 800836a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800836e:	f1b9 0f00 	cmp.w	r9, #0
 8008372:	d020      	beq.n	80083b6 <__multiply+0x132>
 8008374:	4647      	mov	r7, r8
 8008376:	46a4      	mov	ip, r4
 8008378:	f04f 0a00 	mov.w	sl, #0
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	f8b7 b000 	ldrh.w	fp, [r7]
 8008382:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008386:	b29b      	uxth	r3, r3
 8008388:	fb09 220b 	mla	r2, r9, fp, r2
 800838c:	4452      	add	r2, sl
 800838e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008392:	f84c 3b04 	str.w	r3, [ip], #4
 8008396:	f857 3b04 	ldr.w	r3, [r7], #4
 800839a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800839e:	f8bc 3000 	ldrh.w	r3, [ip]
 80083a2:	42bd      	cmp	r5, r7
 80083a4:	fb09 330a 	mla	r3, r9, sl, r3
 80083a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80083ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083b0:	d8e5      	bhi.n	800837e <__multiply+0xfa>
 80083b2:	9a01      	ldr	r2, [sp, #4]
 80083b4:	50a3      	str	r3, [r4, r2]
 80083b6:	3404      	adds	r4, #4
 80083b8:	e79f      	b.n	80082fa <__multiply+0x76>
 80083ba:	3e01      	subs	r6, #1
 80083bc:	e7a1      	b.n	8008302 <__multiply+0x7e>
 80083be:	bf00      	nop
 80083c0:	08008eb6 	.word	0x08008eb6
 80083c4:	08008ed8 	.word	0x08008ed8

080083c8 <__pow5mult>:
 80083c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083cc:	4615      	mov	r5, r2
 80083ce:	f012 0203 	ands.w	r2, r2, #3
 80083d2:	4607      	mov	r7, r0
 80083d4:	460e      	mov	r6, r1
 80083d6:	d007      	beq.n	80083e8 <__pow5mult+0x20>
 80083d8:	4c25      	ldr	r4, [pc, #148]	@ (8008470 <__pow5mult+0xa8>)
 80083da:	3a01      	subs	r2, #1
 80083dc:	2300      	movs	r3, #0
 80083de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083e2:	f7ff fea7 	bl	8008134 <__multadd>
 80083e6:	4606      	mov	r6, r0
 80083e8:	10ad      	asrs	r5, r5, #2
 80083ea:	d03d      	beq.n	8008468 <__pow5mult+0xa0>
 80083ec:	69fc      	ldr	r4, [r7, #28]
 80083ee:	b97c      	cbnz	r4, 8008410 <__pow5mult+0x48>
 80083f0:	2010      	movs	r0, #16
 80083f2:	f7fe f993 	bl	800671c <malloc>
 80083f6:	4602      	mov	r2, r0
 80083f8:	61f8      	str	r0, [r7, #28]
 80083fa:	b928      	cbnz	r0, 8008408 <__pow5mult+0x40>
 80083fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008400:	4b1c      	ldr	r3, [pc, #112]	@ (8008474 <__pow5mult+0xac>)
 8008402:	481d      	ldr	r0, [pc, #116]	@ (8008478 <__pow5mult+0xb0>)
 8008404:	f000 fb5e 	bl	8008ac4 <__assert_func>
 8008408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800840c:	6004      	str	r4, [r0, #0]
 800840e:	60c4      	str	r4, [r0, #12]
 8008410:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008418:	b94c      	cbnz	r4, 800842e <__pow5mult+0x66>
 800841a:	f240 2171 	movw	r1, #625	@ 0x271
 800841e:	4638      	mov	r0, r7
 8008420:	f7ff ff1a 	bl	8008258 <__i2b>
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	f8c8 0008 	str.w	r0, [r8, #8]
 800842c:	6003      	str	r3, [r0, #0]
 800842e:	f04f 0900 	mov.w	r9, #0
 8008432:	07eb      	lsls	r3, r5, #31
 8008434:	d50a      	bpl.n	800844c <__pow5mult+0x84>
 8008436:	4631      	mov	r1, r6
 8008438:	4622      	mov	r2, r4
 800843a:	4638      	mov	r0, r7
 800843c:	f7ff ff22 	bl	8008284 <__multiply>
 8008440:	4680      	mov	r8, r0
 8008442:	4631      	mov	r1, r6
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff fe53 	bl	80080f0 <_Bfree>
 800844a:	4646      	mov	r6, r8
 800844c:	106d      	asrs	r5, r5, #1
 800844e:	d00b      	beq.n	8008468 <__pow5mult+0xa0>
 8008450:	6820      	ldr	r0, [r4, #0]
 8008452:	b938      	cbnz	r0, 8008464 <__pow5mult+0x9c>
 8008454:	4622      	mov	r2, r4
 8008456:	4621      	mov	r1, r4
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff ff13 	bl	8008284 <__multiply>
 800845e:	6020      	str	r0, [r4, #0]
 8008460:	f8c0 9000 	str.w	r9, [r0]
 8008464:	4604      	mov	r4, r0
 8008466:	e7e4      	b.n	8008432 <__pow5mult+0x6a>
 8008468:	4630      	mov	r0, r6
 800846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846e:	bf00      	nop
 8008470:	08008f78 	.word	0x08008f78
 8008474:	08008e47 	.word	0x08008e47
 8008478:	08008ed8 	.word	0x08008ed8

0800847c <__lshift>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	4607      	mov	r7, r0
 8008484:	4691      	mov	r9, r2
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	6849      	ldr	r1, [r1, #4]
 800848a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008494:	f108 0601 	add.w	r6, r8, #1
 8008498:	42b3      	cmp	r3, r6
 800849a:	db0b      	blt.n	80084b4 <__lshift+0x38>
 800849c:	4638      	mov	r0, r7
 800849e:	f7ff fde7 	bl	8008070 <_Balloc>
 80084a2:	4605      	mov	r5, r0
 80084a4:	b948      	cbnz	r0, 80084ba <__lshift+0x3e>
 80084a6:	4602      	mov	r2, r0
 80084a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084ac:	4b27      	ldr	r3, [pc, #156]	@ (800854c <__lshift+0xd0>)
 80084ae:	4828      	ldr	r0, [pc, #160]	@ (8008550 <__lshift+0xd4>)
 80084b0:	f000 fb08 	bl	8008ac4 <__assert_func>
 80084b4:	3101      	adds	r1, #1
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	e7ee      	b.n	8008498 <__lshift+0x1c>
 80084ba:	2300      	movs	r3, #0
 80084bc:	f100 0114 	add.w	r1, r0, #20
 80084c0:	f100 0210 	add.w	r2, r0, #16
 80084c4:	4618      	mov	r0, r3
 80084c6:	4553      	cmp	r3, sl
 80084c8:	db33      	blt.n	8008532 <__lshift+0xb6>
 80084ca:	6920      	ldr	r0, [r4, #16]
 80084cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084d0:	f104 0314 	add.w	r3, r4, #20
 80084d4:	f019 091f 	ands.w	r9, r9, #31
 80084d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084e0:	d02b      	beq.n	800853a <__lshift+0xbe>
 80084e2:	468a      	mov	sl, r1
 80084e4:	2200      	movs	r2, #0
 80084e6:	f1c9 0e20 	rsb	lr, r9, #32
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	fa00 f009 	lsl.w	r0, r0, r9
 80084f0:	4310      	orrs	r0, r2
 80084f2:	f84a 0b04 	str.w	r0, [sl], #4
 80084f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fa:	459c      	cmp	ip, r3
 80084fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008500:	d8f3      	bhi.n	80084ea <__lshift+0x6e>
 8008502:	ebac 0304 	sub.w	r3, ip, r4
 8008506:	3b15      	subs	r3, #21
 8008508:	f023 0303 	bic.w	r3, r3, #3
 800850c:	3304      	adds	r3, #4
 800850e:	f104 0015 	add.w	r0, r4, #21
 8008512:	4560      	cmp	r0, ip
 8008514:	bf88      	it	hi
 8008516:	2304      	movhi	r3, #4
 8008518:	50ca      	str	r2, [r1, r3]
 800851a:	b10a      	cbz	r2, 8008520 <__lshift+0xa4>
 800851c:	f108 0602 	add.w	r6, r8, #2
 8008520:	3e01      	subs	r6, #1
 8008522:	4638      	mov	r0, r7
 8008524:	4621      	mov	r1, r4
 8008526:	612e      	str	r6, [r5, #16]
 8008528:	f7ff fde2 	bl	80080f0 <_Bfree>
 800852c:	4628      	mov	r0, r5
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	f842 0f04 	str.w	r0, [r2, #4]!
 8008536:	3301      	adds	r3, #1
 8008538:	e7c5      	b.n	80084c6 <__lshift+0x4a>
 800853a:	3904      	subs	r1, #4
 800853c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008540:	459c      	cmp	ip, r3
 8008542:	f841 2f04 	str.w	r2, [r1, #4]!
 8008546:	d8f9      	bhi.n	800853c <__lshift+0xc0>
 8008548:	e7ea      	b.n	8008520 <__lshift+0xa4>
 800854a:	bf00      	nop
 800854c:	08008eb6 	.word	0x08008eb6
 8008550:	08008ed8 	.word	0x08008ed8

08008554 <__mcmp>:
 8008554:	4603      	mov	r3, r0
 8008556:	690a      	ldr	r2, [r1, #16]
 8008558:	6900      	ldr	r0, [r0, #16]
 800855a:	b530      	push	{r4, r5, lr}
 800855c:	1a80      	subs	r0, r0, r2
 800855e:	d10e      	bne.n	800857e <__mcmp+0x2a>
 8008560:	3314      	adds	r3, #20
 8008562:	3114      	adds	r1, #20
 8008564:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008568:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800856c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008570:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008574:	4295      	cmp	r5, r2
 8008576:	d003      	beq.n	8008580 <__mcmp+0x2c>
 8008578:	d205      	bcs.n	8008586 <__mcmp+0x32>
 800857a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800857e:	bd30      	pop	{r4, r5, pc}
 8008580:	42a3      	cmp	r3, r4
 8008582:	d3f3      	bcc.n	800856c <__mcmp+0x18>
 8008584:	e7fb      	b.n	800857e <__mcmp+0x2a>
 8008586:	2001      	movs	r0, #1
 8008588:	e7f9      	b.n	800857e <__mcmp+0x2a>
	...

0800858c <__mdiff>:
 800858c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	4689      	mov	r9, r1
 8008592:	4606      	mov	r6, r0
 8008594:	4611      	mov	r1, r2
 8008596:	4648      	mov	r0, r9
 8008598:	4614      	mov	r4, r2
 800859a:	f7ff ffdb 	bl	8008554 <__mcmp>
 800859e:	1e05      	subs	r5, r0, #0
 80085a0:	d112      	bne.n	80085c8 <__mdiff+0x3c>
 80085a2:	4629      	mov	r1, r5
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff fd63 	bl	8008070 <_Balloc>
 80085aa:	4602      	mov	r2, r0
 80085ac:	b928      	cbnz	r0, 80085ba <__mdiff+0x2e>
 80085ae:	f240 2137 	movw	r1, #567	@ 0x237
 80085b2:	4b3e      	ldr	r3, [pc, #248]	@ (80086ac <__mdiff+0x120>)
 80085b4:	483e      	ldr	r0, [pc, #248]	@ (80086b0 <__mdiff+0x124>)
 80085b6:	f000 fa85 	bl	8008ac4 <__assert_func>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085c0:	4610      	mov	r0, r2
 80085c2:	b003      	add	sp, #12
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	bfbc      	itt	lt
 80085ca:	464b      	movlt	r3, r9
 80085cc:	46a1      	movlt	r9, r4
 80085ce:	4630      	mov	r0, r6
 80085d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085d4:	bfba      	itte	lt
 80085d6:	461c      	movlt	r4, r3
 80085d8:	2501      	movlt	r5, #1
 80085da:	2500      	movge	r5, #0
 80085dc:	f7ff fd48 	bl	8008070 <_Balloc>
 80085e0:	4602      	mov	r2, r0
 80085e2:	b918      	cbnz	r0, 80085ec <__mdiff+0x60>
 80085e4:	f240 2145 	movw	r1, #581	@ 0x245
 80085e8:	4b30      	ldr	r3, [pc, #192]	@ (80086ac <__mdiff+0x120>)
 80085ea:	e7e3      	b.n	80085b4 <__mdiff+0x28>
 80085ec:	f100 0b14 	add.w	fp, r0, #20
 80085f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085f4:	f109 0310 	add.w	r3, r9, #16
 80085f8:	60c5      	str	r5, [r0, #12]
 80085fa:	f04f 0c00 	mov.w	ip, #0
 80085fe:	f109 0514 	add.w	r5, r9, #20
 8008602:	46d9      	mov	r9, fp
 8008604:	6926      	ldr	r6, [r4, #16]
 8008606:	f104 0e14 	add.w	lr, r4, #20
 800860a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800860e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	f85e 0b04 	ldr.w	r0, [lr], #4
 800861a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800861e:	b281      	uxth	r1, r0
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	fa1f f38a 	uxth.w	r3, sl
 8008626:	1a5b      	subs	r3, r3, r1
 8008628:	0c00      	lsrs	r0, r0, #16
 800862a:	4463      	add	r3, ip
 800862c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008630:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008634:	b29b      	uxth	r3, r3
 8008636:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800863a:	4576      	cmp	r6, lr
 800863c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008640:	f849 3b04 	str.w	r3, [r9], #4
 8008644:	d8e6      	bhi.n	8008614 <__mdiff+0x88>
 8008646:	1b33      	subs	r3, r6, r4
 8008648:	3b15      	subs	r3, #21
 800864a:	f023 0303 	bic.w	r3, r3, #3
 800864e:	3415      	adds	r4, #21
 8008650:	3304      	adds	r3, #4
 8008652:	42a6      	cmp	r6, r4
 8008654:	bf38      	it	cc
 8008656:	2304      	movcc	r3, #4
 8008658:	441d      	add	r5, r3
 800865a:	445b      	add	r3, fp
 800865c:	461e      	mov	r6, r3
 800865e:	462c      	mov	r4, r5
 8008660:	4544      	cmp	r4, r8
 8008662:	d30e      	bcc.n	8008682 <__mdiff+0xf6>
 8008664:	f108 0103 	add.w	r1, r8, #3
 8008668:	1b49      	subs	r1, r1, r5
 800866a:	f021 0103 	bic.w	r1, r1, #3
 800866e:	3d03      	subs	r5, #3
 8008670:	45a8      	cmp	r8, r5
 8008672:	bf38      	it	cc
 8008674:	2100      	movcc	r1, #0
 8008676:	440b      	add	r3, r1
 8008678:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800867c:	b199      	cbz	r1, 80086a6 <__mdiff+0x11a>
 800867e:	6117      	str	r7, [r2, #16]
 8008680:	e79e      	b.n	80085c0 <__mdiff+0x34>
 8008682:	46e6      	mov	lr, ip
 8008684:	f854 1b04 	ldr.w	r1, [r4], #4
 8008688:	fa1f fc81 	uxth.w	ip, r1
 800868c:	44f4      	add	ip, lr
 800868e:	0c08      	lsrs	r0, r1, #16
 8008690:	4471      	add	r1, lr
 8008692:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008696:	b289      	uxth	r1, r1
 8008698:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800869c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086a0:	f846 1b04 	str.w	r1, [r6], #4
 80086a4:	e7dc      	b.n	8008660 <__mdiff+0xd4>
 80086a6:	3f01      	subs	r7, #1
 80086a8:	e7e6      	b.n	8008678 <__mdiff+0xec>
 80086aa:	bf00      	nop
 80086ac:	08008eb6 	.word	0x08008eb6
 80086b0:	08008ed8 	.word	0x08008ed8

080086b4 <__d2b>:
 80086b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80086b8:	2101      	movs	r1, #1
 80086ba:	4690      	mov	r8, r2
 80086bc:	4699      	mov	r9, r3
 80086be:	9e08      	ldr	r6, [sp, #32]
 80086c0:	f7ff fcd6 	bl	8008070 <_Balloc>
 80086c4:	4604      	mov	r4, r0
 80086c6:	b930      	cbnz	r0, 80086d6 <__d2b+0x22>
 80086c8:	4602      	mov	r2, r0
 80086ca:	f240 310f 	movw	r1, #783	@ 0x30f
 80086ce:	4b23      	ldr	r3, [pc, #140]	@ (800875c <__d2b+0xa8>)
 80086d0:	4823      	ldr	r0, [pc, #140]	@ (8008760 <__d2b+0xac>)
 80086d2:	f000 f9f7 	bl	8008ac4 <__assert_func>
 80086d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086de:	b10d      	cbz	r5, 80086e4 <__d2b+0x30>
 80086e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	f1b8 0300 	subs.w	r3, r8, #0
 80086ea:	d024      	beq.n	8008736 <__d2b+0x82>
 80086ec:	4668      	mov	r0, sp
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	f7ff fd85 	bl	80081fe <__lo0bits>
 80086f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086f8:	b1d8      	cbz	r0, 8008732 <__d2b+0x7e>
 80086fa:	f1c0 0320 	rsb	r3, r0, #32
 80086fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008702:	430b      	orrs	r3, r1
 8008704:	40c2      	lsrs	r2, r0
 8008706:	6163      	str	r3, [r4, #20]
 8008708:	9201      	str	r2, [sp, #4]
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	bf0c      	ite	eq
 8008710:	2201      	moveq	r2, #1
 8008712:	2202      	movne	r2, #2
 8008714:	61a3      	str	r3, [r4, #24]
 8008716:	6122      	str	r2, [r4, #16]
 8008718:	b1ad      	cbz	r5, 8008746 <__d2b+0x92>
 800871a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800871e:	4405      	add	r5, r0
 8008720:	6035      	str	r5, [r6, #0]
 8008722:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008728:	6018      	str	r0, [r3, #0]
 800872a:	4620      	mov	r0, r4
 800872c:	b002      	add	sp, #8
 800872e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008732:	6161      	str	r1, [r4, #20]
 8008734:	e7e9      	b.n	800870a <__d2b+0x56>
 8008736:	a801      	add	r0, sp, #4
 8008738:	f7ff fd61 	bl	80081fe <__lo0bits>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	6163      	str	r3, [r4, #20]
 8008742:	3020      	adds	r0, #32
 8008744:	e7e7      	b.n	8008716 <__d2b+0x62>
 8008746:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800874a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800874e:	6030      	str	r0, [r6, #0]
 8008750:	6918      	ldr	r0, [r3, #16]
 8008752:	f7ff fd35 	bl	80081c0 <__hi0bits>
 8008756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800875a:	e7e4      	b.n	8008726 <__d2b+0x72>
 800875c:	08008eb6 	.word	0x08008eb6
 8008760:	08008ed8 	.word	0x08008ed8

08008764 <__sread>:
 8008764:	b510      	push	{r4, lr}
 8008766:	460c      	mov	r4, r1
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	f000 f956 	bl	8008a1c <_read_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	bfab      	itete	ge
 8008774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008776:	89a3      	ldrhlt	r3, [r4, #12]
 8008778:	181b      	addge	r3, r3, r0
 800877a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800877e:	bfac      	ite	ge
 8008780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008782:	81a3      	strhlt	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__swrite>:
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	461f      	mov	r7, r3
 800878c:	898b      	ldrh	r3, [r1, #12]
 800878e:	4605      	mov	r5, r0
 8008790:	05db      	lsls	r3, r3, #23
 8008792:	460c      	mov	r4, r1
 8008794:	4616      	mov	r6, r2
 8008796:	d505      	bpl.n	80087a4 <__swrite+0x1e>
 8008798:	2302      	movs	r3, #2
 800879a:	2200      	movs	r2, #0
 800879c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a0:	f000 f92a 	bl	80089f8 <_lseek_r>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	4632      	mov	r2, r6
 80087a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	4628      	mov	r0, r5
 80087b0:	463b      	mov	r3, r7
 80087b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ba:	f000 b941 	b.w	8008a40 <_write_r>

080087be <__sseek>:
 80087be:	b510      	push	{r4, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c6:	f000 f917 	bl	80089f8 <_lseek_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	bf15      	itete	ne
 80087d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087da:	81a3      	strheq	r3, [r4, #12]
 80087dc:	bf18      	it	ne
 80087de:	81a3      	strhne	r3, [r4, #12]
 80087e0:	bd10      	pop	{r4, pc}

080087e2 <__sclose>:
 80087e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e6:	f000 b93d 	b.w	8008a64 <_close_r>

080087ea <__swbuf_r>:
 80087ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ec:	460e      	mov	r6, r1
 80087ee:	4614      	mov	r4, r2
 80087f0:	4605      	mov	r5, r0
 80087f2:	b118      	cbz	r0, 80087fc <__swbuf_r+0x12>
 80087f4:	6a03      	ldr	r3, [r0, #32]
 80087f6:	b90b      	cbnz	r3, 80087fc <__swbuf_r+0x12>
 80087f8:	f7fe fa6a 	bl	8006cd0 <__sinit>
 80087fc:	69a3      	ldr	r3, [r4, #24]
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	071a      	lsls	r2, r3, #28
 8008804:	d501      	bpl.n	800880a <__swbuf_r+0x20>
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	b943      	cbnz	r3, 800881c <__swbuf_r+0x32>
 800880a:	4621      	mov	r1, r4
 800880c:	4628      	mov	r0, r5
 800880e:	f000 f82b 	bl	8008868 <__swsetup_r>
 8008812:	b118      	cbz	r0, 800881c <__swbuf_r+0x32>
 8008814:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008818:	4638      	mov	r0, r7
 800881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	6922      	ldr	r2, [r4, #16]
 8008820:	b2f6      	uxtb	r6, r6
 8008822:	1a98      	subs	r0, r3, r2
 8008824:	6963      	ldr	r3, [r4, #20]
 8008826:	4637      	mov	r7, r6
 8008828:	4283      	cmp	r3, r0
 800882a:	dc05      	bgt.n	8008838 <__swbuf_r+0x4e>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f7ff fbf6 	bl	8008020 <_fflush_r>
 8008834:	2800      	cmp	r0, #0
 8008836:	d1ed      	bne.n	8008814 <__swbuf_r+0x2a>
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	3b01      	subs	r3, #1
 800883c:	60a3      	str	r3, [r4, #8]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	6022      	str	r2, [r4, #0]
 8008844:	701e      	strb	r6, [r3, #0]
 8008846:	6962      	ldr	r2, [r4, #20]
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	429a      	cmp	r2, r3
 800884c:	d004      	beq.n	8008858 <__swbuf_r+0x6e>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	07db      	lsls	r3, r3, #31
 8008852:	d5e1      	bpl.n	8008818 <__swbuf_r+0x2e>
 8008854:	2e0a      	cmp	r6, #10
 8008856:	d1df      	bne.n	8008818 <__swbuf_r+0x2e>
 8008858:	4621      	mov	r1, r4
 800885a:	4628      	mov	r0, r5
 800885c:	f7ff fbe0 	bl	8008020 <_fflush_r>
 8008860:	2800      	cmp	r0, #0
 8008862:	d0d9      	beq.n	8008818 <__swbuf_r+0x2e>
 8008864:	e7d6      	b.n	8008814 <__swbuf_r+0x2a>
	...

08008868 <__swsetup_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4b29      	ldr	r3, [pc, #164]	@ (8008910 <__swsetup_r+0xa8>)
 800886c:	4605      	mov	r5, r0
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	460c      	mov	r4, r1
 8008872:	b118      	cbz	r0, 800887c <__swsetup_r+0x14>
 8008874:	6a03      	ldr	r3, [r0, #32]
 8008876:	b90b      	cbnz	r3, 800887c <__swsetup_r+0x14>
 8008878:	f7fe fa2a 	bl	8006cd0 <__sinit>
 800887c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008880:	0719      	lsls	r1, r3, #28
 8008882:	d422      	bmi.n	80088ca <__swsetup_r+0x62>
 8008884:	06da      	lsls	r2, r3, #27
 8008886:	d407      	bmi.n	8008898 <__swsetup_r+0x30>
 8008888:	2209      	movs	r2, #9
 800888a:	602a      	str	r2, [r5, #0]
 800888c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	e033      	b.n	8008900 <__swsetup_r+0x98>
 8008898:	0758      	lsls	r0, r3, #29
 800889a:	d512      	bpl.n	80088c2 <__swsetup_r+0x5a>
 800889c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800889e:	b141      	cbz	r1, 80088b2 <__swsetup_r+0x4a>
 80088a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a4:	4299      	cmp	r1, r3
 80088a6:	d002      	beq.n	80088ae <__swsetup_r+0x46>
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7ff f9b1 	bl	8007c10 <_free_r>
 80088ae:	2300      	movs	r3, #0
 80088b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	2300      	movs	r3, #0
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f043 0308 	orr.w	r3, r3, #8
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	b94b      	cbnz	r3, 80088e2 <__swsetup_r+0x7a>
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d8:	d003      	beq.n	80088e2 <__swsetup_r+0x7a>
 80088da:	4621      	mov	r1, r4
 80088dc:	4628      	mov	r0, r5
 80088de:	f000 f83e 	bl	800895e <__smakebuf_r>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	f013 0201 	ands.w	r2, r3, #1
 80088ea:	d00a      	beq.n	8008902 <__swsetup_r+0x9a>
 80088ec:	2200      	movs	r2, #0
 80088ee:	60a2      	str	r2, [r4, #8]
 80088f0:	6962      	ldr	r2, [r4, #20]
 80088f2:	4252      	negs	r2, r2
 80088f4:	61a2      	str	r2, [r4, #24]
 80088f6:	6922      	ldr	r2, [r4, #16]
 80088f8:	b942      	cbnz	r2, 800890c <__swsetup_r+0xa4>
 80088fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088fe:	d1c5      	bne.n	800888c <__swsetup_r+0x24>
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	0799      	lsls	r1, r3, #30
 8008904:	bf58      	it	pl
 8008906:	6962      	ldrpl	r2, [r4, #20]
 8008908:	60a2      	str	r2, [r4, #8]
 800890a:	e7f4      	b.n	80088f6 <__swsetup_r+0x8e>
 800890c:	2000      	movs	r0, #0
 800890e:	e7f7      	b.n	8008900 <__swsetup_r+0x98>
 8008910:	20000050 	.word	0x20000050

08008914 <__swhatbuf_r>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	460c      	mov	r4, r1
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	4615      	mov	r5, r2
 800891e:	2900      	cmp	r1, #0
 8008920:	461e      	mov	r6, r3
 8008922:	b096      	sub	sp, #88	@ 0x58
 8008924:	da0c      	bge.n	8008940 <__swhatbuf_r+0x2c>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	2100      	movs	r1, #0
 800892a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800892e:	bf14      	ite	ne
 8008930:	2340      	movne	r3, #64	@ 0x40
 8008932:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008936:	2000      	movs	r0, #0
 8008938:	6031      	str	r1, [r6, #0]
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	b016      	add	sp, #88	@ 0x58
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	466a      	mov	r2, sp
 8008942:	f000 f89f 	bl	8008a84 <_fstat_r>
 8008946:	2800      	cmp	r0, #0
 8008948:	dbed      	blt.n	8008926 <__swhatbuf_r+0x12>
 800894a:	9901      	ldr	r1, [sp, #4]
 800894c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008950:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008954:	4259      	negs	r1, r3
 8008956:	4159      	adcs	r1, r3
 8008958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800895c:	e7eb      	b.n	8008936 <__swhatbuf_r+0x22>

0800895e <__smakebuf_r>:
 800895e:	898b      	ldrh	r3, [r1, #12]
 8008960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008962:	079d      	lsls	r5, r3, #30
 8008964:	4606      	mov	r6, r0
 8008966:	460c      	mov	r4, r1
 8008968:	d507      	bpl.n	800897a <__smakebuf_r+0x1c>
 800896a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	6123      	str	r3, [r4, #16]
 8008972:	2301      	movs	r3, #1
 8008974:	6163      	str	r3, [r4, #20]
 8008976:	b003      	add	sp, #12
 8008978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800897a:	466a      	mov	r2, sp
 800897c:	ab01      	add	r3, sp, #4
 800897e:	f7ff ffc9 	bl	8008914 <__swhatbuf_r>
 8008982:	9f00      	ldr	r7, [sp, #0]
 8008984:	4605      	mov	r5, r0
 8008986:	4639      	mov	r1, r7
 8008988:	4630      	mov	r0, r6
 800898a:	f7fd fef9 	bl	8006780 <_malloc_r>
 800898e:	b948      	cbnz	r0, 80089a4 <__smakebuf_r+0x46>
 8008990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008994:	059a      	lsls	r2, r3, #22
 8008996:	d4ee      	bmi.n	8008976 <__smakebuf_r+0x18>
 8008998:	f023 0303 	bic.w	r3, r3, #3
 800899c:	f043 0302 	orr.w	r3, r3, #2
 80089a0:	81a3      	strh	r3, [r4, #12]
 80089a2:	e7e2      	b.n	800896a <__smakebuf_r+0xc>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	9b01      	ldr	r3, [sp, #4]
 80089b2:	6020      	str	r0, [r4, #0]
 80089b4:	b15b      	cbz	r3, 80089ce <__smakebuf_r+0x70>
 80089b6:	4630      	mov	r0, r6
 80089b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089bc:	f000 f80c 	bl	80089d8 <_isatty_r>
 80089c0:	b128      	cbz	r0, 80089ce <__smakebuf_r+0x70>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	f023 0303 	bic.w	r3, r3, #3
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	431d      	orrs	r5, r3
 80089d2:	81a5      	strh	r5, [r4, #12]
 80089d4:	e7cf      	b.n	8008976 <__smakebuf_r+0x18>
	...

080089d8 <_isatty_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	2300      	movs	r3, #0
 80089dc:	4d05      	ldr	r5, [pc, #20]	@ (80089f4 <_isatty_r+0x1c>)
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7fb f887 	bl	8003af6 <_isatty>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_isatty_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_isatty_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	200004dc 	.word	0x200004dc

080089f8 <_lseek_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	4611      	mov	r1, r2
 8008a00:	2200      	movs	r2, #0
 8008a02:	4d05      	ldr	r5, [pc, #20]	@ (8008a18 <_lseek_r+0x20>)
 8008a04:	602a      	str	r2, [r5, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f7fb f87f 	bl	8003b0a <_lseek>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_lseek_r+0x1e>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_lseek_r+0x1e>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	200004dc 	.word	0x200004dc

08008a1c <_read_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	4d05      	ldr	r5, [pc, #20]	@ (8008a3c <_read_r+0x20>)
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7fb f810 	bl	8003a50 <_read>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_read_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_read_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	200004dc 	.word	0x200004dc

08008a40 <_write_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4604      	mov	r4, r0
 8008a44:	4608      	mov	r0, r1
 8008a46:	4611      	mov	r1, r2
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4d05      	ldr	r5, [pc, #20]	@ (8008a60 <_write_r+0x20>)
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7fb f81b 	bl	8003a8a <_write>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_write_r+0x1e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_write_r+0x1e>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	200004dc 	.word	0x200004dc

08008a64 <_close_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	2300      	movs	r3, #0
 8008a68:	4d05      	ldr	r5, [pc, #20]	@ (8008a80 <_close_r+0x1c>)
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	f7fb f827 	bl	8003ac2 <_close>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_close_r+0x1a>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_close_r+0x1a>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	200004dc 	.word	0x200004dc

08008a84 <_fstat_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	2300      	movs	r3, #0
 8008a88:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_fstat_r+0x20>)
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	f7fb f821 	bl	8003ad8 <_fstat>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d102      	bne.n	8008aa0 <_fstat_r+0x1c>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	b103      	cbz	r3, 8008aa0 <_fstat_r+0x1c>
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200004dc 	.word	0x200004dc

08008aa8 <memcpy>:
 8008aa8:	440a      	add	r2, r1
 8008aaa:	4291      	cmp	r1, r2
 8008aac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008ab0:	d100      	bne.n	8008ab4 <memcpy+0xc>
 8008ab2:	4770      	bx	lr
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aba:	4291      	cmp	r1, r2
 8008abc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ac0:	d1f9      	bne.n	8008ab6 <memcpy+0xe>
 8008ac2:	bd10      	pop	{r4, pc}

08008ac4 <__assert_func>:
 8008ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4b09      	ldr	r3, [pc, #36]	@ (8008af0 <__assert_func+0x2c>)
 8008acc:	4605      	mov	r5, r0
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68d8      	ldr	r0, [r3, #12]
 8008ad2:	b14c      	cbz	r4, 8008ae8 <__assert_func+0x24>
 8008ad4:	4b07      	ldr	r3, [pc, #28]	@ (8008af4 <__assert_func+0x30>)
 8008ad6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ada:	9100      	str	r1, [sp, #0]
 8008adc:	462b      	mov	r3, r5
 8008ade:	4906      	ldr	r1, [pc, #24]	@ (8008af8 <__assert_func+0x34>)
 8008ae0:	f000 f834 	bl	8008b4c <fiprintf>
 8008ae4:	f7fd fb36 	bl	8006154 <abort>
 8008ae8:	4b04      	ldr	r3, [pc, #16]	@ (8008afc <__assert_func+0x38>)
 8008aea:	461c      	mov	r4, r3
 8008aec:	e7f3      	b.n	8008ad6 <__assert_func+0x12>
 8008aee:	bf00      	nop
 8008af0:	20000050 	.word	0x20000050
 8008af4:	08008f3b 	.word	0x08008f3b
 8008af8:	08008f48 	.word	0x08008f48
 8008afc:	08008f76 	.word	0x08008f76

08008b00 <_calloc_r>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	fba1 5402 	umull	r5, r4, r1, r2
 8008b06:	b934      	cbnz	r4, 8008b16 <_calloc_r+0x16>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7fd fe39 	bl	8006780 <_malloc_r>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	b928      	cbnz	r0, 8008b1e <_calloc_r+0x1e>
 8008b12:	4630      	mov	r0, r6
 8008b14:	bd70      	pop	{r4, r5, r6, pc}
 8008b16:	220c      	movs	r2, #12
 8008b18:	2600      	movs	r6, #0
 8008b1a:	6002      	str	r2, [r0, #0]
 8008b1c:	e7f9      	b.n	8008b12 <_calloc_r+0x12>
 8008b1e:	462a      	mov	r2, r5
 8008b20:	4621      	mov	r1, r4
 8008b22:	f7fe f97b 	bl	8006e1c <memset>
 8008b26:	e7f4      	b.n	8008b12 <_calloc_r+0x12>

08008b28 <__ascii_mbtowc>:
 8008b28:	b082      	sub	sp, #8
 8008b2a:	b901      	cbnz	r1, 8008b2e <__ascii_mbtowc+0x6>
 8008b2c:	a901      	add	r1, sp, #4
 8008b2e:	b142      	cbz	r2, 8008b42 <__ascii_mbtowc+0x1a>
 8008b30:	b14b      	cbz	r3, 8008b46 <__ascii_mbtowc+0x1e>
 8008b32:	7813      	ldrb	r3, [r2, #0]
 8008b34:	600b      	str	r3, [r1, #0]
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	1e10      	subs	r0, r2, #0
 8008b3a:	bf18      	it	ne
 8008b3c:	2001      	movne	r0, #1
 8008b3e:	b002      	add	sp, #8
 8008b40:	4770      	bx	lr
 8008b42:	4610      	mov	r0, r2
 8008b44:	e7fb      	b.n	8008b3e <__ascii_mbtowc+0x16>
 8008b46:	f06f 0001 	mvn.w	r0, #1
 8008b4a:	e7f8      	b.n	8008b3e <__ascii_mbtowc+0x16>

08008b4c <fiprintf>:
 8008b4c:	b40e      	push	{r1, r2, r3}
 8008b4e:	b503      	push	{r0, r1, lr}
 8008b50:	4601      	mov	r1, r0
 8008b52:	ab03      	add	r3, sp, #12
 8008b54:	4805      	ldr	r0, [pc, #20]	@ (8008b6c <fiprintf+0x20>)
 8008b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	f7ff f8c7 	bl	8007cf0 <_vfiprintf_r>
 8008b62:	b002      	add	sp, #8
 8008b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b68:	b003      	add	sp, #12
 8008b6a:	4770      	bx	lr
 8008b6c:	20000050 	.word	0x20000050

08008b70 <__ascii_wctomb>:
 8008b70:	4603      	mov	r3, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	b141      	cbz	r1, 8008b88 <__ascii_wctomb+0x18>
 8008b76:	2aff      	cmp	r2, #255	@ 0xff
 8008b78:	d904      	bls.n	8008b84 <__ascii_wctomb+0x14>
 8008b7a:	228a      	movs	r2, #138	@ 0x8a
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	4770      	bx	lr
 8008b84:	2001      	movs	r0, #1
 8008b86:	700a      	strb	r2, [r1, #0]
 8008b88:	4770      	bx	lr
	...

08008b8c <_init>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	bf00      	nop
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr

08008b98 <_fini>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	bf00      	nop
 8008b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9e:	bc08      	pop	{r3}
 8008ba0:	469e      	mov	lr, r3
 8008ba2:	4770      	bx	lr
