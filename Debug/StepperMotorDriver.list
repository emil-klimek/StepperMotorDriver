
StepperMotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006968  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08006a74  08006a74  00007a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d18  08006d18  0000809c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006d18  08006d18  0000809c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006d18  08006d18  0000809c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d18  08006d18  00007d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d1c  08006d1c  00007d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08006d20  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000009c  08006dbc  0000809c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006dbc  00008370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120ad  00000000  00000000  000080c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b90  00000000  00000000  0001a172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001cd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf8  00000000  00000000  0001ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b898  00000000  00000000  0001eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103e3  00000000  00000000  0003a350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c32  00000000  00000000  0004a733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  000dc3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e1550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a5c 	.word	0x08006a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08006a5c 	.word	0x08006a5c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2f>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80004cc:	bf24      	itt	cs
 80004ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80004d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80004d6:	d90d      	bls.n	80004f4 <__aeabi_d2f+0x30>
 80004d8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80004e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004ec:	bf08      	it	eq
 80004ee:	f020 0001 	biceq.w	r0, r0, #1
 80004f2:	4770      	bx	lr
 80004f4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80004f8:	d121      	bne.n	800053e <__aeabi_d2f+0x7a>
 80004fa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80004fe:	bfbc      	itt	lt
 8000500:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000504:	4770      	bxlt	lr
 8000506:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800050a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800050e:	f1c2 0218 	rsb	r2, r2, #24
 8000512:	f1c2 0c20 	rsb	ip, r2, #32
 8000516:	fa10 f30c 	lsls.w	r3, r0, ip
 800051a:	fa20 f002 	lsr.w	r0, r0, r2
 800051e:	bf18      	it	ne
 8000520:	f040 0001 	orrne.w	r0, r0, #1
 8000524:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000528:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800052c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000530:	ea40 000c 	orr.w	r0, r0, ip
 8000534:	fa23 f302 	lsr.w	r3, r3, r2
 8000538:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800053c:	e7cc      	b.n	80004d8 <__aeabi_d2f+0x14>
 800053e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000542:	d107      	bne.n	8000554 <__aeabi_d2f+0x90>
 8000544:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000548:	bf1e      	ittt	ne
 800054a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800054e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000552:	4770      	bxne	lr
 8000554:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000558:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800055c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_frsub>:
 8000564:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000568:	e002      	b.n	8000570 <__addsf3>
 800056a:	bf00      	nop

0800056c <__aeabi_fsub>:
 800056c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000570 <__addsf3>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	bf1f      	itttt	ne
 8000574:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000578:	ea92 0f03 	teqne	r2, r3
 800057c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000580:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000584:	d06a      	beq.n	800065c <__addsf3+0xec>
 8000586:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800058e:	bfc1      	itttt	gt
 8000590:	18d2      	addgt	r2, r2, r3
 8000592:	4041      	eorgt	r1, r0
 8000594:	4048      	eorgt	r0, r1
 8000596:	4041      	eorgt	r1, r0
 8000598:	bfb8      	it	lt
 800059a:	425b      	neglt	r3, r3
 800059c:	2b19      	cmp	r3, #25
 800059e:	bf88      	it	hi
 80005a0:	4770      	bxhi	lr
 80005a2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005aa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4240      	negne	r0, r0
 80005b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005b6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005ba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4249      	negne	r1, r1
 80005c2:	ea92 0f03 	teq	r2, r3
 80005c6:	d03f      	beq.n	8000648 <__addsf3+0xd8>
 80005c8:	f1a2 0201 	sub.w	r2, r2, #1
 80005cc:	fa41 fc03 	asr.w	ip, r1, r3
 80005d0:	eb10 000c 	adds.w	r0, r0, ip
 80005d4:	f1c3 0320 	rsb	r3, r3, #32
 80005d8:	fa01 f103 	lsl.w	r1, r1, r3
 80005dc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80005e0:	d502      	bpl.n	80005e8 <__addsf3+0x78>
 80005e2:	4249      	negs	r1, r1
 80005e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005e8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80005ec:	d313      	bcc.n	8000616 <__addsf3+0xa6>
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005f2:	d306      	bcc.n	8000602 <__addsf3+0x92>
 80005f4:	0840      	lsrs	r0, r0, #1
 80005f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fa:	f102 0201 	add.w	r2, r2, #1
 80005fe:	2afe      	cmp	r2, #254	@ 0xfe
 8000600:	d251      	bcs.n	80006a6 <__addsf3+0x136>
 8000602:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060a:	bf08      	it	eq
 800060c:	f020 0001 	biceq.w	r0, r0, #1
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	4770      	bx	lr
 8000616:	0049      	lsls	r1, r1, #1
 8000618:	eb40 0000 	adc.w	r0, r0, r0
 800061c:	3a01      	subs	r2, #1
 800061e:	bf28      	it	cs
 8000620:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000624:	d2ed      	bcs.n	8000602 <__addsf3+0x92>
 8000626:	fab0 fc80 	clz	ip, r0
 800062a:	f1ac 0c08 	sub.w	ip, ip, #8
 800062e:	ebb2 020c 	subs.w	r2, r2, ip
 8000632:	fa00 f00c 	lsl.w	r0, r0, ip
 8000636:	bfaa      	itet	ge
 8000638:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800063c:	4252      	neglt	r2, r2
 800063e:	4318      	orrge	r0, r3
 8000640:	bfbc      	itt	lt
 8000642:	40d0      	lsrlt	r0, r2
 8000644:	4318      	orrlt	r0, r3
 8000646:	4770      	bx	lr
 8000648:	f092 0f00 	teq	r2, #0
 800064c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000650:	bf06      	itte	eq
 8000652:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000656:	3201      	addeq	r2, #1
 8000658:	3b01      	subne	r3, #1
 800065a:	e7b5      	b.n	80005c8 <__addsf3+0x58>
 800065c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000660:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000664:	bf18      	it	ne
 8000666:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066a:	d021      	beq.n	80006b0 <__addsf3+0x140>
 800066c:	ea92 0f03 	teq	r2, r3
 8000670:	d004      	beq.n	800067c <__addsf3+0x10c>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	bf08      	it	eq
 8000678:	4608      	moveq	r0, r1
 800067a:	4770      	bx	lr
 800067c:	ea90 0f01 	teq	r0, r1
 8000680:	bf1c      	itt	ne
 8000682:	2000      	movne	r0, #0
 8000684:	4770      	bxne	lr
 8000686:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800068a:	d104      	bne.n	8000696 <__addsf3+0x126>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	bf28      	it	cs
 8000690:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000694:	4770      	bx	lr
 8000696:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800069a:	bf3c      	itt	cc
 800069c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006a0:	4770      	bxcc	lr
 80006a2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006a6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ae:	4770      	bx	lr
 80006b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b4:	bf16      	itet	ne
 80006b6:	4608      	movne	r0, r1
 80006b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006bc:	4601      	movne	r1, r0
 80006be:	0242      	lsls	r2, r0, #9
 80006c0:	bf06      	itte	eq
 80006c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006c6:	ea90 0f01 	teqeq	r0, r1
 80006ca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80006ce:	4770      	bx	lr

080006d0 <__aeabi_ui2f>:
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e004      	b.n	80006e0 <__aeabi_i2f+0x8>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2f>:
 80006d8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	ea5f 0c00 	movs.w	ip, r0
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80006ec:	4601      	mov	r1, r0
 80006ee:	f04f 0000 	mov.w	r0, #0
 80006f2:	e01c      	b.n	800072e <__aeabi_l2f+0x2a>

080006f4 <__aeabi_ul2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	e00a      	b.n	8000718 <__aeabi_l2f+0x14>
 8000702:	bf00      	nop

08000704 <__aeabi_l2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000710:	d502      	bpl.n	8000718 <__aeabi_l2f+0x14>
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	ea5f 0c01 	movs.w	ip, r1
 800071c:	bf02      	ittt	eq
 800071e:	4684      	moveq	ip, r0
 8000720:	4601      	moveq	r1, r0
 8000722:	2000      	moveq	r0, #0
 8000724:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000728:	bf08      	it	eq
 800072a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800072e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000732:	fabc f28c 	clz	r2, ip
 8000736:	3a08      	subs	r2, #8
 8000738:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800073c:	db10      	blt.n	8000760 <__aeabi_l2f+0x5c>
 800073e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000742:	4463      	add	r3, ip
 8000744:	fa00 fc02 	lsl.w	ip, r0, r2
 8000748:	f1c2 0220 	rsb	r2, r2, #32
 800074c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000750:	fa20 f202 	lsr.w	r2, r0, r2
 8000754:	eb43 0002 	adc.w	r0, r3, r2
 8000758:	bf08      	it	eq
 800075a:	f020 0001 	biceq.w	r0, r0, #1
 800075e:	4770      	bx	lr
 8000760:	f102 0220 	add.w	r2, r2, #32
 8000764:	fa01 fc02 	lsl.w	ip, r1, r2
 8000768:	f1c2 0220 	rsb	r2, r2, #32
 800076c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000770:	fa21 f202 	lsr.w	r2, r1, r2
 8000774:	eb43 0002 	adc.w	r0, r3, r2
 8000778:	bf08      	it	eq
 800077a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800077e:	4770      	bx	lr

08000780 <__aeabi_fmul>:
 8000780:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000784:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000788:	bf1e      	ittt	ne
 800078a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800078e:	ea92 0f0c 	teqne	r2, ip
 8000792:	ea93 0f0c 	teqne	r3, ip
 8000796:	d06f      	beq.n	8000878 <__aeabi_fmul+0xf8>
 8000798:	441a      	add	r2, r3
 800079a:	ea80 0c01 	eor.w	ip, r0, r1
 800079e:	0240      	lsls	r0, r0, #9
 80007a0:	bf18      	it	ne
 80007a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007a6:	d01e      	beq.n	80007e6 <__aeabi_fmul+0x66>
 80007a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b4:	fba0 3101 	umull	r3, r1, r0, r1
 80007b8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80007bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80007c0:	bf3e      	ittt	cc
 80007c2:	0049      	lslcc	r1, r1, #1
 80007c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007c8:	005b      	lslcc	r3, r3, #1
 80007ca:	ea40 0001 	orr.w	r0, r0, r1
 80007ce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80007d2:	2afd      	cmp	r2, #253	@ 0xfd
 80007d4:	d81d      	bhi.n	8000812 <__aeabi_fmul+0x92>
 80007d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80007da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007de:	bf08      	it	eq
 80007e0:	f020 0001 	biceq.w	r0, r0, #1
 80007e4:	4770      	bx	lr
 80007e6:	f090 0f00 	teq	r0, #0
 80007ea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80007ee:	bf08      	it	eq
 80007f0:	0249      	lsleq	r1, r1, #9
 80007f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fa:	3a7f      	subs	r2, #127	@ 0x7f
 80007fc:	bfc2      	ittt	gt
 80007fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000802:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000806:	4770      	bxgt	lr
 8000808:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	3a01      	subs	r2, #1
 8000812:	dc5d      	bgt.n	80008d0 <__aeabi_fmul+0x150>
 8000814:	f112 0f19 	cmn.w	r2, #25
 8000818:	bfdc      	itt	le
 800081a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800081e:	4770      	bxle	lr
 8000820:	f1c2 0200 	rsb	r2, r2, #0
 8000824:	0041      	lsls	r1, r0, #1
 8000826:	fa21 f102 	lsr.w	r1, r1, r2
 800082a:	f1c2 0220 	rsb	r2, r2, #32
 800082e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000832:	ea5f 0031 	movs.w	r0, r1, rrx
 8000836:	f140 0000 	adc.w	r0, r0, #0
 800083a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800083e:	bf08      	it	eq
 8000840:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000844:	4770      	bx	lr
 8000846:	f092 0f00 	teq	r2, #0
 800084a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800084e:	bf02      	ittt	eq
 8000850:	0040      	lsleq	r0, r0, #1
 8000852:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000856:	3a01      	subeq	r2, #1
 8000858:	d0f9      	beq.n	800084e <__aeabi_fmul+0xce>
 800085a:	ea40 000c 	orr.w	r0, r0, ip
 800085e:	f093 0f00 	teq	r3, #0
 8000862:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000866:	bf02      	ittt	eq
 8000868:	0049      	lsleq	r1, r1, #1
 800086a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800086e:	3b01      	subeq	r3, #1
 8000870:	d0f9      	beq.n	8000866 <__aeabi_fmul+0xe6>
 8000872:	ea41 010c 	orr.w	r1, r1, ip
 8000876:	e78f      	b.n	8000798 <__aeabi_fmul+0x18>
 8000878:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800087c:	ea92 0f0c 	teq	r2, ip
 8000880:	bf18      	it	ne
 8000882:	ea93 0f0c 	teqne	r3, ip
 8000886:	d00a      	beq.n	800089e <__aeabi_fmul+0x11e>
 8000888:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800088c:	bf18      	it	ne
 800088e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000892:	d1d8      	bne.n	8000846 <__aeabi_fmul+0xc6>
 8000894:	ea80 0001 	eor.w	r0, r0, r1
 8000898:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f090 0f00 	teq	r0, #0
 80008a2:	bf17      	itett	ne
 80008a4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008a8:	4608      	moveq	r0, r1
 80008aa:	f091 0f00 	teqne	r1, #0
 80008ae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008b2:	d014      	beq.n	80008de <__aeabi_fmul+0x15e>
 80008b4:	ea92 0f0c 	teq	r2, ip
 80008b8:	d101      	bne.n	80008be <__aeabi_fmul+0x13e>
 80008ba:	0242      	lsls	r2, r0, #9
 80008bc:	d10f      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008be:	ea93 0f0c 	teq	r3, ip
 80008c2:	d103      	bne.n	80008cc <__aeabi_fmul+0x14c>
 80008c4:	024b      	lsls	r3, r1, #9
 80008c6:	bf18      	it	ne
 80008c8:	4608      	movne	r0, r1
 80008ca:	d108      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008cc:	ea80 0001 	eor.w	r0, r0, r1
 80008d0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008dc:	4770      	bx	lr
 80008de:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80008e6:	4770      	bx	lr

080008e8 <__aeabi_fdiv>:
 80008e8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f0:	bf1e      	ittt	ne
 80008f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008f6:	ea92 0f0c 	teqne	r2, ip
 80008fa:	ea93 0f0c 	teqne	r3, ip
 80008fe:	d069      	beq.n	80009d4 <__aeabi_fdiv+0xec>
 8000900:	eba2 0203 	sub.w	r2, r2, r3
 8000904:	ea80 0c01 	eor.w	ip, r0, r1
 8000908:	0249      	lsls	r1, r1, #9
 800090a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800090e:	d037      	beq.n	8000980 <__aeabi_fdiv+0x98>
 8000910:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000914:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000918:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800091c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000920:	428b      	cmp	r3, r1
 8000922:	bf38      	it	cc
 8000924:	005b      	lslcc	r3, r3, #1
 8000926:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800092a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800092e:	428b      	cmp	r3, r1
 8000930:	bf24      	itt	cs
 8000932:	1a5b      	subcs	r3, r3, r1
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800093c:	bf24      	itt	cs
 800093e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000942:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000946:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094a:	bf24      	itt	cs
 800094c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000958:	bf24      	itt	cs
 800095a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800095e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	bf18      	it	ne
 8000966:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096a:	d1e0      	bne.n	800092e <__aeabi_fdiv+0x46>
 800096c:	2afd      	cmp	r2, #253	@ 0xfd
 800096e:	f63f af50 	bhi.w	8000812 <__aeabi_fmul+0x92>
 8000972:	428b      	cmp	r3, r1
 8000974:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000978:	bf08      	it	eq
 800097a:	f020 0001 	biceq.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000984:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000988:	327f      	adds	r2, #127	@ 0x7f
 800098a:	bfc2      	ittt	gt
 800098c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000990:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000994:	4770      	bxgt	lr
 8000996:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	3a01      	subs	r2, #1
 80009a0:	e737      	b.n	8000812 <__aeabi_fmul+0x92>
 80009a2:	f092 0f00 	teq	r2, #0
 80009a6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009aa:	bf02      	ittt	eq
 80009ac:	0040      	lsleq	r0, r0, #1
 80009ae:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009b2:	3a01      	subeq	r2, #1
 80009b4:	d0f9      	beq.n	80009aa <__aeabi_fdiv+0xc2>
 80009b6:	ea40 000c 	orr.w	r0, r0, ip
 80009ba:	f093 0f00 	teq	r3, #0
 80009be:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c2:	bf02      	ittt	eq
 80009c4:	0049      	lsleq	r1, r1, #1
 80009c6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80009ca:	3b01      	subeq	r3, #1
 80009cc:	d0f9      	beq.n	80009c2 <__aeabi_fdiv+0xda>
 80009ce:	ea41 010c 	orr.w	r1, r1, ip
 80009d2:	e795      	b.n	8000900 <__aeabi_fdiv+0x18>
 80009d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009d8:	ea92 0f0c 	teq	r2, ip
 80009dc:	d108      	bne.n	80009f0 <__aeabi_fdiv+0x108>
 80009de:	0242      	lsls	r2, r0, #9
 80009e0:	f47f af7d 	bne.w	80008de <__aeabi_fmul+0x15e>
 80009e4:	ea93 0f0c 	teq	r3, ip
 80009e8:	f47f af70 	bne.w	80008cc <__aeabi_fmul+0x14c>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e776      	b.n	80008de <__aeabi_fmul+0x15e>
 80009f0:	ea93 0f0c 	teq	r3, ip
 80009f4:	d104      	bne.n	8000a00 <__aeabi_fdiv+0x118>
 80009f6:	024b      	lsls	r3, r1, #9
 80009f8:	f43f af4c 	beq.w	8000894 <__aeabi_fmul+0x114>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e76e      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a04:	bf18      	it	ne
 8000a06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	d1ca      	bne.n	80009a2 <__aeabi_fdiv+0xba>
 8000a0c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a10:	f47f af5c 	bne.w	80008cc <__aeabi_fmul+0x14c>
 8000a14:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a18:	f47f af3c 	bne.w	8000894 <__aeabi_fmul+0x114>
 8000a1c:	e75f      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_f2iz>:
 8000a20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a24:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a28:	d30f      	bcc.n	8000a4a <__aeabi_f2iz+0x2a>
 8000a2a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a32:	d90d      	bls.n	8000a50 <__aeabi_f2iz+0x30>
 8000a34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a40:	fa23 f002 	lsr.w	r0, r3, r2
 8000a44:	bf18      	it	ne
 8000a46:	4240      	negne	r0, r0
 8000a48:	4770      	bx	lr
 8000a4a:	f04f 0000 	mov.w	r0, #0
 8000a4e:	4770      	bx	lr
 8000a50:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a54:	d101      	bne.n	8000a5a <__aeabi_f2iz+0x3a>
 8000a56:	0242      	lsls	r2, r0, #9
 8000a58:	d105      	bne.n	8000a66 <__aeabi_f2iz+0x46>
 8000a5a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000a5e:	bf08      	it	eq
 8000a60:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_f2uiz>:
 8000a6c:	0042      	lsls	r2, r0, #1
 8000a6e:	d20e      	bcs.n	8000a8e <__aeabi_f2uiz+0x22>
 8000a70:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a74:	d30b      	bcc.n	8000a8e <__aeabi_f2uiz+0x22>
 8000a76:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a7e:	d409      	bmi.n	8000a94 <__aeabi_f2uiz+0x28>
 8000a80:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a88:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr
 8000a94:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a98:	d101      	bne.n	8000a9e <__aeabi_f2uiz+0x32>
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_f2uiz+0x38>
 8000a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <_ZN9ComponentD1Ev>:
    virtual int read_id(uint8_t *id) = 0;

    /**
     * @brief Destructor.
     */
    virtual ~Component() {};
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <_ZN9ComponentD1Ev+0x1c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	08006cb0 	.word	0x08006cb0

08000acc <_ZN9ComponentD0Ev>:
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ffe9 	bl	8000aac <_ZN9ComponentD1Ev>
 8000ada:	2104      	movs	r1, #4
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f004 ff9b 	bl	8005a18 <_ZdlPvj>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_ZN12StepperMotorD1Ev>:
    virtual void wait_while_active(void) = 0;

    /**
     * @brief Destructor.
     */
    virtual ~StepperMotor() {};
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_ZN12StepperMotorD1Ev+0x20>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ffd5 	bl	8000aac <_ZN9ComponentD1Ev>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08006c30 	.word	0x08006c30

08000b10 <_ZN12StepperMotorD0Ev>:
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffe7 	bl	8000aec <_ZN12StepperMotorD1Ev>
 8000b1e:	2104      	movs	r1, #4
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f004 ff79 	bl	8005a18 <_ZdlPvj>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZN5L6474D1Ev>:

class L6474 : public StepperMotor
{
public:
	L6474();
	virtual ~L6474(void) {}
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <_ZN5L6474D1Ev+0x20>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ffd3 	bl	8000aec <_ZN12StepperMotorD1Ev>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08006b90 	.word	0x08006b90

08000b54 <_ZN5L6474D0Ev>:
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ffe7 	bl	8000b30 <_ZN5L6474D1Ev>
 8000b62:	2154      	movs	r1, #84	@ 0x54
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f004 ff57 	bl	8005a18 <_ZdlPvj>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN5L64744initEPv>:
	virtual int init(void *init = NULL)
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	{
		return (int) L6474_Init((void *) init);
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb20 	bl	80011c6 <_ZN5L647410L6474_InitEPv>
 8000b86:	4603      	mov	r3, r0
	}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZN5L64747read_idEPh>:


	virtual int read_id(uint8_t *id = NULL)
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	{
		return (int) L6474_ReadID((uint8_t *) id);
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 fb37 	bl	8001210 <_ZN5L647412L6474_ReadIDEPh>
 8000ba2:	4603      	mov	r3, r0
	}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5L647410get_statusEv>:

	virtual unsigned int get_status(void)
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_CmdGetStatus();
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 feb3 	bl	8001920 <_ZN5L647418L6474_CmdGetStatusEv>
 8000bba:	4603      	mov	r3, r0
	}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN5L647413get_parameterEj>:

	virtual float get_parameter(unsigned int parameter)
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	{
        unsigned int register_value = (unsigned int) L6474_CmdGetParam((L6474_Registers_t) parameter);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 fdaf 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8000bda:	60b8      	str	r0, [r7, #8]
        float value;

        switch ((L6474_Registers_t) parameter) {
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	d005      	beq.n	8000bf0 <_ZN5L647413get_parameterEj+0x2c>
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	db17      	blt.n	8000c18 <_ZN5L647413get_parameterEj+0x54>
 8000be8:	3b0f      	subs	r3, #15
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d814      	bhi.n	8000c18 <_ZN5L647413get_parameterEj+0x54>
 8000bee:	e009      	b.n	8000c04 <_ZN5L647413get_parameterEj+0x40>
            case L6474_TVAL:
                value = L6474_Par_to_Tval_Current((float) register_value);
 8000bf0:	68b8      	ldr	r0, [r7, #8]
 8000bf2:	f7ff fd6d 	bl	80006d0 <__aeabi_ui2f>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f001 fd54 	bl	80026a8 <_ZN5L647425L6474_Par_to_Tval_CurrentEf>
 8000c00:	60f8      	str	r0, [r7, #12]
                break;
 8000c02:	e00f      	b.n	8000c24 <_ZN5L647413get_parameterEj+0x60>
            case L6474_TON_MIN:
            case L6474_TOFF_MIN:
                value = L6474_Par_to_Tmin_Time((float) register_value);
 8000c04:	68b8      	ldr	r0, [r7, #8]
 8000c06:	f7ff fd63 	bl	80006d0 <__aeabi_ui2f>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f001 fd80 	bl	8002714 <_ZN5L647422L6474_Par_to_Tmin_TimeEf>
 8000c14:	60f8      	str	r0, [r7, #12]
                break;
 8000c16:	e005      	b.n	8000c24 <_ZN5L647413get_parameterEj+0x60>
            default:
                value = (float) register_value;
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f7ff fd59 	bl	80006d0 <__aeabi_ui2f>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60fb      	str	r3, [r7, #12]
                break;
 8000c22:	bf00      	nop
        }

        return value;
 8000c24:	68fb      	ldr	r3, [r7, #12]
	}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_ZN5L647412get_positionEv>:
	virtual signed int get_position(void)
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	{
		return (signed int) L6474_GetPosition();
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 fb64 	bl	8001304 <_ZN5L647417L6474_GetPositionEv>
 8000c3c:	4603      	mov	r3, r0
	}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZN5L64748get_markEv>:

	virtual signed int get_mark(void)
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	{
		return (signed int) L6474_GetMark();
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 fb2c 	bl	80012ac <_ZN5L647413L6474_GetMarkEv>
 8000c54:	4603      	mov	r3, r0
	}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_ZN5L64749get_speedEv>:

	virtual unsigned int get_speed(void)
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetCurrentSpeed();
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 faef 	bl	800124a <_ZN5L647421L6474_GetCurrentSpeedEv>
 8000c6c:	4603      	mov	r3, r0
	}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_ZN5L647413get_max_speedEv>:

	virtual unsigned int get_max_speed(void)
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetMaxSpeed();
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 fb26 	bl	80012d0 <_ZN5L647417L6474_GetMaxSpeedEv>
 8000c84:	4603      	mov	r3, r0
	}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_ZN5L647413get_min_speedEv>:

	virtual unsigned int get_min_speed(void)
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetMinSpeed();
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 fb27 	bl	80012ea <_ZN5L647417L6474_GetMinSpeedEv>
 8000c9c:	4603      	mov	r3, r0
	}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZN5L647416get_accelerationEv>:

	virtual unsigned int get_acceleration(void)
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetAcceleration();
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 fabe 	bl	8001230 <_ZN5L647421L6474_GetAccelerationEv>
 8000cb4:	4603      	mov	r3, r0
	}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_ZN5L647416get_decelerationEv>:

	virtual unsigned int get_deceleration(void)
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	{
		return (unsigned int) L6474_GetDeceleration();
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 facc 	bl	8001264 <_ZN5L647421L6474_GetDecelerationEv>
 8000ccc:	4603      	mov	r3, r0
	}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_ZN5L647413get_directionEv>:

	virtual direction_t get_direction(void)
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	{
		return (direction_t) (L6474_GetDirection() == FORWARD ? StepperMotor::FWD : StepperMotor::BWD);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 ffe2 	bl	8001ca8 <_ZN5L647418L6474_GetDirectionEv>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <_ZN5L647413get_directionEv+0x18>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <_ZN5L647413get_directionEv+0x1a>
 8000cee:	2300      	movs	r3, #0
	}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_ZN5L647413set_parameterEjf>:

	virtual void set_parameter(unsigned int parameter, float value)
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	{
        float register_value;

        switch ((L6474_Registers_t) parameter) {
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b09      	cmp	r3, #9
 8000d0a:	d005      	beq.n	8000d18 <_ZN5L647413set_parameterEjf+0x20>
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	db0f      	blt.n	8000d30 <_ZN5L647413set_parameterEjf+0x38>
 8000d10:	3b0f      	subs	r3, #15
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d80c      	bhi.n	8000d30 <_ZN5L647413set_parameterEjf+0x38>
 8000d16:	e005      	b.n	8000d24 <_ZN5L647413set_parameterEjf+0x2c>
            case L6474_TVAL:
                register_value = L6474_Tval_Current_to_Par(value);
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f001 fca8 	bl	8002670 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 8000d20:	6178      	str	r0, [r7, #20]
                break;
 8000d22:	e008      	b.n	8000d36 <_ZN5L647413set_parameterEjf+0x3e>
            case L6474_TON_MIN:
            case L6474_TOFF_MIN:
                register_value = L6474_Tmin_Time_to_Par(value);
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f001 fcda 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8000d2c:	6178      	str	r0, [r7, #20]
                break;
 8000d2e:	e002      	b.n	8000d36 <_ZN5L647413set_parameterEjf+0x3e>
            default:
                register_value = value;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	617b      	str	r3, [r7, #20]
                break;
 8000d34:	bf00      	nop
        }

        L6474_CmdSetParam((L6474_Registers_t) parameter, (unsigned int) register_value);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	b2dc      	uxtb	r4, r3
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff fe96 	bl	8000a6c <__aeabi_f2uiz>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4621      	mov	r1, r4
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 fe72 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
	}
 8000d4c:	bf00      	nop
 8000d4e:	371c      	adds	r7, #28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}

08000d54 <_ZN5L64748set_homeEv>:

	virtual void set_home(void)
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	{
		L6474_SetHome();
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fc1a 	bl	8001596 <_ZN5L647413L6474_SetHomeEv>
	}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZN5L64748set_markEv>:

	virtual void set_mark(void)
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	{
		L6474_SetMark();
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 fc1c 	bl	80015b0 <_ZN5L647413L6474_SetMarkEv>
	}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_ZN5L647413set_max_speedEj>:

	virtual bool set_max_speed(unsigned int speed)
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	{
		L6474_SetMaxSpeed((unsigned int) speed);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 fc1f 	bl	80015d4 <_ZN5L647417L6474_SetMaxSpeedEt>
		return true;
 8000d96:	2301      	movs	r3, #1
	}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_ZN5L647413set_min_speedEj>:

	virtual bool set_min_speed(unsigned int speed)
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	{
		L6474_SetMinSpeed((unsigned int) speed);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 fc43 	bl	800163c <_ZN5L647417L6474_SetMinSpeedEt>
		return true;
 8000db6:	2301      	movs	r3, #1
	}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN5L647416set_accelerationEj>:

	virtual bool set_acceleration(unsigned int acceleration)
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	{
		L6474_SetAcceleration((unsigned int) acceleration);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fb90 	bl	80014f6 <_ZN5L647421L6474_SetAccelerationEt>
		return true;
 8000dd6:	2301      	movs	r3, #1
	}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_ZN5L647416set_decelerationEj>:

	virtual bool set_deceleration(unsigned int deceleration)
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	{
		L6474_SetDeceleration((unsigned int) deceleration);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fba8 	bl	8001546 <_ZN5L647421L6474_SetDecelerationEt>
		return true;
 8000df6:	2301      	movs	r3, #1
	}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_ZN5L64745go_toEi>:

	virtual void go_to(signed int position)
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	{
		L6474_GoTo((signed int) position);
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 faaf 	bl	8001370 <_ZN5L647410L6474_GoToEl>
	}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_ZN5L64747go_homeEv>:

	virtual void go_home(void)
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	{
		L6474_GoHome();
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 fa80 	bl	8001328 <_ZN5L647412L6474_GoHomeEv>
	}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_ZN5L64747go_markEv>:

	virtual void go_mark(void)
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	{
		L6474_GoMark();
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 fa81 	bl	8001340 <_ZN5L647412L6474_GoMarkEv>
	}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_ZN5L64743runEN12StepperMotor11direction_tE>:
	virtual void run(direction_t direction)
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	70fb      	strb	r3, [r7, #3]
	{
		L6474_Run((motorDir_t) (direction == StepperMotor::FWD ? FORWARD : BACKWARD));
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d101      	bne.n	8000e5c <_ZN5L64743runEN12StepperMotor11direction_tE+0x16>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <_ZN5L64743runEN12StepperMotor11direction_tE+0x18>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fb24 	bl	80014ae <_ZN5L64749L6474_RunE10motorDir_t>
	}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_ZN5L64744moveEN12StepperMotor11direction_tEj>:

	virtual void move(direction_t direction, unsigned int steps)
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	460b      	mov	r3, r1
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	72fb      	strb	r3, [r7, #11]
	{
		L6474_Move((motorDir_t) (direction == StepperMotor::FWD ? FORWARD : BACKWARD), (unsigned int) steps);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <_ZN5L64744moveEN12StepperMotor11direction_tEj+0x18>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <_ZN5L64744moveEN12StepperMotor11direction_tEj+0x1a>
 8000e86:	2300      	movs	r3, #0
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f000 fad3 	bl	8001438 <_ZN5L647410L6474_MoveE10motorDir_tm>
	}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_ZN5L64749soft_stopEv>:

	virtual void soft_stop(void)
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	{
		L6474_SoftStop();
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fbfe 	bl	80016a4 <_ZN5L647414L6474_SoftStopEv>
	}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_ZN5L64749hard_stopEv>:

	virtual void hard_stop(void)
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	{
		L6474_HardStop();
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 faa6 	bl	800140a <_ZN5L647414L6474_HardStopEv>
	}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_ZN5L64748soft_hizEv>:

	virtual void soft_hiz(void)
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	{
        L6474_SoftStop();
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fbe8 	bl	80016a4 <_ZN5L647414L6474_SoftStopEv>
        L6474_CmdDisable();
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fc17 	bl	8001708 <_ZN5L647416L6474_CmdDisableEv>
	}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_ZN5L64748hard_hizEv>:

	virtual void hard_hiz(void)
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	{
        L6474_HardStop();
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fa8d 	bl	800140a <_ZN5L647414L6474_HardStopEv>
        L6474_CmdDisable();
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fc09 	bl	8001708 <_ZN5L647416L6474_CmdDisableEv>
	}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_ZN5L647417wait_while_activeEv>:

	virtual void wait_while_active(void)
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	{
		L6474_WaitWhileActive();
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fbe9 	bl	80016de <_ZN5L647421L6474_WaitWhileActiveEv>
	}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_ZN5L647416get_device_stateEv>:

	virtual motorState_t get_device_state(void)
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	{
		return (motorState_t) L6474_GetDeviceState();
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f9ae 	bl	800127e <_ZN5L647420L6474_GetDeviceStateEv>
 8000f22:	4603      	mov	r3, r0
	}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN5L647420read_status_registerEv>:

	virtual uint16_t read_status_register(void)
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	{
		return (uint16_t) L6474_ReadStatusRegister();
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 fe5f 	bl	8001bf8 <_ZN5L647424L6474_ReadStatusRegisterEv>
 8000f3a:	4603      	mov	r3, r0
	}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZN5L647413set_step_modeEN12StepperMotor11step_mode_tE>:

	virtual bool set_step_mode(step_mode_t step_mode)
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	{
        if ((motorStepMode_t) step_mode > STEP_MODE_1_16) {
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d901      	bls.n	8000f5a <_ZN5L647413set_step_modeEN12StepperMotor11step_mode_tE+0x16>
            return false;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e00b      	b.n	8000f72 <_ZN5L647413set_step_modeEN12StepperMotor11step_mode_tE+0x2e>
        }

        soft_hiz();
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	336c      	adds	r3, #108	@ 0x6c
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
        L6474_SelectStepMode((motorStepMode_t) step_mode);
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fe52 	bl	8001c14 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t>
        return true;
 8000f70:	2301      	movs	r3, #1
	}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZN5L647420attach_error_handlerEPFvtE>:

	virtual void attach_error_handler(void (*fptr)(uint16_t error))
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	{
		L6474_AttachErrorHandler((void (*)(uint16_t error)) fptr);
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f910 	bl	80011ac <_ZN5L647424L6474_AttachErrorHandlerEPFvtE>
	}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN5L64746enableEv>:

	virtual void enable(void)
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	{
		L6474_CmdEnable();
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 fbbf 	bl	8001720 <_ZN5L647415L6474_CmdEnableEv>
	}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_ZN5L64747disableEv>:

	virtual void disable(void)
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	{
		L6474_CmdDisable();
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fba8 	bl	8001708 <_ZN5L647416L6474_CmdDisableEv>
	}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN5L647414get_fw_versionEv>:

	virtual uint8_t get_fw_version(void)
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	{
		return (uint8_t) L6474_GetFwVersion();
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f965 	bl	8001298 <_ZN5L647418L6474_GetFwVersionEv>
 8000fce:	4603      	mov	r3, r0
	}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZN5L647411L6474_DelayEm>:

	//unimplemented
	status_t Read(uint8_t* pBuffer, uint16_t NumBytesToRead);
	status_t Write(uint8_t* pBuffer, uint16_t NumBytesToWrite);
	status_t ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes);
	void L6474_Delay(uint32_t delay)
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	{
		HAL_Delay(delay);
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f002 fae2 	bl	80035ac <HAL_Delay>
	}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN5L647415L6474_EnableIrqEv>:

	void L6474_EnableIrq(void)
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000ff8:	b662      	cpsie	i
}
 8000ffa:	bf00      	nop
	{
		__enable_irq();
	}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <_ZN5L647416L6474_DisableIrqEv>:

	void L6474_DisableIrq(void)
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100e:	b672      	cpsid	i
}
 8001010:	bf00      	nop
	{
		__disable_irq();
	}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <_ZN5L647413L6474_PwmInitEv>:

	void L6474_PwmInit(void) {}
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
	...

08001030 <_ZN5L647418L6474_ReleaseResetEv>:
	void L6474_PwmSetFreq(uint16_t frequency);
	void L6474_PwmStop(void);
	void L6474_ReleaseReset(void)
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <_ZN5L647418L6474_ReleaseResetEv+0x1c>)
 8001040:	f002 ff42 	bl	8003ec8 <HAL_GPIO_WritePin>
	}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010800 	.word	0x40010800

08001050 <_ZN5L647422L6474_SetDirectionGpioEh>:

	void L6474_Reset(void)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	}
	void L6474_SetDirectionGpio(uint8_t gpioState)
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PinState(gpioState));
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	461a      	mov	r2, r3
 8001060:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <_ZN5L647422L6474_SetDirectionGpioEh+0x24>)
 8001066:	f002 ff2f 	bl	8003ec8 <HAL_GPIO_WritePin>
	}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40010800 	.word	0x40010800

08001078 <_ZN5L647419L6474_SpiWriteBytesEPhS0_>:

	uint8_t L6474_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	{
		return (uint8_t) (ReadWrite(pReceivedByte, pByteToTransmit, number_of_devices) == COMPONENT_OK ? 0 : 1);
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_ZN5L647419L6474_SpiWriteBytesEPhS0_+0x30>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f001 fb5d 	bl	800274c <_ZN5L64749ReadWriteEPhS0_t>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
	}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200000b8 	.word	0x200000b8

080010ac <_ZN9ComponentC1Ev>:
class Component {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <_ZN9ComponentC1Ev+0x1c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	08006cb0 	.word	0x08006cb0

080010cc <_ZN12StepperMotorC1Ev>:
class StepperMotor : public Component {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffe8 	bl	80010ac <_ZN9ComponentC1Ev>
 80010dc:	4a03      	ldr	r2, [pc, #12]	@ (80010ec <_ZN12StepperMotorC1Ev+0x20>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	08006c30 	.word	0x08006c30

080010f0 <_ZN5L6474C1Ev>:

/* SPI Transmission for Daisy-Chain Configuration. */
uint8_t L6474::spi_tx_bursts[L6474_CMD_ARG_MAX_NB_BYTES][MAX_NUMBER_OF_DEVICES];
uint8_t L6474::spi_rx_bursts[L6474_CMD_ARG_MAX_NB_BYTES][MAX_NUMBER_OF_DEVICES];

L6474::L6474()
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffe6 	bl	80010cc <_ZN12StepperMotorC1Ev>
 8001100:	4a16      	ldr	r2, [pc, #88]	@ (800115c <_ZN5L6474C1Ev+0x6c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3304      	adds	r3, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fbea 	bl	80028e4 <_ZN3PwmC1Ev>
{
	 if (!(number_of_devices < MAX_NUMBER_OF_DEVICES)) {
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <_ZN5L6474C1Ev+0x70>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d906      	bls.n	8001126 <_ZN5L6474C1Ev+0x36>
		 printf("Instantiation of the L6474 component failed: it can be stacked up to %d times.\r\n", MAX_NUMBER_OF_DEVICES);
 8001118:	2103      	movs	r1, #3
 800111a:	4812      	ldr	r0, [pc, #72]	@ (8001164 <_ZN5L6474C1Ev+0x74>)
 800111c:	f004 fe34 	bl	8005d88 <iprintf>
		 exit(EXIT_FAILURE);
 8001120:	2001      	movs	r0, #1
 8001122:	f004 fc9f 	bl	8005a64 <exit>
	 }

     error_handler_callback = 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	@ 0x24
     device_instance = number_of_devices++;
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <_ZN5L6474C1Ev+0x70>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	b2d1      	uxtb	r1, r2
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <_ZN5L6474C1Ev+0x70>)
 8001136:	7011      	strb	r1, [r2, #0]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
     memset(spi_tx_bursts, 0, L6474_CMD_ARG_MAX_NB_BYTES * MAX_NUMBER_OF_DEVICES * sizeof(uint8_t));
 800113e:	220c      	movs	r2, #12
 8001140:	2100      	movs	r1, #0
 8001142:	4809      	ldr	r0, [pc, #36]	@ (8001168 <_ZN5L6474C1Ev+0x78>)
 8001144:	f004 fe90 	bl	8005e68 <memset>
     memset(spi_rx_bursts, 0, L6474_CMD_ARG_MAX_NB_BYTES * MAX_NUMBER_OF_DEVICES * sizeof(uint8_t));
 8001148:	220c      	movs	r2, #12
 800114a:	2100      	movs	r1, #0
 800114c:	4807      	ldr	r0, [pc, #28]	@ (800116c <_ZN5L6474C1Ev+0x7c>)
 800114e:	f004 fe8b 	bl	8005e68 <memset>
}
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08006b90 	.word	0x08006b90
 8001160:	200000b8 	.word	0x200000b8
 8001164:	08006a74 	.word	0x08006a74
 8001168:	200000bc 	.word	0x200000bc
 800116c:	200000c8 	.word	0x200000c8

08001170 <_ZN5L647415attach_flag_irqEPFvvE>:

void L6474::attach_flag_irq(void (*fptr)(void))
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	irqHandlers.irq.func = fptr;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <_ZN5L647415attach_flag_irqEPFvvE+0x1c>)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6093      	str	r3, [r2, #8]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000208 	.word	0x20000208

08001190 <_ZN5L647415enable_flag_irqEv>:

void L6474::enable_flag_irq(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	irqHandlers.irq.enabled = true;
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <_ZN5L647415enable_flag_irqEv+0x18>)
 800119a:	2201      	movs	r2, #1
 800119c:	60da      	str	r2, [r3, #12]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000208 	.word	0x20000208

080011ac <_ZN5L647424L6474_AttachErrorHandlerEPFvtE>:
{
	irqHandlers.irq.enabled = false;
}

void L6474::L6474_AttachErrorHandler(void (*callback)(uint16_t error))
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  error_handler_callback = (void (*)(uint16_t error)) callback;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <_ZN5L647410L6474_InitEPv>:

status_t L6474::L6474_Init(void *init)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_PwmInit();
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff23 	bl	800101c <_ZN5L647413L6474_PwmInitEv>

  /* Initialise the L6474s ------------------------------------------------*/

  /* Standby-reset deactivation */
  L6474_ReleaseReset();
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff2a 	bl	8001030 <_ZN5L647418L6474_ReleaseResetEv>

  /* Let a delay after reset */
  L6474_Delay(1);
 80011dc:	2101      	movs	r1, #1
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fefa 	bl	8000fd8 <_ZN5L647411L6474_DelayEm>

  /* Set device parameters to the predefined values from "l6474_target_config.h". */
  //L6474_SetDeviceParamsToPredefinedValues();

  if (init == NULL)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <_ZN5L647410L6474_InitEPv+0x2c>
    /* Set device registers to the predefined values from "l6474_target_config.h". */
    L6474_SetRegisterToPredefinedValues();
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fea4 	bl	8001f38 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv>
 80011f0:	e003      	b.n	80011fa <_ZN5L647410L6474_InitEPv+0x34>
  else
    /* Set device registers to the passed initialization values. */
    L6474_SetRegisterToInitializationValues((L6474_init_t *) init);
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 ff99 	bl	800212c <_ZN5L647439L6474_SetRegisterToInitializationValuesEP12L6474_init_t>

  /* Disable L6474 powerstage */
  L6474_CmdDisable();
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fa84 	bl	8001708 <_ZN5L647416L6474_CmdDisableEv>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus();
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fb8d 	bl	8001920 <_ZN5L647418L6474_CmdGetStatusEv>

  return COMPONENT_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN5L647412L6474_ReadIDEPh>:

status_t L6474::L6474_ReadID(uint8_t *id)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  *id = device_instance;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	701a      	strb	r2, [r3, #0]

  return COMPONENT_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <_ZN5L647421L6474_GetAccelerationEv>:

uint16_t L6474::L6474_GetAcceleration(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return (device_prm.acceleration);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800123e:	b29b      	uxth	r3, r3
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <_ZN5L647421L6474_GetCurrentSpeedEv>:

uint16_t L6474::L6474_GetCurrentSpeed(void)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  return device_prm.speed;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001258:	b29b      	uxth	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <_ZN5L647421L6474_GetDecelerationEv>:

uint16_t L6474::L6474_GetDeceleration(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return (device_prm.deceleration);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001272:	b29b      	uxth	r3, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <_ZN5L647420L6474_GetDeviceStateEv>:

motorState_t L6474::L6474_GetDeviceState(void)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  return device_prm.motionState;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <_ZN5L647418L6474_GetFwVersionEv>:

uint8_t L6474::L6474_GetFwVersion(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return (L6474_FW_VERSION);
 80012a0:	2305      	movs	r3, #5
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <_ZN5L647413L6474_GetMarkEv>:

int32_t L6474::L6474_GetMark(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return L6474_ConvertPosition(L6474_CmdGetParam(L6474_MARK));
 80012b4:	2103      	movs	r1, #3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fa3e 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fdb0 	bl	8001e26 <_ZN5L647421L6474_ConvertPositionEm>
 80012c6:	4603      	mov	r3, r0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_ZN5L647417L6474_GetMaxSpeedEv>:

uint16_t L6474::L6474_GetMaxSpeed(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return (device_prm.maxSpeed);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012de:	b29b      	uxth	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <_ZN5L647417L6474_GetMinSpeedEv>:

uint16_t L6474::L6474_GetMinSpeed(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  return (device_prm.minSpeed);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80012f8:	b29b      	uxth	r3, r3
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <_ZN5L647417L6474_GetPositionEv>:

int32_t L6474::L6474_GetPosition(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return L6474_ConvertPosition(L6474_CmdGetParam(L6474_ABS_POS));
 800130c:	2101      	movs	r1, #1
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fa12 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001314:	4603      	mov	r3, r0
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fd84 	bl	8001e26 <_ZN5L647421L6474_ConvertPositionEm>
 800131e:	4603      	mov	r3, r0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_ZN5L647412L6474_GoHomeEv>:

void L6474::L6474_GoHome(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  L6474_GoTo(0);
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f81c 	bl	8001370 <_ZN5L647410L6474_GoToEl>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZN5L647412L6474_GoMarkEv>:

void L6474::L6474_GoMark(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    uint32_t mark;

    mark = L6474_ConvertPosition(L6474_CmdGetParam(L6474_MARK));
 8001348:	2103      	movs	r1, #3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f9f4 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fd66 	bl	8001e26 <_ZN5L647421L6474_ConvertPositionEm>
 800135a:	4603      	mov	r3, r0
 800135c:	60fb      	str	r3, [r7, #12]
    L6474_GoTo(mark);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f804 	bl	8001370 <_ZN5L647410L6474_GoToEl>
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZN5L647410L6474_GoToEl>:

void L6474::L6474_GoTo(int32_t targetPosition)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  motorDir_t direction;
  int32_t steps;

  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b03      	cmp	r3, #3
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN5L647410L6474_GoToEl+0x26>
  {
    L6474_HardStop();
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f83a 	bl	800140a <_ZN5L647414L6474_HardStopEv>
  }

  /* Get current position */
  device_prm.currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(L6474_ABS_POS));
 8001396:	2101      	movs	r1, #1
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f9cd 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 800139e:	4603      	mov	r3, r0
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fd3f 	bl	8001e26 <_ZN5L647421L6474_ConvertPositionEm>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Compute the number of steps to perform */
  steps = targetPosition - device_prm.currentPosition;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	60bb      	str	r3, [r7, #8]

  if (steps >= 0)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db05      	blt.n	80013ca <_ZN5L647410L6474_GoToEl+0x5a>
  {
    device_prm.stepsToTake = steps;
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    direction = FORWARD;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e006      	b.n	80013d8 <_ZN5L647410L6474_GoToEl+0x68>
  }
  else
  {
    device_prm.stepsToTake = -steps;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	425b      	negs	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    direction = BACKWARD;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  }

  if (steps != 0)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d011      	beq.n	8001402 <_ZN5L647410L6474_GoToEl+0x92>
  {
    device_prm.commandExecuted = MOVE_CMD;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    /* Direction setup */
    L6474_SetDirection(direction);
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fc69 	bl	8001cc2 <_ZN5L647418L6474_SetDirectionE10motorDir_t>

    L6474_ComputeSpeedProfile(device_prm.stepsToTake);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fca1 	bl	8001d3e <_ZN5L647425L6474_ComputeSpeedProfileEm>

    /* Motor activation */
    L6474_StartMovement();
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 ff5d 	bl	80022bc <_ZN5L647419L6474_StartMovementEv>
  }
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_ZN5L647414L6474_HardStopEv>:

void L6474::L6474_HardStop(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  /* Disable corresponding PWM */
  L6474_PwmStop();
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f001 fa2e 	bl	8002874 <_ZN5L647413L6474_PwmStopEv>

  /* Set inactive state */
  device_prm.motionState = INACTIVE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2203      	movs	r2, #3
 800141c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  device_prm.commandExecuted = NO_CMD;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2203      	movs	r2, #3
 8001424:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  device_prm.stepsToTake = MAX_STEPS;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800142e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_ZN5L647410L6474_MoveE10motorDir_tm>:

void L6474::L6474_Move(motorDir_t direction, uint32_t stepCount)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	460b      	mov	r3, r1
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	72fb      	strb	r3, [r7, #11]
  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b03      	cmp	r3, #3
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <_ZN5L647410L6474_MoveE10motorDir_tm+0x2a>
  {
    L6474_HardStop();
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff ffd4 	bl	800140a <_ZN5L647414L6474_HardStopEv>
  }

  if (stepCount != 0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01e      	beq.n	80014a6 <_ZN5L647410L6474_MoveE10motorDir_tm+0x6e>
  {
    device_prm.stepsToTake = stepCount;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	63da      	str	r2, [r3, #60]	@ 0x3c

    device_prm.commandExecuted = MOVE_CMD;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    device_prm.currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(L6474_ABS_POS));
 8001476:	2101      	movs	r1, #1
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f95d 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 fccf 	bl	8001e26 <_ZN5L647421L6474_ConvertPositionEm>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Direction setup */
    L6474_SetDirection(direction);
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	4619      	mov	r1, r3
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 fc15 	bl	8001cc2 <_ZN5L647418L6474_SetDirectionE10motorDir_t>

    L6474_ComputeSpeedProfile(stepCount);
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fc4f 	bl	8001d3e <_ZN5L647425L6474_ComputeSpeedProfileEm>

    /* Motor activation */
    L6474_StartMovement();
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 ff0b 	bl	80022bc <_ZN5L647419L6474_StartMovementEv>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_ZN5L64749L6474_RunE10motorDir_t>:

void L6474::L6474_Run(motorDir_t direction)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	70fb      	strb	r3, [r7, #3]
  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <_ZN5L64749L6474_RunE10motorDir_t+0x28>
  {
    L6474_HardStop();
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff9a 	bl	800140a <_ZN5L647414L6474_HardStopEv>
  }

  /* Direction setup */
  L6474_SetDirection(direction);
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	4619      	mov	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fbf1 	bl	8001cc2 <_ZN5L647418L6474_SetDirectionE10motorDir_t>

  device_prm.commandExecuted = RUN_CMD;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Motor activation */
  L6474_StartMovement();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fee7 	bl	80022bc <_ZN5L647419L6474_StartMovementEv>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_ZN5L647421L6474_SetAccelerationEt>:

bool L6474::L6474_SetAcceleration(uint16_t newAcc)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 8001502:	2300      	movs	r3, #0
 8001504:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00d      	beq.n	8001528 <_ZN5L647421L6474_SetAccelerationEt+0x32>
      ((device_prm.motionState == INACTIVE)||
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001512:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001514:	2b03      	cmp	r3, #3
 8001516:	d005      	beq.n	8001524 <_ZN5L647421L6474_SetAccelerationEt+0x2e>
       (device_prm.commandExecuted == RUN_CMD)))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800151e:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <_ZN5L647421L6474_SetAccelerationEt+0x32>
  if ((newAcc != 0)&&
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <_ZN5L647421L6474_SetAccelerationEt+0x34>
 8001528:	2300      	movs	r3, #0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <_ZN5L647421L6474_SetAccelerationEt+0x44>
  {
    device_prm.acceleration = newAcc;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    cmdExecuted = TRUE;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <_ZN5L647421L6474_SetDecelerationEt>:

bool L6474::L6474_SetDeceleration(uint16_t newDec)
{
 8001546:	b480      	push	{r7}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&&
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <_ZN5L647421L6474_SetDecelerationEt+0x32>
      ((device_prm.motionState == INACTIVE)||
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001562:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&&
 8001564:	2b03      	cmp	r3, #3
 8001566:	d005      	beq.n	8001574 <_ZN5L647421L6474_SetDecelerationEt+0x2e>
       (device_prm.commandExecuted == RUN_CMD)))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800156e:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <_ZN5L647421L6474_SetDecelerationEt+0x32>
  if ((newDec != 0)&&
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <_ZN5L647421L6474_SetDecelerationEt+0x34>
 8001578:	2300      	movs	r3, #0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <_ZN5L647421L6474_SetDecelerationEt+0x44>
  {
    device_prm.deceleration = newDec;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	887a      	ldrh	r2, [r7, #2]
 8001582:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    cmdExecuted = TRUE;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <_ZN5L647413L6474_SetHomeEv>:

void L6474::L6474_SetHome(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  L6474_CmdSetParam(L6474_ABS_POS, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2101      	movs	r1, #1
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fa44 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN5L647413L6474_SetMarkEv>:

void L6474::L6474_SetMark(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t mark = L6474_CmdGetParam(L6474_ABS_POS);
 80015b8:	2101      	movs	r1, #1
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8bc 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 80015c0:	60f8      	str	r0, [r7, #12]
  L6474_CmdSetParam(L6474_MARK, mark);
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	2103      	movs	r1, #3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa32 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN5L647417L6474_SetMaxSpeedEt>:

bool L6474::L6474_SetMaxSpeed(uint16_t newMaxSpeed)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (device_prm.minSpeed <= newMaxSpeed) &&
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d919      	bls.n	800161e <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d814      	bhi.n	800161e <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
      (device_prm.minSpeed <= newMaxSpeed) &&
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80015fa:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d30d      	bcc.n	800161e <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
      ((device_prm.motionState == INACTIVE)||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001608:	b2db      	uxtb	r3, r3
      (device_prm.minSpeed <= newMaxSpeed) &&
 800160a:	2b03      	cmp	r3, #3
 800160c:	d005      	beq.n	800161a <_ZN5L647417L6474_SetMaxSpeedEt+0x46>
       (device_prm.commandExecuted == RUN_CMD)))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001614:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <_ZN5L647417L6474_SetMaxSpeedEt+0x4a>
      (device_prm.minSpeed <= newMaxSpeed) &&
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <_ZN5L647417L6474_SetMaxSpeedEt+0x4c>
 800161e:	2300      	movs	r3, #0
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <_ZN5L647417L6474_SetMaxSpeedEt+0x5c>
  {
    device_prm.maxSpeed = newMaxSpeed;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    cmdExecuted = TRUE;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <_ZN5L647417L6474_SetMinSpeedEt>:

bool L6474::L6474_SetMinSpeed(uint16_t newMinSpeed)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  bool cmdExecuted = FALSE;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= device_prm.maxSpeed) &&
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d919      	bls.n	8001686 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001658:	4293      	cmp	r3, r2
 800165a:	d814      	bhi.n	8001686 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
      (newMinSpeed <= device_prm.maxSpeed) &&
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001662:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001664:	887a      	ldrh	r2, [r7, #2]
 8001666:	429a      	cmp	r2, r3
 8001668:	d80d      	bhi.n	8001686 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
      ((device_prm.motionState == INACTIVE)||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001670:	b2db      	uxtb	r3, r3
      (newMinSpeed <= device_prm.maxSpeed) &&
 8001672:	2b03      	cmp	r3, #3
 8001674:	d005      	beq.n	8001682 <_ZN5L647417L6474_SetMinSpeedEt+0x46>
       (device_prm.commandExecuted == RUN_CMD)))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800167c:	b2db      	uxtb	r3, r3
      ((device_prm.motionState == INACTIVE)||
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <_ZN5L647417L6474_SetMinSpeedEt+0x4a>
      (newMinSpeed <= device_prm.maxSpeed) &&
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <_ZN5L647417L6474_SetMinSpeedEt+0x4c>
 8001686:	2300      	movs	r3, #0
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <_ZN5L647417L6474_SetMinSpeedEt+0x5c>
  {
    device_prm.minSpeed = newMinSpeed;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    cmdExecuted = TRUE;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <_ZN5L647414L6474_SoftStopEv>:

bool L6474::L6474_SoftStop(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  bool cmdExecuted = FALSE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]
  if (device_prm.motionState != INACTIVE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <_ZN5L647414L6474_SoftStopEv+0x2e>
  {
    device_prm.commandExecuted = SOFT_STOP_CMD;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    cmdExecuted = TRUE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <_ZN5L647421L6474_WaitWhileActiveEv>:

void L6474::L6474_WaitWhileActive(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* Wait while motor is running */
  while (L6474_GetDeviceState() != INACTIVE);
 80016e6:	bf00      	nop
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fdc8 	bl	800127e <_ZN5L647420L6474_GetDeviceStateEv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	bf14      	ite	ne
 80016f4:	2301      	movne	r3, #1
 80016f6:	2300      	moveq	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f4      	bne.n	80016e8 <_ZN5L647421L6474_WaitWhileActiveEv+0xa>
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN5L647416L6474_CmdDisableEv>:

void L6474::L6474_CmdDisable(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  L6474_SendCommand(L6474_DISABLE);
 8001710:	21a8      	movs	r1, #168	@ 0xa8
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fbbe 	bl	8001e94 <_ZN5L647417L6474_SendCommandEh>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN5L647415L6474_CmdEnableEv>:

void L6474::L6474_CmdEnable(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  L6474_SendCommand(L6474_ENABLE);
 8001728:	21b8      	movs	r1, #184	@ 0xb8
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fbb2 	bl	8001e94 <_ZN5L647417L6474_SendCommandEh>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>:

uint32_t L6474::L6474_CmdGetParam(L6474_Registers_t parameter)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 8001748:	4b71      	ldr	r3, [pc, #452]	@ (8001910 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1d8>)
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;
 800175a:	2300      	movs	r3, #0
 800175c:	74bb      	strb	r3, [r7, #18]

  do
  {
    spi_preemtion_by_isr = FALSE;
 800175e:	4b6d      	ldr	r3, [pc, #436]	@ (8001914 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1dc>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001764:	7cbb      	ldrb	r3, [r7, #18]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x3c>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fc40 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 8001770:	2300      	movs	r3, #0
 8001772:	74bb      	strb	r3, [r7, #18]
    }

    for (i = 0; i < number_of_devices; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e02b      	b.n	80017d2 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x9a>
    {
      spi_tx_bursts[0][i] = L6474_NOP;
 800177a:	4a67      	ldr	r2, [pc, #412]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[1][i] = L6474_NOP;
 8001784:	4a64      	ldr	r2, [pc, #400]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	4413      	add	r3, r2
 800178a:	3303      	adds	r3, #3
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[2][i] = L6474_NOP;
 8001790:	4a61      	ldr	r2, [pc, #388]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	4413      	add	r3, r2
 8001796:	3306      	adds	r3, #6
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[3][i] = L6474_NOP;
 800179c:	4a5e      	ldr	r2, [pc, #376]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4413      	add	r3, r2
 80017a2:	3309      	adds	r3, #9
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
      spi_rx_bursts[1][i] = 0;
 80017a8:	4a5c      	ldr	r2, [pc, #368]	@ (800191c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4413      	add	r3, r2
 80017ae:	3303      	adds	r3, #3
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
      spi_rx_bursts[2][i] = 0;
 80017b4:	4a59      	ldr	r2, [pc, #356]	@ (800191c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	4413      	add	r3, r2
 80017ba:	3306      	adds	r3, #6
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
      spi_rx_bursts[3][i] = 0;
 80017c0:	4a56      	ldr	r2, [pc, #344]	@ (800191c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4413      	add	r3, r2
 80017c6:	3309      	adds	r3, #9
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001910 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1d8>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	4293      	cmp	r3, r2
 80017dc:	d3cd      	bcc.n	800177a <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x42>
    }

    switch (parameter)
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	2b18      	cmp	r3, #24
 80017e4:	d84a      	bhi.n	800187c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x144>
 80017e6:	a201      	add	r2, pc, #4	@ (adr r2, 80017ec <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0xb4>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	08001851 	.word	0x08001851
 80017f0:	08001865 	.word	0x08001865
 80017f4:	08001851 	.word	0x08001851
 80017f8:	0800187d 	.word	0x0800187d
 80017fc:	0800187d 	.word	0x0800187d
 8001800:	0800187d 	.word	0x0800187d
 8001804:	0800187d 	.word	0x0800187d
 8001808:	0800187d 	.word	0x0800187d
 800180c:	0800187d 	.word	0x0800187d
 8001810:	0800187d 	.word	0x0800187d
 8001814:	0800187d 	.word	0x0800187d
 8001818:	0800187d 	.word	0x0800187d
 800181c:	0800187d 	.word	0x0800187d
 8001820:	0800187d 	.word	0x0800187d
 8001824:	0800187d 	.word	0x0800187d
 8001828:	0800187d 	.word	0x0800187d
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800187d 	.word	0x0800187d
 8001834:	0800187d 	.word	0x0800187d
 8001838:	0800187d 	.word	0x0800187d
 800183c:	0800187d 	.word	0x0800187d
 8001840:	0800187d 	.word	0x0800187d
 8001844:	0800187d 	.word	0x0800187d
 8001848:	08001865 	.word	0x08001865
 800184c:	08001865 	.word	0x08001865
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spi_tx_bursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (parameter);
 8001850:	7c7b      	ldrb	r3, [r7, #17]
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	b2d1      	uxtb	r1, r2
 800185a:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 800185c:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 800185e:	2303      	movs	r3, #3
 8001860:	74fb      	strb	r3, [r7, #19]
        break;
 8001862:	e016      	b.n	8001892 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x15a>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spi_tx_bursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (parameter);
 8001864:	7c7b      	ldrb	r3, [r7, #17]
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b2d1      	uxtb	r1, r2
 800186e:	4a2a      	ldr	r2, [pc, #168]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001870:	4413      	add	r3, r2
 8001872:	460a      	mov	r2, r1
 8001874:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8001876:	2302      	movs	r3, #2
 8001878:	74fb      	strb	r3, [r7, #19]
        break;
 800187a:	e00a      	b.n	8001892 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x15a>
      default:
        spi_tx_bursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (parameter);
 800187c:	7c7b      	ldrb	r3, [r7, #17]
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	f042 0220 	orr.w	r2, r2, #32
 8001884:	b2d1      	uxtb	r1, r2
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 8001888:	4413      	add	r3, r2
 800188a:	460a      	mov	r2, r1
 800188c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	74fb      	strb	r3, [r7, #19]
    }

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fbb7 	bl	8001006 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 8001898:	2301      	movs	r3, #1
 800189a:	74bb      	strb	r3, [r7, #18]
  do
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1dc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f af5c 	bne.w	800175e <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x26>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80018a6:	7cfb      	ldrb	r3, [r7, #19]
 80018a8:	f1c3 0303 	rsb	r3, r3, #3
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e012      	b.n	80018d6 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spi_tx_bursts[i][0], &spi_rx_bursts[i][0]);
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	4a17      	ldr	r2, [pc, #92]	@ (8001918 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e0>)
 80018ba:	1899      	adds	r1, r3, r2
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	4a15      	ldr	r2, [pc, #84]	@ (800191c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 80018c6:	4413      	add	r3, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fcce 	bl	800226c <_ZN5L647416L6474_WriteBytesEPhS0_>
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d9e9      	bls.n	80018b0 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x178>
  }

  spiRxData = ((uint32_t)spi_rx_bursts[1][spiIndex] << 16) |
 80018dc:	7c7b      	ldrb	r3, [r7, #17]
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 80018e0:	4413      	add	r3, r2
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	041a      	lsls	r2, r3, #16
              (spi_rx_bursts[2][spiIndex] << 8) |
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 80018ea:	440b      	add	r3, r1
 80018ec:	799b      	ldrb	r3, [r3, #6]
 80018ee:	021b      	lsls	r3, r3, #8
  spiRxData = ((uint32_t)spi_rx_bursts[1][spiIndex] << 16) |
 80018f0:	4313      	orrs	r3, r2
              (spi_rx_bursts[3][spiIndex]);
 80018f2:	7c7a      	ldrb	r2, [r7, #17]
 80018f4:	4909      	ldr	r1, [pc, #36]	@ (800191c <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t+0x1e4>)
 80018f6:	440a      	add	r2, r1
 80018f8:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spi_rx_bursts[1][spiIndex] << 16) |
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]

  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fb76 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>

  return (spiRxData);
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000b8 	.word	0x200000b8
 8001914:	200000b9 	.word	0x200000b9
 8001918:	200000bc 	.word	0x200000bc
 800191c:	200000c8 	.word	0x200000c8

08001920 <_ZN5L647418L6474_CmdGetStatusEv>:

uint16_t L6474::L6474_CmdGetStatus(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 8001928:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <_ZN5L647418L6474_CmdGetStatusEv+0x100>)
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	3b01      	subs	r3, #1
 8001938:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;
 800193a:	2300      	movs	r3, #0
 800193c:	72fb      	strb	r3, [r7, #11]

  do
  {
    spi_preemtion_by_isr = FALSE;
 800193e:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <_ZN5L647418L6474_CmdGetStatusEv+0x104>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <_ZN5L647418L6474_CmdGetStatusEv+0x34>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fb50 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 8001950:	2300      	movs	r3, #0
 8001952:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < number_of_devices; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e01f      	b.n	800199a <_ZN5L647418L6474_CmdGetStatusEv+0x7a>
    {
       spi_tx_bursts[0][i] = L6474_NOP;
 800195a:	4a33      	ldr	r2, [pc, #204]	@ (8001a28 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
       spi_tx_bursts[1][i] = L6474_NOP;
 8001964:	4a30      	ldr	r2, [pc, #192]	@ (8001a28 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	3303      	adds	r3, #3
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
       spi_tx_bursts[2][i] = L6474_NOP;
 8001970:	4a2d      	ldr	r2, [pc, #180]	@ (8001a28 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	3306      	adds	r3, #6
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
       spi_rx_bursts[1][i] = 0;
 800197c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a2c <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4413      	add	r3, r2
 8001982:	3303      	adds	r3, #3
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
       spi_rx_bursts[2][i] = 0;
 8001988:	4a28      	ldr	r2, [pc, #160]	@ (8001a2c <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4413      	add	r3, r2
 800198e:	3306      	adds	r3, #6
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <_ZN5L647418L6474_CmdGetStatusEv+0x100>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d3d9      	bcc.n	800195a <_ZN5L647418L6474_CmdGetStatusEv+0x3a>
    }
    spi_tx_bursts[0][spiIndex] = L6474_GET_STATUS;
 80019a6:	7abb      	ldrb	r3, [r7, #10]
 80019a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 80019aa:	21d0      	movs	r1, #208	@ 0xd0
 80019ac:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fb29 	bl	8001006 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	72fb      	strb	r3, [r7, #11]
  do
 80019b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <_ZN5L647418L6474_CmdGetStatusEv+0x104>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1be      	bne.n	800193e <_ZN5L647418L6474_CmdGetStatusEv+0x1e>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e012      	b.n	80019ec <_ZN5L647418L6474_CmdGetStatusEv+0xcc>
  {
     L6474_WriteBytes(&spi_tx_bursts[i][0], &spi_rx_bursts[i][0]);
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	4a16      	ldr	r2, [pc, #88]	@ (8001a28 <_ZN5L647418L6474_CmdGetStatusEv+0x108>)
 80019d0:	1899      	adds	r1, r3, r2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 80019dc:	4413      	add	r3, r2
 80019de:	461a      	mov	r2, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fc43 	bl	800226c <_ZN5L647416L6474_WriteBytesEPhS0_>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d9e9      	bls.n	80019c6 <_ZN5L647418L6474_CmdGetStatusEv+0xa6>
  }
  status = (spi_rx_bursts[1][spiIndex] << 8) | (spi_rx_bursts[2][spiIndex]);
 80019f2:	7abb      	ldrb	r3, [r7, #10]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 80019f6:	4413      	add	r3, r2
 80019f8:	78db      	ldrb	r3, [r3, #3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	7abb      	ldrb	r3, [r7, #10]
 8001a02:	490a      	ldr	r1, [pc, #40]	@ (8001a2c <_ZN5L647418L6474_CmdGetStatusEv+0x10c>)
 8001a04:	440b      	add	r3, r1
 8001a06:	799b      	ldrb	r3, [r3, #6]
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	813b      	strh	r3, [r7, #8]

  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff faed 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>

  return (status);
 8001a16:	893b      	ldrh	r3, [r7, #8]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200000b8 	.word	0x200000b8
 8001a24:	200000b9 	.word	0x200000b9
 8001a28:	200000bc 	.word	0x200000bc
 8001a2c:	200000c8 	.word	0x200000c8

08001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>:
{
  L6474_SendCommand(L6474_NOP);
}

void L6474::L6474_CmdSetParam(L6474_Registers_t parameter, uint32_t value)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	72fb      	strb	r3, [r7, #11]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 8001a42:	4b69      	ldr	r3, [pc, #420]	@ (8001be8 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1b8>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
  do
  {
    spi_preemtion_by_isr = FALSE;
 8001a58:	4b64      	ldr	r3, [pc, #400]	@ (8001bec <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1bc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001a5e:	7cbb      	ldrb	r3, [r7, #18]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x3e>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fac3 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	74bb      	strb	r3, [r7, #18]
    }

    for (i = 0; i < number_of_devices; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e019      	b.n	8001aa8 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x78>
    {
      spi_tx_bursts[0][i] = L6474_NOP;
 8001a74:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	4413      	add	r3, r2
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[1][i] = L6474_NOP;
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4413      	add	r3, r2
 8001a84:	3303      	adds	r3, #3
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[2][i] = L6474_NOP;
 8001a8a:	4a59      	ldr	r2, [pc, #356]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	4413      	add	r3, r2
 8001a90:	3306      	adds	r3, #6
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
      spi_tx_bursts[3][i] = L6474_NOP;
 8001a96:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3309      	adds	r3, #9
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8001be8 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1b8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d3df      	bcc.n	8001a74 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x44>
    }

    switch (parameter)
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	2b17      	cmp	r3, #23
 8001aba:	d85a      	bhi.n	8001b72 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x142>
 8001abc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac4 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x94>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001b25 	.word	0x08001b25
 8001ac8:	08001b53 	.word	0x08001b53
 8001acc:	08001b25 	.word	0x08001b25
 8001ad0:	08001b73 	.word	0x08001b73
 8001ad4:	08001b73 	.word	0x08001b73
 8001ad8:	08001b73 	.word	0x08001b73
 8001adc:	08001b73 	.word	0x08001b73
 8001ae0:	08001b73 	.word	0x08001b73
 8001ae4:	08001b73 	.word	0x08001b73
 8001ae8:	08001b73 	.word	0x08001b73
 8001aec:	08001b73 	.word	0x08001b73
 8001af0:	08001b73 	.word	0x08001b73
 8001af4:	08001b73 	.word	0x08001b73
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b73 	.word	0x08001b73
 8001b00:	08001b73 	.word	0x08001b73
 8001b04:	08001b73 	.word	0x08001b73
 8001b08:	08001b73 	.word	0x08001b73
 8001b0c:	08001b73 	.word	0x08001b73
 8001b10:	08001b73 	.word	0x08001b73
 8001b14:	08001b73 	.word	0x08001b73
 8001b18:	08001b73 	.word	0x08001b73
 8001b1c:	08001b73 	.word	0x08001b73
 8001b20:	08001b53 	.word	0x08001b53
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
          spi_tx_bursts[0][spiIndex] = parameter;
 8001b24:	7c7b      	ldrb	r3, [r7, #17]
 8001b26:	4932      	ldr	r1, [pc, #200]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001b28:	7afa      	ldrb	r2, [r7, #11]
 8001b2a:	54ca      	strb	r2, [r1, r3]
          spi_tx_bursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0c1a      	lsrs	r2, r3, #16
 8001b30:	7c7b      	ldrb	r3, [r7, #17]
 8001b32:	b2d1      	uxtb	r1, r2
 8001b34:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001b36:	4413      	add	r3, r2
 8001b38:	460a      	mov	r2, r1
 8001b3a:	70da      	strb	r2, [r3, #3]
          spi_tx_bursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0a1a      	lsrs	r2, r3, #8
 8001b40:	7c7b      	ldrb	r3, [r7, #17]
 8001b42:	b2d1      	uxtb	r1, r2
 8001b44:	4a2a      	ldr	r2, [pc, #168]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001b46:	4413      	add	r3, r2
 8001b48:	460a      	mov	r2, r1
 8001b4a:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 3;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	74fb      	strb	r3, [r7, #19]
          break;
 8001b50:	e017      	b.n	8001b82 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x152>
      case L6474_EL_POS: ;
      case L6474_CONFIG:
          spi_tx_bursts[1][spiIndex] = parameter;
 8001b52:	7c7b      	ldrb	r3, [r7, #17]
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001b56:	4413      	add	r3, r2
 8001b58:	7afa      	ldrb	r2, [r7, #11]
 8001b5a:	70da      	strb	r2, [r3, #3]
          spi_tx_bursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0a1a      	lsrs	r2, r3, #8
 8001b60:	7c7b      	ldrb	r3, [r7, #17]
 8001b62:	b2d1      	uxtb	r1, r2
 8001b64:	4a22      	ldr	r2, [pc, #136]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001b66:	4413      	add	r3, r2
 8001b68:	460a      	mov	r2, r1
 8001b6a:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	74fb      	strb	r3, [r7, #19]
          break;
 8001b70:	e007      	b.n	8001b82 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x152>
      default:
          spi_tx_bursts[2][spiIndex] = parameter;
 8001b72:	7c7b      	ldrb	r3, [r7, #17]
 8001b74:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001b76:	4413      	add	r3, r2
 8001b78:	7afa      	ldrb	r2, [r7, #11]
 8001b7a:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	74fb      	strb	r3, [r7, #19]
          break;
 8001b80:	bf00      	nop
    }
    spi_tx_bursts[3][spiIndex] = (uint8_t)(value);
 8001b82:	7c7b      	ldrb	r3, [r7, #17]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	b2d1      	uxtb	r1, r2
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	725a      	strb	r2, [r3, #9]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff fa38 	bl	8001006 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	74bb      	strb	r3, [r7, #18]
  do
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1bc>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f47f af5a 	bne.w	8001a58 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x28>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001ba4:	7cfb      	ldrb	r3, [r7, #19]
 8001ba6:	f1c3 0303 	rsb	r3, r3, #3
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e012      	b.n	8001bd4 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1a4>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spi_tx_bursts[i][0],&spi_rx_bursts[i][0]);
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf0 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c0>)
 8001bb8:	1899      	adds	r1, r3, r2
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf4 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x1c4>)
 8001bc4:	4413      	add	r3, r2
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 fb4f 	bl	800226c <_ZN5L647416L6474_WriteBytesEPhS0_>
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d9e9      	bls.n	8001bae <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm+0x17e>
  }
  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7ff fa08 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200000b8 	.word	0x200000b8
 8001bec:	200000b9 	.word	0x200000b9
 8001bf0:	200000bc 	.word	0x200000bc
 8001bf4:	200000c8 	.word	0x200000c8

08001bf8 <_ZN5L647424L6474_ReadStatusRegisterEv>:

uint16_t L6474::L6474_ReadStatusRegister(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (L6474_CmdGetParam(L6474_STATUS));
 8001c00:	2119      	movs	r1, #25
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fd98 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29b      	uxth	r3, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t>:

void L6474::L6474_SelectStepMode(motorStepMode_t stepMod)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;

  switch (stepMod)
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d816      	bhi.n	8001c54 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x40>
 8001c26:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x18>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c43 	.word	0x08001c43
 8001c34:	08001c49 	.word	0x08001c49
 8001c38:	08001c4f 	.word	0x08001c4f
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c40:	e00b      	b.n	8001c5a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001c42:	2309      	movs	r3, #9
 8001c44:	73fb      	strb	r3, [r7, #15]
      break;
 8001c46:	e008      	b.n	8001c5a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001c48:	230a      	movs	r3, #10
 8001c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c4c:	e005      	b.n	8001c5a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001c4e:	230b      	movs	r3, #11
 8001c50:	73fb      	strb	r3, [r7, #15]
      break;
 8001c52:	e002      	b.n	8001c5a <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x46>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001c54:	230c      	movs	r3, #12
 8001c56:	73fb      	strb	r3, [r7, #15]
      break;
 8001c58:	bf00      	nop
  }

  /* Eventually deactivate motor */
  if (device_prm.motionState != INACTIVE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <_ZN5L647420L6474_SelectStepModeE15motorStepMode_t+0x62>
  {
    L6474_HardStop();
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fbca 	bl	800140a <_ZN5L647414L6474_HardStopEv>
  }

  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(L6474_STEP_MODE)) ;
 8001c76:	2116      	movs	r1, #22
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fd5d 	bl	8001738 <_ZN5L647417L6474_CmdGetParamE17L6474_Registers_t>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	73bb      	strb	r3, [r7, #14]

  /* Apply new step mode */
  L6474_CmdSetParam(L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001c88:	7bba      	ldrb	r2, [r7, #14]
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	2116      	movs	r1, #22
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fecb 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>

  /* Reset abs pos register */
  L6474_SetHome();
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fc7b 	bl	8001596 <_ZN5L647413L6474_SetHomeEv>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN5L647418L6474_GetDirectionEv>:

motorDir_t L6474::L6474_GetDirection(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return device_prm.direction;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8001cb6:	b2db      	uxtb	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <_ZN5L647418L6474_SetDirectionE10motorDir_t>:

void L6474::L6474_SetDirection(motorDir_t direction)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  if (device_prm.motionState == INACTIVE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	bf0c      	ite	eq
 8001cda:	2301      	moveq	r3, #1
 8001cdc:	2300      	movne	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <_ZN5L647418L6474_SetDirectionE10motorDir_t+0x34>
  {
    device_prm.direction = direction;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    L6474_SetDirectionGpio(direction);
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff f9ad 	bl	8001050 <_ZN5L647422L6474_SetDirectionGpioEh>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZN5L647416L6474_ApplySpeedEt>:

void L6474::L6474_ApplySpeed(uint16_t newSpeed)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	807b      	strh	r3, [r7, #2]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d801      	bhi.n	8001d14 <_ZN5L647416L6474_ApplySpeedEt+0x16>
  {
    newSpeed = L6474_MIN_PWM_FREQ;
 8001d10:	2302      	movs	r3, #2
 8001d12:	807b      	strh	r3, [r7, #2]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d902      	bls.n	8001d24 <_ZN5L647416L6474_ApplySpeedEt+0x26>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8001d1e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d22:	807b      	strh	r3, [r7, #2]
  }

  device_prm.speed = newSpeed;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

  L6474_PwmSetFreq(newSpeed);
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fd5b 	bl	80027ec <_ZN5L647416L6474_PwmSetFreqEt>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZN5L647425L6474_ComputeSpeedProfileEm>:

void L6474::L6474_ComputeSpeedProfile(uint32_t nbSteps)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b089      	sub	sp, #36	@ 0x24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  uint32_t reqAccSteps;
  uint32_t reqDecSteps;

  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = device_prm.minSpeed;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d4e:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (device_prm.maxSpeed - minSpeed);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	8b7b      	ldrh	r3, [r7, #26]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (device_prm.maxSpeed + minSpeed);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	8b7b      	ldrh	r3, [r7, #26]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)device_prm.acceleration;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d8c:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)device_prm.deceleration;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	085b      	lsrs	r3, r3, #1
 8001daa:	617b      	str	r3, [r7, #20]

  if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4413      	add	r3, r2
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d228      	bcs.n	8001e0a <_ZN5L647425L6474_ComputeSpeedProfileEm+0xcc>
  {
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = device_prm.deceleration;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	613b      	str	r3, [r7, #16]
    uint32_t acc = device_prm.acceleration;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	60fb      	str	r3, [r7, #12]

    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	fb03 f202 	mul.w	r2, r3, r2
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d908      	bls.n	8001df8 <_ZN5L647425L6474_ComputeSpeedProfileEm+0xba>
    {
      reqAccSteps = reqDecSteps - 1;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d104      	bne.n	8001dfc <_ZN5L647425L6474_ComputeSpeedProfileEm+0xbe>
      {
        reqAccSteps = 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e001      	b.n	8001dfc <_ZN5L647425L6474_ComputeSpeedProfileEm+0xbe>
      }
    }
    else
    {
      reqAccSteps = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    }
    device_prm.endAccPos = reqAccSteps;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	631a      	str	r2, [r3, #48]	@ 0x30
    device_prm.startDecPos = reqDecSteps;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	639a      	str	r2, [r3, #56]	@ 0x38
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    device_prm.endAccPos = reqAccSteps;
    device_prm.startDecPos = nbSteps - reqDecSteps - 1;
  }
}
 8001e08:	e008      	b.n	8001e1c <_ZN5L647425L6474_ComputeSpeedProfileEm+0xde>
    device_prm.endAccPos = reqAccSteps;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
    device_prm.startDecPos = nbSteps - reqDecSteps - 1;
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	1e5a      	subs	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001e1c:	bf00      	nop
 8001e1e:	3724      	adds	r7, #36	@ 0x24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <_ZN5L647421L6474_ConvertPositionEm>:

int32_t L6474::L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <_ZN5L647421L6474_ConvertPositionEm+0x30>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	603b      	str	r3, [r7, #0]
    abs_position_reg += 1;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	603b      	str	r3, [r7, #0]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e4c:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	425b      	negs	r3, r3
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e001      	b.n	8001e5a <_ZN5L647421L6474_ConvertPositionEm+0x34>
  }
  else
  {
    operation_result = (int32_t) abs_position_reg;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  return operation_result;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <_ZN5L647418L6474_ErrorHandlerEt>:

void L6474::L6474_ErrorHandler(uint16_t error)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	807b      	strh	r3, [r7, #2]
  if (error_handler_callback != 0)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <_ZN5L647418L6474_ErrorHandlerEt+0x20>
  {
    (void) error_handler_callback(error);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	4610      	mov	r0, r2
 8001e82:	4798      	blx	r3
  else
  {
    /* Aborting the program. */
    exit(EXIT_FAILURE);
  }
}
 8001e84:	e002      	b.n	8001e8c <_ZN5L647418L6474_ErrorHandlerEt+0x26>
    exit(EXIT_FAILURE);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f003 fdec 	bl	8005a64 <exit>
}
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <_ZN5L647417L6474_SendCommandEh>:

void L6474::L6474_SendCommand(uint8_t param)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  bool itDisable = FALSE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	72fb      	strb	r3, [r7, #11]
  uint8_t spiIndex = number_of_devices - device_instance - 1;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <_ZN5L647417L6474_SendCommandEh+0x90>)
 8001ea6:	781a      	ldrb	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	72bb      	strb	r3, [r7, #10]

  do
  {
    spi_preemtion_by_isr = FALSE;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <_ZN5L647417L6474_SendCommandEh+0x94>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d004      	beq.n	8001ecc <_ZN5L647417L6474_SendCommandEh+0x38>
    {
      /* re-enable L6474_EnableIrq if disable in previous iteration */
      L6474_EnableIrq();
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff f894 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>
      itDisable = FALSE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < number_of_devices; i++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e008      	b.n	8001ee4 <_ZN5L647417L6474_SendCommandEh+0x50>
    {
      spi_tx_bursts[3][i] = L6474_NOP;
 8001ed2:	4a16      	ldr	r2, [pc, #88]	@ (8001f2c <_ZN5L647417L6474_SendCommandEh+0x98>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3309      	adds	r3, #9
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < number_of_devices; i++)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <_ZN5L647417L6474_SendCommandEh+0x90>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d3f0      	bcc.n	8001ed2 <_ZN5L647417L6474_SendCommandEh+0x3e>
    }
    spi_tx_bursts[3][spiIndex] = param;
 8001ef0:	7abb      	ldrb	r3, [r7, #10]
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f2c <_ZN5L647417L6474_SendCommandEh+0x98>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	725a      	strb	r2, [r3, #9]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_DisableIrq();
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f883 	bl	8001006 <_ZN5L647416L6474_DisableIrqEv>
    itDisable = TRUE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	72fb      	strb	r3, [r7, #11]
  do
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_ZN5L647417L6474_SendCommandEh+0x94>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1d4      	bne.n	8001eb6 <_ZN5L647417L6474_SendCommandEh+0x22>
  } while (spi_preemtion_by_isr); // check pre-emption by ISR

  L6474_WriteBytes(&spi_tx_bursts[3][0], &spi_rx_bursts[3][0]);
 8001f0c:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <_ZN5L647417L6474_SendCommandEh+0x9c>)
 8001f0e:	4909      	ldr	r1, [pc, #36]	@ (8001f34 <_ZN5L647417L6474_SendCommandEh+0xa0>)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f9ab 	bl	800226c <_ZN5L647416L6474_WriteBytesEPhS0_>

  /* re-enable L6474_EnableIrq after SPI transfers*/
  L6474_EnableIrq();
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f86a 	bl	8000ff0 <_ZN5L647415L6474_EnableIrqEv>
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200000b8 	.word	0x200000b8
 8001f28:	200000b9 	.word	0x200000b9
 8001f2c:	200000bc 	.word	0x200000bc
 8001f30:	200000d1 	.word	0x200000d1
 8001f34:	200000c5 	.word	0x200000c5

08001f38 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv>:

void L6474::L6474_SetRegisterToPredefinedValues(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  L6474_CmdSetParam(
 8001f40:	2200      	movs	r2, #0
 8001f42:	2101      	movs	r1, #1
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fd73 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fd6e 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(
 8001f54:	2200      	movs	r2, #0
 8001f56:	2103      	movs	r1, #3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fd69 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_MARK,
                    0);
  switch (device_instance)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	f000 8092 	beq.w	800208e <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x156>
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	f300 80d4 	bgt.w	8002118 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x42>
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d045      	beq.n	8002004 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0xcc>
                        (uint16_t)L6474_CONF_PARAM_SR_DEVICE_2 |
                        (uint16_t)L6474_CONF_PARAM_TOFF_DEVICE_2);
      break;
    default: ;
  }
}
 8001f78:	e0ce      	b.n	8002118 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8001f7a:	4969      	ldr	r1, [pc, #420]	@ (8002120 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e8>)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fb77 	bl	8002670 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 8001f82:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fd71 	bl	8000a6c <__aeabi_f2uiz>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2109      	movs	r1, #9
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fd4d 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8001f96:	2235      	movs	r2, #53	@ 0x35
 8001f98:	210e      	movs	r1, #14
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fd48 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8001fa0:	4960      	ldr	r1, [pc, #384]	@ (8002124 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1ec>)
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fb9c 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8001fa8:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fd5e 	bl	8000a6c <__aeabi_f2uiz>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fd3a 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8001fbc:	495a      	ldr	r1, [pc, #360]	@ (8002128 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1f0>)
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fb8e 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8001fc4:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fd50 	bl	8000a6c <__aeabi_f2uiz>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fd2c 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2113      	movs	r1, #19
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fd27 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8001fe2:	228c      	movs	r2, #140	@ 0x8c
 8001fe4:	2116      	movs	r1, #22
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fd22 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8001fec:	22cf      	movs	r2, #207	@ 0xcf
 8001fee:	2117      	movs	r1, #23
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fd1d 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8001ff6:	f44f 5232 	mov.w	r2, #11392	@ 0x2c80
 8001ffa:	2118      	movs	r1, #24
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fd17 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      break;
 8002002:	e089      	b.n	8002118 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002004:	4946      	ldr	r1, [pc, #280]	@ (8002120 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e8>)
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fb32 	bl	8002670 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 800200c:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fd2c 	bl	8000a6c <__aeabi_f2uiz>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	2109      	movs	r1, #9
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fd08 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002020:	2235      	movs	r2, #53	@ 0x35
 8002022:	210e      	movs	r1, #14
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fd03 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 800202a:	493e      	ldr	r1, [pc, #248]	@ (8002124 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1ec>)
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fb57 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8002032:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fd19 	bl	8000a6c <__aeabi_f2uiz>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	210f      	movs	r1, #15
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fcf5 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 8002046:	4938      	ldr	r1, [pc, #224]	@ (8002128 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1f0>)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fb49 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 800204e:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fd0b 	bl	8000a6c <__aeabi_f2uiz>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	2110      	movs	r1, #16
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff fce7 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002062:	2201      	movs	r2, #1
 8002064:	2113      	movs	r1, #19
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fce2 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 800206c:	228c      	movs	r2, #140	@ 0x8c
 800206e:	2116      	movs	r1, #22
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fcdd 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002076:	22cf      	movs	r2, #207	@ 0xcf
 8002078:	2117      	movs	r1, #23
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fcd8 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002080:	f44f 5232 	mov.w	r2, #11392	@ 0x2c80
 8002084:	2118      	movs	r1, #24
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fcd2 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      break;
 800208c:	e044      	b.n	8002118 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e0>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 800208e:	4924      	ldr	r1, [pc, #144]	@ (8002120 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1e8>)
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 faed 	bl	8002670 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 8002096:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fce7 	bl	8000a6c <__aeabi_f2uiz>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	2109      	movs	r1, #9
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fcc3 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80020aa:	2235      	movs	r2, #53	@ 0x35
 80020ac:	210e      	movs	r1, #14
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fcbe 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 80020b4:	491b      	ldr	r1, [pc, #108]	@ (8002124 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1ec>)
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fb12 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 80020bc:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fcd4 	bl	8000a6c <__aeabi_f2uiz>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	210f      	movs	r1, #15
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fcb0 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 80020d0:	4915      	ldr	r1, [pc, #84]	@ (8002128 <_ZN5L647435L6474_SetRegisterToPredefinedValuesEv+0x1f0>)
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fb04 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 80020d8:	4603      	mov	r3, r0
      L6474_CmdSetParam(
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fcc6 	bl	8000a6c <__aeabi_f2uiz>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	2110      	movs	r1, #16
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fca2 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80020ec:	2201      	movs	r2, #1
 80020ee:	2113      	movs	r1, #19
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fc9d 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 80020f6:	228c      	movs	r2, #140	@ 0x8c
 80020f8:	2116      	movs	r1, #22
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fc98 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 8002100:	22cf      	movs	r2, #207	@ 0xcf
 8002102:	2117      	movs	r1, #23
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fc93 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      L6474_CmdSetParam(
 800210a:	f44f 5232 	mov.w	r2, #11392	@ 0x2c80
 800210e:	2118      	movs	r1, #24
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fc8d 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
      break;
 8002116:	bf00      	nop
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	437a0000 	.word	0x437a0000
 8002124:	40400000 	.word	0x40400000
 8002128:	41a80000 	.word	0x41a80000

0800212c <_ZN5L647439L6474_SetRegisterToInitializationValuesEP12L6474_init_t>:

void L6474::L6474_SetRegisterToInitializationValues(L6474_init_t *init)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  L6474_CmdSetParam(
 8002136:	2200      	movs	r2, #0
 8002138:	2101      	movs	r1, #1
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fc78 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_ABS_POS,
                    0
                    );
  L6474_CmdSetParam(
 8002140:	2200      	movs	r2, #0
 8002142:	2102      	movs	r1, #2
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fc73 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_EL_POS,
                    0
                    );
  L6474_CmdSetParam(
 800214a:	2200      	movs	r2, #0
 800214c:	2103      	movs	r1, #3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fc6e 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    L6474_MARK,
                    0
                    );
  L6474_CmdSetParam(
                    L6474_TVAL,
                    L6474_Tval_Current_to_Par(init->torque_regulation_current_mA)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fa88 	bl	8002670 <_ZN5L647425L6474_Tval_Current_to_ParEf>
 8002160:	4603      	mov	r3, r0
  L6474_CmdSetParam(
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fc82 	bl	8000a6c <__aeabi_f2uiz>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	2109      	movs	r1, #9
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fc5e 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_T_FAST,
                    (uint8_t) init->maximum_fast_decay_time |
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	7e9a      	ldrb	r2, [r3, #26]
                    (uint8_t) init->fall_time
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	7e5b      	ldrb	r3, [r3, #25]
                    (uint8_t) init->maximum_fast_decay_time |
 800217c:	4313      	orrs	r3, r2
 800217e:	b2db      	uxtb	r3, r3
  L6474_CmdSetParam(
 8002180:	461a      	mov	r2, r3
 8002182:	210e      	movs	r1, #14
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fc53 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_TON_MIN,
                    L6474_Tmin_Time_to_Par(init->minimum_ON_time_us)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 faa5 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 8002196:	4603      	mov	r3, r0
  L6474_CmdSetParam(
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fc67 	bl	8000a6c <__aeabi_f2uiz>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	210f      	movs	r1, #15
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff fc43 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_TOFF_MIN,
                    L6474_Tmin_Time_to_Par(init->minimum_OFF_time_us)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4619      	mov	r1, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fa95 	bl	80026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>
 80021b6:	4603      	mov	r3, r0
  L6474_CmdSetParam(
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fc57 	bl	8000a6c <__aeabi_f2uiz>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	2110      	movs	r1, #16
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fc33 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_OCD_TH,
                    init->overcurrent_threshold
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(
 80021ce:	461a      	mov	r2, r3
 80021d0:	2113      	movs	r1, #19
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fc2c 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_STEP_MODE,
                    (uint8_t) init->step_selection |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7dda      	ldrb	r2, [r3, #23]
                    (uint8_t) init->sync_selection
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7e1b      	ldrb	r3, [r3, #24]
                    (uint8_t) init->step_selection |
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b2db      	uxtb	r3, r3
  L6474_CmdSetParam(
 80021e4:	461a      	mov	r2, r3
 80021e6:	2116      	movs	r1, #22
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff fc21 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_ALARM_EN,
                    init->alarm
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  L6474_CmdSetParam(
 80021f2:	461a      	mov	r2, r3
 80021f4:	2117      	movs	r1, #23
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fc1a 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_CmdSetParam(
                    L6474_CONFIG,
                    (uint16_t) init->clock |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
                    (uint16_t) init->torque_regulation_method |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	7d9b      	ldrb	r3, [r3, #22]
                    (uint16_t) init->clock |
 8002206:	4313      	orrs	r3, r2
 8002208:	b2da      	uxtb	r2, r3
                    (uint16_t) init->overcurrent_shutwdown |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7d5b      	ldrb	r3, [r3, #21]
                    (uint16_t) init->torque_regulation_method |
 800220e:	4313      	orrs	r3, r2
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
                    (uint16_t) init->slew_rate |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
                    (uint16_t) init->overcurrent_shutwdown |
 8002218:	4313      	orrs	r3, r2
                    (uint16_t) init->target_swicthing_period
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
                    (uint16_t) init->slew_rate |
 800221e:	4313      	orrs	r3, r2
  L6474_CmdSetParam(
 8002220:	461a      	mov	r2, r3
 8002222:	2118      	movs	r1, #24
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fc03 	bl	8001a30 <_ZN5L647417L6474_CmdSetParamE17L6474_Registers_tm>
                    );
  L6474_SetAcceleration((uint16_t) init->acceleration_pps_2);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff f95f 	bl	80014f6 <_ZN5L647421L6474_SetAccelerationEt>
  L6474_SetDeceleration((uint16_t) init->deceleration_pps_2);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	b29b      	uxth	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff f980 	bl	8001546 <_ZN5L647421L6474_SetDecelerationEt>
  L6474_SetMaxSpeed((uint16_t) init->maximum_speed_pps);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	b29b      	uxth	r3, r3
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff f9c0 	bl	80015d4 <_ZN5L647417L6474_SetMaxSpeedEt>
  L6474_SetMinSpeed((uint16_t) init->minimum_speed_pps);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4619      	mov	r1, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff f9ed 	bl	800163c <_ZN5L647417L6474_SetMinSpeedEt>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <_ZN5L647416L6474_WriteBytesEPhS0_>:

void L6474::L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  if (L6474_SpiWriteBytes(pByteToTransmit, pReceivedByte) != 0)
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7fe fefb 	bl	8001078 <_ZN5L647419L6474_SpiWriteBytesEPhS0_>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <_ZN5L647416L6474_WriteBytesEPhS0_+0x30>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002292:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7ff fde5 	bl	8001e66 <_ZN5L647418L6474_ErrorHandlerEt>
  }

  if (isr_flag)
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <_ZN5L647416L6474_WriteBytesEPhS0_+0x48>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <_ZN5L647416L6474_WriteBytesEPhS0_+0x3e>
  {
    spi_preemtion_by_isr = TRUE;
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <_ZN5L647416L6474_WriteBytesEPhS0_+0x4c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
  }
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200000ba 	.word	0x200000ba
 80022b8:	200000b9 	.word	0x200000b9

080022bc <_ZN5L647419L6474_StartMovementEv>:
  device_prm.direction = FORWARD;
  device_prm.motionState = INACTIVE;
}

void L6474::L6474_StartMovement(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Enable L6474 powerstage */
  L6474_CmdEnable();
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff fa2b 	bl	8001720 <_ZN5L647415L6474_CmdEnableEv>
  if (device_prm.endAccPos != 0)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <_ZN5L647419L6474_StartMovementEv+0x2a>
  {
    device_prm.motionState = ACCELERATING;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80022e4:	e003      	b.n	80022ee <_ZN5L647419L6474_StartMovementEv+0x32>
  }
  else
  {
    device_prm.motionState = DECELERATING;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }
  device_prm.accu = 0;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
  device_prm.relativePos = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34
  L6474_ApplySpeed(device_prm.minSpeed);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002300:	b29b      	uxth	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fcfa 	bl	8001cfe <_ZN5L647416L6474_ApplySpeedEt>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <_ZN5L647422L6474_StepClockHandlerEv>:

void L6474::L6474_StepClockHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	@ 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Set isr flag */
  isr_flag = TRUE;
 800231c:	4b9a      	ldr	r3, [pc, #616]	@ (8002588 <_ZN5L647422L6474_StepClockHandlerEv+0x274>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]

  /* Incrementation of the relative position */
  device_prm.relativePos++;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	635a      	str	r2, [r3, #52]	@ 0x34

  switch (device_prm.motionState)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	f000 809d 	beq.w	8002474 <_ZN5L647422L6474_StepClockHandlerEv+0x160>
 800233a:	2b02      	cmp	r3, #2
 800233c:	f300 8187 	bgt.w	800264e <_ZN5L647422L6474_StepClockHandlerEv+0x33a>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <_ZN5L647422L6474_StepClockHandlerEv+0x38>
 8002344:	2b01      	cmp	r3, #1
 8002346:	f000 80e2 	beq.w	800250e <_ZN5L647422L6474_StepClockHandlerEv+0x1fa>
      }
      break;
    }
    default:
    {
      break;
 800234a:	e180      	b.n	800264e <_ZN5L647422L6474_StepClockHandlerEv+0x33a>
        uint32_t relPos = device_prm.relativePos;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002350:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = device_prm.endAccPos;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	613b      	str	r3, [r7, #16]
        uint16_t speed = device_prm.speed;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800235e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        uint32_t acc = ((uint32_t)device_prm.acceleration << 16);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002366:	b29b      	uxth	r3, r3
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	60fb      	str	r3, [r7, #12]
        if ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d00a      	beq.n	800238e <_ZN5L647422L6474_StepClockHandlerEv+0x7a>
            ((device_prm.commandExecuted != RUN_CMD)&&
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800237e:	b2db      	uxtb	r3, r3
        if ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <_ZN5L647422L6474_StepClockHandlerEv+0x7e>
             (relPos == device_prm.startDecPos)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            ((device_prm.commandExecuted != RUN_CMD)&&
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	429a      	cmp	r2, r3
 800238c:	d101      	bne.n	8002392 <_ZN5L647422L6474_StepClockHandlerEv+0x7e>
        if ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <_ZN5L647422L6474_StepClockHandlerEv+0x80>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <_ZN5L647422L6474_StepClockHandlerEv+0x94>
          device_prm.motionState = DECELERATING;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          device_prm.accu = 0;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80023a6:	e154      	b.n	8002652 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
        else if ((speed >= device_prm.maxSpeed)||
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d209      	bcs.n	80023ca <_ZN5L647422L6474_StepClockHandlerEv+0xb6>
                 ((device_prm.commandExecuted != RUN_CMD)&&
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80023bc:	b2db      	uxtb	r3, r3
        else if ((speed >= device_prm.maxSpeed)||
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <_ZN5L647422L6474_StepClockHandlerEv+0xba>
                 ((device_prm.commandExecuted != RUN_CMD)&&
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d101      	bne.n	80023ce <_ZN5L647422L6474_StepClockHandlerEv+0xba>
        else if ((speed >= device_prm.maxSpeed)||
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <_ZN5L647422L6474_StepClockHandlerEv+0xbc>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <_ZN5L647422L6474_StepClockHandlerEv+0xca>
          device_prm.motionState = STEADY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        break;
 80023dc:	e139      	b.n	8002652 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
          bool speedUpdated = FALSE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          if (speed == 0) speed =1;
 80023e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <_ZN5L647422L6474_StepClockHandlerEv+0xda>
 80023ea:	2301      	movs	r3, #1
 80023ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
          device_prm.accu += acc / speed;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023f4:	68f9      	ldr	r1, [r7, #12]
 80023f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fa:	441a      	add	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
          while (device_prm.accu >= (0X10000L))
 8002400:	e00b      	b.n	800241a <_ZN5L647422L6474_StepClockHandlerEv+0x106>
            device_prm.accu -= (0X10000L);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002406:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	629a      	str	r2, [r3, #40]	@ 0x28
            speed +=1;
 800240e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002410:	3301      	adds	r3, #1
 8002412:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            speedUpdated = TRUE;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          while (device_prm.accu >= (0X10000L))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002422:	4293      	cmp	r3, r2
 8002424:	bf8c      	ite	hi
 8002426:	2301      	movhi	r3, #1
 8002428:	2300      	movls	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e8      	bne.n	8002402 <_ZN5L647422L6474_StepClockHandlerEv+0xee>
          if (speedUpdated)
 8002430:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 810c 	beq.w	8002652 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
            if (speed > device_prm.maxSpeed)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002440:	b29b      	uxth	r3, r3
 8002442:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002444:	429a      	cmp	r2, r3
 8002446:	bf8c      	ite	hi
 8002448:	2301      	movhi	r3, #1
 800244a:	2300      	movls	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <_ZN5L647422L6474_StepClockHandlerEv+0x146>
              speed = device_prm.maxSpeed;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002458:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            device_prm.speed = speed;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800245e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            L6474_ApplySpeed(device_prm.speed);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002468:	b29b      	uxth	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fc46 	bl	8001cfe <_ZN5L647416L6474_ApplySpeedEt>
        break;
 8002472:	e0ee      	b.n	8002652 <_ZN5L647422L6474_StepClockHandlerEv+0x33e>
      uint16_t maxSpeed = device_prm.maxSpeed;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800247a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      uint32_t relativePos = device_prm.relativePos;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002480:	623b      	str	r3, [r7, #32]
      if  ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002488:	b2db      	uxtb	r3, r3
            (relativePos >= (device_prm.startDecPos))) ||
 800248a:	2b02      	cmp	r3, #2
 800248c:	d017      	beq.n	80024be <_ZN5L647422L6474_StepClockHandlerEv+0x1aa>
           ((device_prm.commandExecuted != RUN_CMD)&&
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002494:	b2db      	uxtb	r3, r3
      if  ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <_ZN5L647422L6474_StepClockHandlerEv+0x190>
            (relativePos >= (device_prm.startDecPos))) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
           ((device_prm.commandExecuted != RUN_CMD)&&
 800249e:	6a3a      	ldr	r2, [r7, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d20c      	bcs.n	80024be <_ZN5L647422L6474_StepClockHandlerEv+0x1aa>
           ((device_prm.commandExecuted == RUN_CMD)&&
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80024aa:	b2db      	uxtb	r3, r3
            (relativePos >= (device_prm.startDecPos))) ||
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <_ZN5L647422L6474_StepClockHandlerEv+0x1ae>
            (device_prm.speed > maxSpeed)))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80024b6:	b29b      	uxth	r3, r3
           ((device_prm.commandExecuted == RUN_CMD)&&
 80024b8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d201      	bcs.n	80024c2 <_ZN5L647422L6474_StepClockHandlerEv+0x1ae>
            (relativePos >= (device_prm.startDecPos))) ||
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <_ZN5L647422L6474_StepClockHandlerEv+0x1b0>
 80024c2:	2300      	movs	r3, #0
      if  ((device_prm.commandExecuted == SOFT_STOP_CMD)||
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <_ZN5L647422L6474_StepClockHandlerEv+0x1c4>
        device_prm.motionState = DECELERATING;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        device_prm.accu = 0;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80024d6:	e0be      	b.n	8002656 <_ZN5L647422L6474_StepClockHandlerEv+0x342>
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d108      	bne.n	80024f6 <_ZN5L647422L6474_StepClockHandlerEv+0x1e2>
               (device_prm.speed < maxSpeed))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80024ea:	b29b      	uxth	r3, r3
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 80024ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d901      	bls.n	80024f6 <_ZN5L647422L6474_StepClockHandlerEv+0x1e2>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <_ZN5L647422L6474_StepClockHandlerEv+0x1e4>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80ac 	beq.w	8002656 <_ZN5L647422L6474_StepClockHandlerEv+0x342>
        device_prm.motionState = ACCELERATING;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        device_prm.accu = 0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800250c:	e0a3      	b.n	8002656 <_ZN5L647422L6474_StepClockHandlerEv+0x342>
      uint32_t relativePos = device_prm.relativePos;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002512:	61fb      	str	r3, [r7, #28]
      uint16_t speed = device_prm.speed;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800251a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      uint32_t deceleration = ((uint32_t)device_prm.deceleration << 16);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002522:	b29b      	uxth	r3, r3
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	61bb      	str	r3, [r7, #24]
      if (((device_prm.commandExecuted == SOFT_STOP_CMD)&&(speed <=  device_prm.minSpeed))||
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d106      	bne.n	8002542 <_ZN5L647422L6474_StepClockHandlerEv+0x22e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800253a:	b29b      	uxth	r3, r3
 800253c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800253e:	429a      	cmp	r2, r3
 8002540:	d90a      	bls.n	8002558 <_ZN5L647422L6474_StepClockHandlerEv+0x244>
          ((device_prm.commandExecuted != RUN_CMD)&&
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002548:	b2db      	uxtb	r3, r3
      if (((device_prm.commandExecuted == SOFT_STOP_CMD)&&(speed <=  device_prm.minSpeed))||
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <_ZN5L647422L6474_StepClockHandlerEv+0x248>
           (relativePos >= device_prm.stepsToTake)))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((device_prm.commandExecuted != RUN_CMD)&&
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	429a      	cmp	r2, r3
 8002556:	d301      	bcc.n	800255c <_ZN5L647422L6474_StepClockHandlerEv+0x248>
      if (((device_prm.commandExecuted == SOFT_STOP_CMD)&&(speed <=  device_prm.minSpeed))||
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <_ZN5L647422L6474_StepClockHandlerEv+0x24a>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <_ZN5L647422L6474_StepClockHandlerEv+0x256>
        L6474_HardStop();
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe ff51 	bl	800140a <_ZN5L647414L6474_HardStopEv>
      break;
 8002568:	e077      	b.n	800265a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <_ZN5L647422L6474_StepClockHandlerEv+0x278>
               (speed <= device_prm.maxSpeed))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800257c:	b29b      	uxth	r3, r3
      else if ((device_prm.commandExecuted == RUN_CMD)&&
 800257e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002580:	429a      	cmp	r2, r3
 8002582:	d803      	bhi.n	800258c <_ZN5L647422L6474_StepClockHandlerEv+0x278>
 8002584:	2301      	movs	r3, #1
 8002586:	e002      	b.n	800258e <_ZN5L647422L6474_StepClockHandlerEv+0x27a>
 8002588:	200000ba 	.word	0x200000ba
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <_ZN5L647422L6474_StepClockHandlerEv+0x288>
        device_prm.motionState = STEADY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800259a:	e05e      	b.n	800265a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
        if (speed > device_prm.minSpeed)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80025a6:	429a      	cmp	r2, r3
 80025a8:	bf8c      	ite	hi
 80025aa:	2301      	movhi	r3, #1
 80025ac:	2300      	movls	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d052      	beq.n	800265a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
          bool speedUpdated = FALSE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          if (speed == 0) speed =1;
 80025ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <_ZN5L647422L6474_StepClockHandlerEv+0x2b0>
 80025c0:	2301      	movs	r3, #1
 80025c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          device_prm.accu += deceleration / speed;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	@ 0x28
          while (device_prm.accu >= (0X10000L))
 80025d6:	e00e      	b.n	80025f6 <_ZN5L647422L6474_StepClockHandlerEv+0x2e2>
            device_prm.accu -= (0X10000L);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
            if (speed > 1)
 80025e4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d902      	bls.n	80025f0 <_ZN5L647422L6474_StepClockHandlerEv+0x2dc>
              speed -=1;
 80025ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80025ec:	3b01      	subs	r3, #1
 80025ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
            speedUpdated = TRUE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          while (device_prm.accu >= (0X10000L))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025fe:	4293      	cmp	r3, r2
 8002600:	bf8c      	ite	hi
 8002602:	2301      	movhi	r3, #1
 8002604:	2300      	movls	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e5      	bne.n	80025d8 <_ZN5L647422L6474_StepClockHandlerEv+0x2c4>
          if (speedUpdated)
 800260c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002610:	2b00      	cmp	r3, #0
 8002612:	d022      	beq.n	800265a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
            if (speed < device_prm.minSpeed)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800261a:	b29b      	uxth	r3, r3
 800261c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800261e:	429a      	cmp	r2, r3
 8002620:	bf34      	ite	cc
 8002622:	2301      	movcc	r3, #1
 8002624:	2300      	movcs	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <_ZN5L647422L6474_StepClockHandlerEv+0x320>
              speed = device_prm.minSpeed;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002632:	857b      	strh	r3, [r7, #42]	@ 0x2a
            device_prm.speed = speed;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002638:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            L6474_ApplySpeed(device_prm.speed);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002642:	b29b      	uxth	r3, r3
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fb59 	bl	8001cfe <_ZN5L647416L6474_ApplySpeedEt>
      break;
 800264c:	e005      	b.n	800265a <_ZN5L647422L6474_StepClockHandlerEv+0x346>
      break;
 800264e:	bf00      	nop
 8002650:	e004      	b.n	800265c <_ZN5L647422L6474_StepClockHandlerEv+0x348>
        break;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <_ZN5L647422L6474_StepClockHandlerEv+0x348>
      break;
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <_ZN5L647422L6474_StepClockHandlerEv+0x348>
      break;
 800265a:	bf00      	nop
    }
  }
  /* Set isr flag */
  isr_flag = FALSE;
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <_ZN5L647422L6474_StepClockHandlerEv+0x358>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	3730      	adds	r7, #48	@ 0x30
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200000ba 	.word	0x200000ba

08002670 <_ZN5L647425L6474_Tval_Current_to_ParEf>:

float L6474::L6474_Tval_Current_to_Par(float current_mA)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  return ((float)(((current_mA - 31.25f) / 31.25f) + 0.5f));
 800267a:	490a      	ldr	r1, [pc, #40]	@ (80026a4 <_ZN5L647425L6474_Tval_Current_to_ParEf+0x34>)
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f7fd ff75 	bl	800056c <__aeabi_fsub>
 8002682:	4603      	mov	r3, r0
 8002684:	4907      	ldr	r1, [pc, #28]	@ (80026a4 <_ZN5L647425L6474_Tval_Current_to_ParEf+0x34>)
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe f92e 	bl	80008e8 <__aeabi_fdiv>
 800268c:	4603      	mov	r3, r0
 800268e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff6c 	bl	8000570 <__addsf3>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	41fa0000 	.word	0x41fa0000

080026a8 <_ZN5L647425L6474_Par_to_Tval_CurrentEf>:

float L6474::L6474_Par_to_Tval_Current(float Tval)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  return ((float)((Tval - 0.5f) * 31.25f + 31.25f));
 80026b2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f7fd ff58 	bl	800056c <__aeabi_fsub>
 80026bc:	4603      	mov	r3, r0
 80026be:	4907      	ldr	r1, [pc, #28]	@ (80026dc <_ZN5L647425L6474_Par_to_Tval_CurrentEf+0x34>)
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe f85d 	bl	8000780 <__aeabi_fmul>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4904      	ldr	r1, [pc, #16]	@ (80026dc <_ZN5L647425L6474_Par_to_Tval_CurrentEf+0x34>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff50 	bl	8000570 <__addsf3>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	41fa0000 	.word	0x41fa0000

080026e0 <_ZN5L647422L6474_Tmin_Time_to_ParEf>:

float L6474::L6474_Tmin_Time_to_Par(float ton_min_us)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  return ((float)(((ton_min_us - 0.5f) * 2.0f) + 0.5f));
 80026ea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f7fd ff3c 	bl	800056c <__aeabi_fsub>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd ff39 	bl	8000570 <__addsf3>
 80026fe:	4603      	mov	r3, r0
 8002700:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff33 	bl	8000570 <__addsf3>
 800270a:	4603      	mov	r3, r0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_ZN5L647422L6474_Par_to_Tmin_TimeEf>:

float L6474::L6474_Par_to_Tmin_Time(float Tmin)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  return ((float)(((Tmin - 0.5f) / 2.0f) + 0.5f));
 800271e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f7fd ff22 	bl	800056c <__aeabi_fsub>
 8002728:	4603      	mov	r3, r0
 800272a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe f8da 	bl	80008e8 <__aeabi_fdiv>
 8002734:	4603      	mov	r3, r0
 8002736:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd ff18 	bl	8000570 <__addsf3>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <_ZN5L64749ReadWriteEPhS0_t>:
	}
}


status_t L6474::ReadWrite(uint8_t* pBufferToRead, uint8_t* pBufferToWrite, uint16_t NumBytes)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	2140      	movs	r1, #64	@ 0x40
 800275e:	480f      	ldr	r0, [pc, #60]	@ (800279c <_ZN5L64749ReadWriteEPhS0_t+0x50>)
 8002760:	f001 fbb2 	bl	8003ec8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef result = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]

	//if(result == HAL_OK)
	//{
	//	result = HAL_SPI_Receive_DMA(&hspi1, pBufferToWrite, NumBytes);
	//}
	result = HAL_SPI_TransmitReceive(&hspi1, pBufferToWrite, pBufferToRead, NumBytes,100);
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	2264      	movs	r2, #100	@ 0x64
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	480b      	ldr	r0, [pc, #44]	@ (80027a0 <_ZN5L64749ReadWriteEPhS0_t+0x54>)
 8002774:	f002 f844 	bl	8004800 <HAL_SPI_TransmitReceive>
 8002778:	4603      	mov	r3, r0
 800277a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800277c:	2201      	movs	r2, #1
 800277e:	2140      	movs	r1, #64	@ 0x40
 8002780:	4806      	ldr	r0, [pc, #24]	@ (800279c <_ZN5L64749ReadWriteEPhS0_t+0x50>)
 8002782:	f001 fba1 	bl	8003ec8 <HAL_GPIO_WritePin>

	//while(wTransferState == TRANSFER_WAIT) {}



	if(result != HAL_OK)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <_ZN5L64749ReadWriteEPhS0_t+0x44>
	{
		return COMPONENT_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <_ZN5L64749ReadWriteEPhS0_t+0x46>
	}
	else
	{
		return COMPONENT_OK;
 8002790:	2300      	movs	r3, #0
	}

}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	200000e0 	.word	0x200000e0

080027a4 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_clES0_>:
    //ticker.attach(Callback<void()>(this, &L6474::L6474_StepClockHandler), period);



    irqHandlers.tim3.userptr=this;
	irqHandlers.tim3.func = [](void *userData)
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	{
		((L6474*)userData)->L6474_StepClockHandler();
 80027ae:	6838      	ldr	r0, [r7, #0]
 80027b0:	f7ff fdb0 	bl	8002314 <_ZN5L647422L6474_StepClockHandlerEv>
	};
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZZN5L647416L6474_PwmSetFreqEtENUlPvE_4_FUNES0_>:
	irqHandlers.tim3.func = [](void *userData)
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	};
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff ffec 	bl	80027a4 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_clES0_>
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_cvPFvS0_EEv>:
	irqHandlers.tim3.func = [](void *userData)
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	};
 80027dc:	4b02      	ldr	r3, [pc, #8]	@ (80027e8 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_cvPFvS0_EEv+0x14>)
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	080027bd 	.word	0x080027bd

080027ec <_ZN5L647416L6474_PwmSetFreqEt>:
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
    double period = 1.0f / frequency;
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd ff6c 	bl	80006d8 <__aeabi_i2f>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002808:	f7fe f86e 	bl	80008e8 <__aeabi_fdiv>
 800280c:	4603      	mov	r3, r0
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe00 	bl	8000414 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	e9c7 2304 	strd	r2, r3, [r7, #16]
    printf("frequency: %i, period: %f\n", frequency, period);
 800281c:	8879      	ldrh	r1, [r7, #2]
 800281e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002822:	4812      	ldr	r0, [pc, #72]	@ (800286c <_ZN5L647416L6474_PwmSetFreqEt+0x80>)
 8002824:	f003 fab0 	bl	8005d88 <iprintf>
    pwm.period(period);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1d1c      	adds	r4, r3, #4
 800282c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002830:	f7fd fe48 	bl	80004c4 <__aeabi_d2f>
 8002834:	4603      	mov	r3, r0
 8002836:	4619      	mov	r1, r3
 8002838:	4620      	mov	r0, r4
 800283a:	f000 f8bf 	bl	80029bc <_ZN3Pwm6periodEf>
    pwm.write(0.5f);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f890 	bl	800296c <_ZN3Pwm5writeEf>
    irqHandlers.tim3.userptr=this;
 800284c:	4a08      	ldr	r2, [pc, #32]	@ (8002870 <_ZN5L647416L6474_PwmSetFreqEt+0x84>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6053      	str	r3, [r2, #4]
	irqHandlers.tim3.func = [](void *userData)
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ffbc 	bl	80027d4 <_ZZN5L647416L6474_PwmSetFreqEtENKUlPvE_cvPFvS0_EEv>
 800285c:	4603      	mov	r3, r0
 800285e:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <_ZN5L647416L6474_PwmSetFreqEt+0x84>)
 8002860:	6013      	str	r3, [r2, #0]


}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	bf00      	nop
 800286c:	08006ac8 	.word	0x08006ac8
 8002870:	20000208 	.word	0x20000208

08002874 <_ZN5L647413L6474_PwmStopEv>:
void L6474::L6474_PwmStop(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	pwm.write(0.0f);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f871 	bl	800296c <_ZN3Pwm5writeEf>
	irqHandlers.tim3.func = NULL;
 800288a:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <_ZN5L647413L6474_PwmStopEv+0x2c>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
	irqHandlers.tim3.userptr = NULL;
 8002890:	4b03      	ldr	r3, [pc, #12]	@ (80028a0 <_ZN5L647413L6474_PwmStopEv+0x2c>)
 8002892:	2200      	movs	r2, #0
 8002894:	605a      	str	r2, [r3, #4]
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000208 	.word	0x20000208

080028a4 <_Z9prescalerf>:

extern "C" void Error_Handler(void);


int prescaler(float value)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	return CPU_FREQUENCY * value / (COUNTER_PERIOD+1) - 1;
 80028ac:	490b      	ldr	r1, [pc, #44]	@ (80028dc <_Z9prescalerf+0x38>)
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fd ff66 	bl	8000780 <__aeabi_fmul>
 80028b4:	4603      	mov	r3, r0
 80028b6:	490a      	ldr	r1, [pc, #40]	@ (80028e0 <_Z9prescalerf+0x3c>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe f815 	bl	80008e8 <__aeabi_fdiv>
 80028be:	4603      	mov	r3, r0
 80028c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fe51 	bl	800056c <__aeabi_fsub>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe f8a7 	bl	8000a20 <__aeabi_f2iz>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	4bf42400 	.word	0x4bf42400
 80028e0:	42ca0000 	.word	0x42ca0000

080028e4 <_ZN3PwmC1Ev>:

Pwm::Pwm()
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	 :sConfigOC{0}
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	461a      	mov	r2, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	6053      	str	r3, [r2, #4]
 80028f6:	6093      	str	r3, [r2, #8]
 80028f8:	60d3      	str	r3, [r2, #12]
 80028fa:	6113      	str	r3, [r2, #16]
 80028fc:	6153      	str	r3, [r2, #20]
 80028fe:	6193      	str	r3, [r2, #24]
{
	htim3.Init.Prescaler = prescaler(1.0);
 8002900:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002904:	f7ff ffce 	bl	80028a4 <_Z9prescalerf>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <_ZN3PwmC1Ev+0x84>)
 800290e:	605a      	str	r2, [r3, #4]
	htim3.Init.Period = COUNTER_PERIOD;
 8002910:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <_ZN3PwmC1Ev+0x84>)
 8002912:	2264      	movs	r2, #100	@ 0x64
 8002914:	60da      	str	r2, [r3, #12]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2260      	movs	r2, #96	@ 0x60
 800291a:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 1.0 * COUNTER_PERIOD;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2264      	movs	r2, #100	@ 0x64
 8002920:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]

	 if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	@ (8002968 <_ZN3PwmC1Ev+0x84>)
 8002936:	f002 fcf5 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <_ZN3PwmC1Ev+0x6a>
	 {
	     Error_Handler();
 800294a:	f000 faf5 	bl	8002f38 <Error_Handler>
	 }

	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800294e:	2104      	movs	r1, #4
 8002950:	4805      	ldr	r0, [pc, #20]	@ (8002968 <_ZN3PwmC1Ev+0x84>)
 8002952:	f002 fb55 	bl	8005000 <HAL_TIM_PWM_Start>
	 HAL_TIM_Base_Start_IT(&htim3);
 8002956:	4804      	ldr	r0, [pc, #16]	@ (8002968 <_ZN3PwmC1Ev+0x84>)
 8002958:	f002 fab0 	bl	8004ebc <HAL_TIM_Base_Start_IT>
}
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200001c0 	.word	0x200001c0

0800296c <_ZN3Pwm5writeEf>:

void Pwm::write(float value)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
		//pulse = value * counter period;
	  sConfigOC.Pulse = value * COUNTER_PERIOD;
 8002976:	490f      	ldr	r1, [pc, #60]	@ (80029b4 <_ZN3Pwm5writeEf+0x48>)
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f7fd ff01 	bl	8000780 <__aeabi_fmul>
 800297e:	4603      	mov	r3, r0
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe f873 	bl	8000a6c <__aeabi_f2uiz>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2204      	movs	r2, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4809      	ldr	r0, [pc, #36]	@ (80029b8 <_ZN3Pwm5writeEf+0x4c>)
 8002994:	f002 fcc6 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <_ZN3Pwm5writeEf+0x40>
	  {
		  Error_Handler();
 80029a8:	f000 fac6 	bl	8002f38 <Error_Handler>
	  }

}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	42c80000 	.word	0x42c80000
 80029b8:	200001c0 	.word	0x200001c0

080029bc <_ZN3Pwm6periodEf>:

void Pwm::period(float seconds)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	htim3.Init.Prescaler = prescaler(seconds);
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7ff ff6c 	bl	80028a4 <_Z9prescalerf>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <_ZN3Pwm6periodEf+0x40>)
 80029d2:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4808      	ldr	r0, [pc, #32]	@ (80029fc <_ZN3Pwm6periodEf+0x40>)
 80029dc:	f002 fca2 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <_ZN3Pwm6periodEf+0x38>
	{
		Error_Handler();
 80029f0:	f000 faa2 	bl	8002f38 <Error_Handler>
	}

}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200001c0 	.word	0x200001c0

08002a00 <L6474_create>:

L6474 *motor;


extern "C" void L6474_create()
{
 8002a00:	b598      	push	{r3, r4, r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	motor = new L6474;
 8002a04:	2054      	movs	r0, #84	@ 0x54
 8002a06:	f003 f809 	bl	8005a1c <_Znwj>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7fe fb6e 	bl	80010f0 <_ZN5L6474C1Ev>
 8002a14:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <L6474_create+0x4c>)
 8002a16:	601c      	str	r4, [r3, #0]
	if(motor->init(&init) != COMPONENT_OK)
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <L6474_create+0x4c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <L6474_create+0x4c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	490a      	ldr	r1, [pc, #40]	@ (8002a50 <L6474_create+0x50>)
 8002a26:	4610      	mov	r0, r2
 8002a28:	4798      	blx	r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <L6474_create+0x42>
	{
		printf("failed to initialize\r\n");
 8002a3a:	4806      	ldr	r0, [pc, #24]	@ (8002a54 <L6474_create+0x54>)
 8002a3c:	f003 fa0c 	bl	8005e58 <puts>
	else
	{
		printf("ok\r\n");
	}

}
 8002a40:	e002      	b.n	8002a48 <L6474_create+0x48>
		printf("ok\r\n");
 8002a42:	4805      	ldr	r0, [pc, #20]	@ (8002a58 <L6474_create+0x58>)
 8002a44:	f003 fa08 	bl	8005e58 <puts>
}
 8002a48:	bf00      	nop
 8002a4a:	bd98      	pop	{r3, r4, r7, pc}
 8002a4c:	200000d4 	.word	0x200000d4
 8002a50:	20000000 	.word	0x20000000
 8002a54:	08006ae4 	.word	0x08006ae4
 8002a58:	08006afc 	.word	0x08006afc

08002a5c <_Z16flag_irq_handlerv>:

void flag_irq_handler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
    /* Set ISR flag. */
    motor->isr_flag = TRUE;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <_Z16flag_irq_handlerv+0x40>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]

    /* Get the value of the status register. */
    unsigned int status = motor->get_status();
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <_Z16flag_irq_handlerv+0x44>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <_Z16flag_irq_handlerv+0x44>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3310      	adds	r3, #16
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4610      	mov	r0, r2
 8002a78:	4798      	blx	r3
 8002a7a:	6078      	str	r0, [r7, #4]

    /* Check NOTPERF_CMD flag: if set, the command received by SPI can't be performed. */
    /* This often occures when a command is sent to the L6474 while it is not in HiZ state. */
    if ((status & L6474_STATUS_NOTPERF_CMD) == L6474_STATUS_NOTPERF_CMD) {
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <_Z16flag_irq_handlerv+0x30>
        printf("    WARNING: \"FLAG\" interrupt triggered. Non-performable command detected when updating L6474's registers while not in HiZ state.\r\n");
 8002a86:	4807      	ldr	r0, [pc, #28]	@ (8002aa4 <_Z16flag_irq_handlerv+0x48>)
 8002a88:	f003 f9e6 	bl	8005e58 <puts>
    }

    /* Reset ISR flag. */
    motor->isr_flag = FALSE;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <_Z16flag_irq_handlerv+0x40>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200000ba 	.word	0x200000ba
 8002aa0:	200000d4 	.word	0x200000d4
 8002aa4:	08006b00 	.word	0x08006b00

08002aa8 <L6474_move>:

int position = 0;
int diff = 0;

extern "C" void L6474_move()
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
    motor->attach_flag_irq(&flag_irq_handler);
 8002aac:	4b33      	ldr	r3, [pc, #204]	@ (8002b7c <L6474_move+0xd4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4933      	ldr	r1, [pc, #204]	@ (8002b80 <L6474_move+0xd8>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fb5c 	bl	8001170 <_ZN5L647415attach_flag_irqEPFvvE>
    motor->enable_flag_irq();
 8002ab8:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <L6474_move+0xd4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe fb67 	bl	8001190 <_ZN5L647415enable_flag_irqEv>

     motor->set_parameter(L6474_TVAL, 500);
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b7c <L6474_move+0xd4>)
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <L6474_move+0xd4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	337c      	adds	r3, #124	@ 0x7c
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b84 <L6474_move+0xdc>)
 8002ad2:	2109      	movs	r1, #9
 8002ad4:	4798      	blx	r3


     position = motor->get_position();
 8002ad6:	4b29      	ldr	r3, [pc, #164]	@ (8002b7c <L6474_move+0xd4>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b28      	ldr	r3, [pc, #160]	@ (8002b7c <L6474_move+0xd4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4798      	blx	r3
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <L6474_move+0xe0>)
 8002aec:	6013      	str	r3, [r2, #0]

     motor->move(StepperMotor::FWD, STEPS_1 / 8);
 8002aee:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <L6474_move+0xd4>)
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <L6474_move+0xd4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3360      	adds	r3, #96	@ 0x60
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002b00:	2101      	movs	r1, #1
 8002b02:	4798      	blx	r3
     motor->wait_while_active();
 8002b04:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <L6474_move+0xd4>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b1c      	ldr	r3, [pc, #112]	@ (8002b7c <L6474_move+0xd4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3374      	adds	r3, #116	@ 0x74
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4610      	mov	r0, r2
 8002b14:	4798      	blx	r3

     diff = motor->get_position() - position;
 8002b16:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <L6474_move+0xd4>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b18      	ldr	r3, [pc, #96]	@ (8002b7c <L6474_move+0xd4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4610      	mov	r0, r2
 8002b26:	4798      	blx	r3
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <L6474_move+0xe0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4a16      	ldr	r2, [pc, #88]	@ (8002b8c <L6474_move+0xe4>)
 8002b32:	6013      	str	r3, [r2, #0]
     position = motor->get_position();
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <L6474_move+0xd4>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <L6474_move+0xd4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4610      	mov	r0, r2
 8002b44:	4798      	blx	r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a0f      	ldr	r2, [pc, #60]	@ (8002b88 <L6474_move+0xe0>)
 8002b4a:	6013      	str	r3, [r2, #0]

     //motor->move(StepperMotor::BWD, STEPS_1 / 8);
     //motor->wait_while_active();
     //position = motor->get_position();

     motor->set_max_speed(10000);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <L6474_move+0xd4>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <L6474_move+0xd4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	333c      	adds	r3, #60	@ 0x3c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4798      	blx	r3
     motor->set_min_speed(5000);
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <L6474_move+0xd4>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <L6474_move+0xd4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3340      	adds	r3, #64	@ 0x40
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200000d4 	.word	0x200000d4
 8002b80:	08002a5d 	.word	0x08002a5d
 8002b84:	43fa0000 	.word	0x43fa0000
 8002b88:	200000d8 	.word	0x200000d8
 8002b8c:	200000dc 	.word	0x200000dc

08002b90 <L6474_run>:

extern "C" void L6474_run()
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
    while (true) {
        position = position + diff;
 8002b94:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <L6474_run+0x40>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <L6474_run+0x44>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd0 <L6474_run+0x40>)
 8002ba0:	6013      	str	r3, [r2, #0]
        motor->go_to(position);
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <L6474_run+0x48>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <L6474_run+0x48>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3350      	adds	r3, #80	@ 0x50
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4907      	ldr	r1, [pc, #28]	@ (8002bd0 <L6474_run+0x40>)
 8002bb2:	6809      	ldr	r1, [r1, #0]
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4798      	blx	r3
        motor->wait_while_active();
 8002bb8:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <L6474_run+0x48>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <L6474_run+0x48>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3374      	adds	r3, #116	@ 0x74
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4798      	blx	r3
        position = position + diff;
 8002bca:	bf00      	nop
 8002bcc:	e7e2      	b.n	8002b94 <L6474_run+0x4>
 8002bce:	bf00      	nop
 8002bd0:	200000d8 	.word	0x200000d8
 8002bd4:	200000dc 	.word	0x200000dc
 8002bd8:	200000d4 	.word	0x200000d4

08002bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002be0:	f000 fc82 	bl	80034e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002be4:	f000 f82c 	bl	8002c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be8:	f000 f920 	bl	8002e2c <MX_GPIO_Init>
  MX_DMA_Init();
 8002bec:	f000 f8f8 	bl	8002de0 <MX_DMA_Init>
  MX_TIM3_Init();
 8002bf0:	f000 f89c 	bl	8002d2c <MX_TIM3_Init>
  MX_SPI1_Init();
 8002bf4:	f000 f864 	bl	8002cc0 <MX_SPI1_Init>

  //irqHandlers.irq_handlers[0].func=dummy;
  //timIrqHandlers.irq_handlers[0].userptr=NULL;


  irqHandlers.tim3.func = NULL;
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <main+0x58>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
  irqHandlers.tim3.userptr = NULL;
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <main+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]

  irqHandlers.irq.func = NULL;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <main+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  irqHandlers.irq.enabled = 0;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <main+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002c10:	2201      	movs	r2, #1
 8002c12:	2140      	movs	r1, #64	@ 0x40
 8002c14:	4808      	ldr	r0, [pc, #32]	@ (8002c38 <main+0x5c>)
 8002c16:	f001 f957 	bl	8003ec8 <HAL_GPIO_WritePin>


  printf("ok\r\n");
 8002c1a:	4808      	ldr	r0, [pc, #32]	@ (8002c3c <main+0x60>)
 8002c1c:	f003 f91c 	bl	8005e58 <puts>
  L6474_create();
 8002c20:	f7ff feee 	bl	8002a00 <L6474_create>
  L6474_move();
 8002c24:	f7ff ff40 	bl	8002aa8 <L6474_move>
  L6474_run();
 8002c28:	f7ff ffb2 	bl	8002b90 <L6474_run>
 8002c2c:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000208 	.word	0x20000208
 8002c38:	40010c00 	.word	0x40010c00
 8002c3c:	08006b84 	.word	0x08006b84

08002c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b090      	sub	sp, #64	@ 0x40
 8002c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c46:	f107 0318 	add.w	r3, r7, #24
 8002c4a:	2228      	movs	r2, #40	@ 0x28
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 f90a 	bl	8005e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
 8002c60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c66:	2301      	movs	r3, #1
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002c72:	2300      	movs	r3, #0
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002c76:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c7c:	f107 0318 	add.w	r3, r7, #24
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 f95b 	bl	8003f3c <HAL_RCC_OscConfig>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002c8c:	f000 f954 	bl	8002f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c90:	230f      	movs	r3, #15
 8002c92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c94:	2302      	movs	r3, #2
 8002c96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 fbc9 	bl	8004440 <HAL_RCC_ClockConfig>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002cb4:	f000 f940 	bl	8002f38 <Error_Handler>
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3740      	adds	r7, #64	@ 0x40
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cc6:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <MX_SPI1_Init+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cca:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002ccc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d04:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d0c:	220a      	movs	r2, #10
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d10:	4804      	ldr	r0, [pc, #16]	@ (8002d24 <MX_SPI1_Init+0x64>)
 8002d12:	f001 fcf1 	bl	80046f8 <HAL_SPI_Init>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d1c:	f000 f90c 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200000e0 	.word	0x200000e0
 8002d28:	40013000 	.word	0x40013000

08002d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d32:	f107 0320 	add.w	r3, r7, #32
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	611a      	str	r2, [r3, #16]
 8002d4a:	615a      	str	r2, [r3, #20]
 8002d4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d50:	4a22      	ldr	r2, [pc, #136]	@ (8002ddc <MX_TIM3_Init+0xb0>)
 8002d52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d54:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d74:	4818      	ldr	r0, [pc, #96]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d76:	f002 f8f3 	bl	8004f60 <HAL_TIM_PWM_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002d80:	f000 f8da 	bl	8002f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	4619      	mov	r1, r3
 8002d92:	4811      	ldr	r0, [pc, #68]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002d94:	f002 fdd0 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002d9e:	f000 f8cb 	bl	8002f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da2:	2360      	movs	r3, #96	@ 0x60
 8002da4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	2204      	movs	r2, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4807      	ldr	r0, [pc, #28]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002dba:	f002 fab3 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002dc4:	f000 f8b8 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dc8:	4803      	ldr	r0, [pc, #12]	@ (8002dd8 <MX_TIM3_Init+0xac>)
 8002dca:	f000 f9bd 	bl	8003148 <HAL_TIM_MspPostInit>

}
 8002dce:	bf00      	nop
 8002dd0:	3728      	adds	r7, #40	@ 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200001c0 	.word	0x200001c0
 8002ddc:	40000400 	.word	0x40000400

08002de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <MX_DMA_Init+0x48>)
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	4a0f      	ldr	r2, [pc, #60]	@ (8002e28 <MX_DMA_Init+0x48>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6153      	str	r3, [r2, #20]
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <MX_DMA_Init+0x48>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	200c      	movs	r0, #12
 8002e04:	f000 fccd 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002e08:	200c      	movs	r0, #12
 8002e0a:	f000 fce6 	bl	80037da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	200d      	movs	r0, #13
 8002e14:	f000 fcc5 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002e18:	200d      	movs	r0, #13
 8002e1a:	f000 fcde 	bl	80037da <HAL_NVIC_EnableIRQ>

}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000

08002e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e40:	4b32      	ldr	r3, [pc, #200]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	4a31      	ldr	r2, [pc, #196]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6193      	str	r3, [r2, #24]
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e58:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e5e:	f043 0310 	orr.w	r3, r3, #16
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b29      	ldr	r3, [pc, #164]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e70:	4b26      	ldr	r3, [pc, #152]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a25      	ldr	r2, [pc, #148]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b23      	ldr	r3, [pc, #140]	@ (8002f0c <MX_GPIO_Init+0xe0>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002e8e:	4820      	ldr	r0, [pc, #128]	@ (8002f10 <MX_GPIO_Init+0xe4>)
 8002e90:	f001 f81a 	bl	8003ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2140      	movs	r1, #64	@ 0x40
 8002e98:	481e      	ldr	r0, [pc, #120]	@ (8002f14 <MX_GPIO_Init+0xe8>)
 8002e9a:	f001 f815 	bl	8003ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2302      	movs	r3, #2
 8002eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4816      	ldr	r0, [pc, #88]	@ (8002f10 <MX_GPIO_Init+0xe4>)
 8002eb8:	f000 fe82 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <MX_GPIO_Init+0xec>)
 8002ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480f      	ldr	r0, [pc, #60]	@ (8002f10 <MX_GPIO_Init+0xe4>)
 8002ed2:	f000 fe75 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ed6:	2340      	movs	r3, #64	@ 0x40
 8002ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	f107 0310 	add.w	r3, r7, #16
 8002eea:	4619      	mov	r1, r3
 8002eec:	4809      	ldr	r0, [pc, #36]	@ (8002f14 <MX_GPIO_Init+0xe8>)
 8002eee:	f000 fe67 	bl	8003bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2028      	movs	r0, #40	@ 0x28
 8002ef8:	f000 fc53 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002efc:	2028      	movs	r0, #40	@ 0x28
 8002efe:	f000 fc6c 	bl	80037da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002f02:	bf00      	nop
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010800 	.word	0x40010800
 8002f14:	40010c00 	.word	0x40010c00
 8002f18:	10210000 	.word	0x10210000

08002f1c <HAL_SPI_ErrorCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
  wTransferState = TRANSFER_COMPLETE;
}
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_SPI_ErrorCallback+0x18>)
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	20000030 	.word	0x20000030

08002f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f3c:	b672      	cpsid	i
}
 8002f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <Error_Handler+0x8>

08002f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_MspInit+0x5c>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	4a14      	ldr	r2, [pc, #80]	@ (8002fa0 <HAL_MspInit+0x5c>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6193      	str	r3, [r2, #24]
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_MspInit+0x5c>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <HAL_MspInit+0x5c>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa0 <HAL_MspInit+0x5c>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	61d3      	str	r3, [r2, #28]
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <HAL_MspInit+0x5c>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <HAL_MspInit+0x60>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	4a04      	ldr	r2, [pc, #16]	@ (8002fa4 <HAL_MspInit+0x60>)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40010000 	.word	0x40010000

08002fa8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a47      	ldr	r2, [pc, #284]	@ (80030e0 <HAL_SPI_MspInit+0x138>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f040 8086 	bne.w	80030d6 <HAL_SPI_MspInit+0x12e>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fca:	4b46      	ldr	r3, [pc, #280]	@ (80030e4 <HAL_SPI_MspInit+0x13c>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	4a45      	ldr	r2, [pc, #276]	@ (80030e4 <HAL_SPI_MspInit+0x13c>)
 8002fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fd4:	6193      	str	r3, [r2, #24]
 8002fd6:	4b43      	ldr	r3, [pc, #268]	@ (80030e4 <HAL_SPI_MspInit+0x13c>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	4b40      	ldr	r3, [pc, #256]	@ (80030e4 <HAL_SPI_MspInit+0x13c>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	4a3f      	ldr	r2, [pc, #252]	@ (80030e4 <HAL_SPI_MspInit+0x13c>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6193      	str	r3, [r2, #24]
 8002fee:	4b3d      	ldr	r3, [pc, #244]	@ (80030e4 <HAL_SPI_MspInit+0x13c>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ffa:	23a0      	movs	r3, #160	@ 0xa0
 8002ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 0310 	add.w	r3, r7, #16
 800300a:	4619      	mov	r1, r3
 800300c:	4836      	ldr	r0, [pc, #216]	@ (80030e8 <HAL_SPI_MspInit+0x140>)
 800300e:	f000 fdd7 	bl	8003bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003012:	2340      	movs	r3, #64	@ 0x40
 8003014:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	4619      	mov	r1, r3
 8003024:	4830      	ldr	r0, [pc, #192]	@ (80030e8 <HAL_SPI_MspInit+0x140>)
 8003026:	f000 fdcb 	bl	8003bc0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800302a:	4b30      	ldr	r3, [pc, #192]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 800302c:	4a30      	ldr	r2, [pc, #192]	@ (80030f0 <HAL_SPI_MspInit+0x148>)
 800302e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003030:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 8003032:	2200      	movs	r2, #0
 8003034:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003036:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800303c:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 800303e:	2280      	movs	r2, #128	@ 0x80
 8003040:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003042:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003048:	4b28      	ldr	r3, [pc, #160]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 800304a:	2200      	movs	r2, #0
 800304c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800304e:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003054:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 8003056:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800305a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800305c:	4823      	ldr	r0, [pc, #140]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 800305e:	f000 fbd7 	bl	8003810 <HAL_DMA_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8003068:	f7ff ff66 	bl	8002f38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a1f      	ldr	r2, [pc, #124]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 8003070:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003072:	4a1e      	ldr	r2, [pc, #120]	@ (80030ec <HAL_SPI_MspInit+0x144>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003078:	4b1e      	ldr	r3, [pc, #120]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 800307a:	4a1f      	ldr	r2, [pc, #124]	@ (80030f8 <HAL_SPI_MspInit+0x150>)
 800307c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800307e:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 8003080:	2210      	movs	r2, #16
 8003082:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003084:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800308a:	4b1a      	ldr	r3, [pc, #104]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003090:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003096:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 8003098:	2200      	movs	r2, #0
 800309a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800309c:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80030a2:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 80030a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80030aa:	4812      	ldr	r0, [pc, #72]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 80030ac:	f000 fbb0 	bl	8003810 <HAL_DMA_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80030b6:	f7ff ff3f 	bl	8002f38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a0d      	ldr	r2, [pc, #52]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 80030be:	649a      	str	r2, [r3, #72]	@ 0x48
 80030c0:	4a0c      	ldr	r2, [pc, #48]	@ (80030f4 <HAL_SPI_MspInit+0x14c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	2023      	movs	r0, #35	@ 0x23
 80030cc:	f000 fb69 	bl	80037a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030d0:	2023      	movs	r0, #35	@ 0x23
 80030d2:	f000 fb82 	bl	80037da <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80030d6:	bf00      	nop
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40013000 	.word	0x40013000
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010800 	.word	0x40010800
 80030ec:	20000138 	.word	0x20000138
 80030f0:	4002001c 	.word	0x4002001c
 80030f4:	2000017c 	.word	0x2000017c
 80030f8:	40020030 	.word	0x40020030

080030fc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0d      	ldr	r2, [pc, #52]	@ (8003140 <HAL_TIM_PWM_MspInit+0x44>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d113      	bne.n	8003136 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <HAL_TIM_PWM_MspInit+0x48>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4a0c      	ldr	r2, [pc, #48]	@ (8003144 <HAL_TIM_PWM_MspInit+0x48>)
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	61d3      	str	r3, [r2, #28]
 800311a:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <HAL_TIM_PWM_MspInit+0x48>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	201d      	movs	r0, #29
 800312c:	f000 fb39 	bl	80037a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003130:	201d      	movs	r0, #29
 8003132:	f000 fb52 	bl	80037da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40000400 	.word	0x40000400
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a18      	ldr	r2, [pc, #96]	@ (80031c4 <HAL_TIM_MspPostInit+0x7c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d129      	bne.n	80031bc <HAL_TIM_MspPostInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003168:	4b17      	ldr	r3, [pc, #92]	@ (80031c8 <HAL_TIM_MspPostInit+0x80>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4a16      	ldr	r2, [pc, #88]	@ (80031c8 <HAL_TIM_MspPostInit+0x80>)
 800316e:	f043 0310 	orr.w	r3, r3, #16
 8003172:	6193      	str	r3, [r2, #24]
 8003174:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <HAL_TIM_MspPostInit+0x80>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003180:	2380      	movs	r3, #128	@ 0x80
 8003182:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003188:	2302      	movs	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	4619      	mov	r1, r3
 8003192:	480e      	ldr	r0, [pc, #56]	@ (80031cc <HAL_TIM_MspPostInit+0x84>)
 8003194:	f000 fd14 	bl	8003bc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <HAL_TIM_MspPostInit+0x88>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	4a06      	ldr	r2, [pc, #24]	@ (80031d0 <HAL_TIM_MspPostInit+0x88>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40011000 	.word	0x40011000
 80031d0:	40010000 	.word	0x40010000

080031d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <NMI_Handler+0x4>

080031dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <HardFault_Handler+0x4>

080031e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <MemManage_Handler+0x4>

080031ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <BusFault_Handler+0x4>

080031f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <UsageFault_Handler+0x4>

080031fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003224:	f000 f9a6 	bl	8003574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003230:	4802      	ldr	r0, [pc, #8]	@ (800323c <DMA1_Channel2_IRQHandler+0x10>)
 8003232:	f000 fbbf 	bl	80039b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000138 	.word	0x20000138

08003240 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003244:	4802      	ldr	r0, [pc, #8]	@ (8003250 <DMA1_Channel3_IRQHandler+0x10>)
 8003246:	f000 fbb5 	bl	80039b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000017c 	.word	0x2000017c

08003254 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003258:	4807      	ldr	r0, [pc, #28]	@ (8003278 <TIM3_IRQHandler+0x24>)
 800325a:	f001 ff73 	bl	8005144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(irqHandlers.tim3.func != NULL)
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <TIM3_IRQHandler+0x28>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <TIM3_IRQHandler+0x1e>
  {
	  irqHandlers.tim3.func(irqHandlers.tim3.userptr);
 8003266:	4b05      	ldr	r3, [pc, #20]	@ (800327c <TIM3_IRQHandler+0x28>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a04      	ldr	r2, [pc, #16]	@ (800327c <TIM3_IRQHandler+0x28>)
 800326c:	6852      	ldr	r2, [r2, #4]
 800326e:	4610      	mov	r0, r2
 8003270:	4798      	blx	r3
  }
  //timIrqHandlers.irq_handlers[0].func(timIrqHandlers.irq_handlers[0].userptr);
  /* USER CODE END TIM3_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200001c0 	.word	0x200001c0
 800327c:	20000208 	.word	0x20000208

08003280 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003284:	4802      	ldr	r0, [pc, #8]	@ (8003290 <SPI1_IRQHandler+0x10>)
 8003286:	f001 fc65 	bl	8004b54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200000e0 	.word	0x200000e0

08003294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003298:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800329c:	f000 fe2c 	bl	8003ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(irqHandlers.irq.func != NULL && irqHandlers.irq.enabled)
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <EXTI15_10_IRQHandler+0x28>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <EXTI15_10_IRQHandler+0x22>
 80032a8:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <EXTI15_10_IRQHandler+0x28>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <EXTI15_10_IRQHandler+0x22>
  {
	  irqHandlers.irq.func();
 80032b0:	4b02      	ldr	r3, [pc, #8]	@ (80032bc <EXTI15_10_IRQHandler+0x28>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4798      	blx	r3
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000208 	.word	0x20000208

080032c0 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN        *((volatile uint32_t*) 0xE0000E00)


void ITM_SendChar(uint8_t ch)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
    DEMCR |=(1<<24);
 80032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <ITM_SendChar+0x44>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <ITM_SendChar+0x44>)
 80032d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032d4:	6013      	str	r3, [r2, #0]

    ITM_TRACE_EN |= (1<<0);
 80032d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <ITM_SendChar+0x48>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <ITM_SendChar+0x48>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6013      	str	r3, [r2, #0]

    while(!(ITM_STIMULUS_PORT0 & 1));
 80032e2:	bf00      	nop
 80032e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f8      	beq.n	80032e4 <ITM_SendChar+0x24>


    ITM_STIMULUS_PORT0 = ch;
 80032f2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	6013      	str	r3, [r2, #0]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	e000edfc 	.word	0xe000edfc
 8003308:	e0000e00 	.word	0xe0000e00

0800330c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return 1;
 8003310:	2301      	movs	r3, #1
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <_kill>:

int _kill(int pid, int sig)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003324:	f002 fdfc 	bl	8005f20 <__errno>
 8003328:	4603      	mov	r3, r0
 800332a:	2216      	movs	r2, #22
 800332c:	601a      	str	r2, [r3, #0]
  return -1;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <_exit>:

void _exit (int status)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003342:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffe7 	bl	800331a <_kill>
  while (1) {}    /* Make sure we hang here */
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <_exit+0x12>

08003350 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e00a      	b.n	8003378 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003362:	f3af 8000 	nop.w
 8003366:	4601      	mov	r1, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	60ba      	str	r2, [r7, #8]
 800336e:	b2ca      	uxtb	r2, r1
 8003370:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	dbf0      	blt.n	8003362 <_read+0x12>
  }

  return len;
 8003380:	687b      	ldr	r3, [r7, #4]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_write>:
    __io_putchar(*ptr++);
  }
  return len;
}
*/
__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e009      	b.n	80033b0 <_write+0x26>
        ITM_SendChar((*ptr++));
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	60ba      	str	r2, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff8b 	bl	80032c0 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dbf1      	blt.n	800339c <_write+0x12>
    }
    return len;
 80033b8:	687b      	ldr	r3, [r7, #4]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_close>:

int _close(int file)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033e8:	605a      	str	r2, [r3, #4]
  return 0;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <_isatty>:

int _isatty(int file)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
	...

08003424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <_sbrk+0x5c>)
 800342e:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <_sbrk+0x60>)
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003438:	4b13      	ldr	r3, [pc, #76]	@ (8003488 <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <_sbrk+0x64>)
 8003442:	4a12      	ldr	r2, [pc, #72]	@ (800348c <_sbrk+0x68>)
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <_sbrk+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	429a      	cmp	r2, r3
 8003452:	d207      	bcs.n	8003464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003454:	f002 fd64 	bl	8005f20 <__errno>
 8003458:	4603      	mov	r3, r0
 800345a:	220c      	movs	r2, #12
 800345c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003462:	e009      	b.n	8003478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003464:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800346a:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <_sbrk+0x64>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	4a05      	ldr	r2, [pc, #20]	@ (8003488 <_sbrk+0x64>)
 8003474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003476:	68fb      	ldr	r3, [r7, #12]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20005000 	.word	0x20005000
 8003484:	00000400 	.word	0x00000400
 8003488:	20000218 	.word	0x20000218
 800348c:	20000370 	.word	0x20000370

08003490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800349c:	f7ff fff8 	bl	8003490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034a0:	480b      	ldr	r0, [pc, #44]	@ (80034d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034a2:	490c      	ldr	r1, [pc, #48]	@ (80034d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80034a4:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80034a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034a8:	e002      	b.n	80034b0 <LoopCopyDataInit>

080034aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ae:	3304      	adds	r3, #4

080034b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034b4:	d3f9      	bcc.n	80034aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034b6:	4a09      	ldr	r2, [pc, #36]	@ (80034dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034b8:	4c09      	ldr	r4, [pc, #36]	@ (80034e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034bc:	e001      	b.n	80034c2 <LoopFillZerobss>

080034be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c0:	3204      	adds	r2, #4

080034c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034c4:	d3fb      	bcc.n	80034be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034c6:	f002 fd31 	bl	8005f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ca:	f7ff fb87 	bl	8002bdc <main>
  bx lr
 80034ce:	4770      	bx	lr
  ldr r0, =_sdata
 80034d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034d4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80034d8:	08006d20 	.word	0x08006d20
  ldr r2, =_sbss
 80034dc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80034e0:	20000370 	.word	0x20000370

080034e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC1_2_IRQHandler>
	...

080034e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <HAL_Init+0x28>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <HAL_Init+0x28>)
 80034f2:	f043 0310 	orr.w	r3, r3, #16
 80034f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f8:	2003      	movs	r0, #3
 80034fa:	f000 f947 	bl	800378c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034fe:	200f      	movs	r0, #15
 8003500:	f000 f808 	bl	8003514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003504:	f7ff fd1e 	bl	8002f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40022000 	.word	0x40022000

08003514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800351c:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <HAL_InitTick+0x54>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b12      	ldr	r3, [pc, #72]	@ (800356c <HAL_InitTick+0x58>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800352a:	fbb3 f3f1 	udiv	r3, r3, r1
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f95f 	bl	80037f6 <HAL_SYSTICK_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e00e      	b.n	8003560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b0f      	cmp	r3, #15
 8003546:	d80a      	bhi.n	800355e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003548:	2200      	movs	r2, #0
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003550:	f000 f927 	bl	80037a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003554:	4a06      	ldr	r2, [pc, #24]	@ (8003570 <HAL_InitTick+0x5c>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000034 	.word	0x20000034
 800356c:	2000003c 	.word	0x2000003c
 8003570:	20000038 	.word	0x20000038

08003574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_IncTick+0x1c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_IncTick+0x20>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4413      	add	r3, r2
 8003584:	4a03      	ldr	r2, [pc, #12]	@ (8003594 <HAL_IncTick+0x20>)
 8003586:	6013      	str	r3, [r2, #0]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	2000003c 	.word	0x2000003c
 8003594:	2000021c 	.word	0x2000021c

08003598 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return uwTick;
 800359c:	4b02      	ldr	r3, [pc, #8]	@ (80035a8 <HAL_GetTick+0x10>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	2000021c 	.word	0x2000021c

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff fff0 	bl	8003598 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c4:	d005      	beq.n	80035d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_Delay+0x44>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035d2:	bf00      	nop
 80035d4:	f7ff ffe0 	bl	8003598 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f7      	bhi.n	80035d4 <HAL_Delay+0x28>
  {
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	2000003c 	.word	0x2000003c

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	@ (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4906      	ldr	r1, [pc, #24]	@ (800368c <__NVIC_EnableIRQ+0x34>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100

08003690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	db0a      	blt.n	80036ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	490c      	ldr	r1, [pc, #48]	@ (80036dc <__NVIC_SetPriority+0x4c>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	0112      	lsls	r2, r2, #4
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	440b      	add	r3, r1
 80036b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b8:	e00a      	b.n	80036d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4908      	ldr	r1, [pc, #32]	@ (80036e0 <__NVIC_SetPriority+0x50>)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3b04      	subs	r3, #4
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	440b      	add	r3, r1
 80036ce:	761a      	strb	r2, [r3, #24]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	@ 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f1c3 0307 	rsb	r3, r3, #7
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf28      	it	cs
 8003702:	2304      	movcs	r3, #4
 8003704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3304      	adds	r3, #4
 800370a:	2b06      	cmp	r3, #6
 800370c:	d902      	bls.n	8003714 <NVIC_EncodePriority+0x30>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3b03      	subs	r3, #3
 8003712:	e000      	b.n	8003716 <NVIC_EncodePriority+0x32>
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	401a      	ands	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800372c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	43d9      	mvns	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	4313      	orrs	r3, r2
         );
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	@ 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003758:	d301      	bcc.n	800375e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800375a:	2301      	movs	r3, #1
 800375c:	e00f      	b.n	800377e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <SysTick_Config+0x40>)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003766:	210f      	movs	r1, #15
 8003768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800376c:	f7ff ff90 	bl	8003690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <SysTick_Config+0x40>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003776:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <SysTick_Config+0x40>)
 8003778:	2207      	movs	r2, #7
 800377a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	e000e010 	.word	0xe000e010

0800378c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff2d 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b4:	f7ff ff42 	bl	800363c <__NVIC_GetPriorityGrouping>
 80037b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	6978      	ldr	r0, [r7, #20]
 80037c0:	f7ff ff90 	bl	80036e4 <NVIC_EncodePriority>
 80037c4:	4602      	mov	r2, r0
 80037c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff5f 	bl	8003690 <__NVIC_SetPriority>
}
 80037d2:	bf00      	nop
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	4603      	mov	r3, r0
 80037e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ff35 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ffa2 	bl	8003748 <SysTick_Config>
 8003804:	4603      	mov	r3, r0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e043      	b.n	80038ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	4b22      	ldr	r3, [pc, #136]	@ (80038b8 <HAL_DMA_Init+0xa8>)
 800382e:	4413      	add	r3, r2
 8003830:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <HAL_DMA_Init+0xac>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	009a      	lsls	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1f      	ldr	r2, [pc, #124]	@ (80038c0 <HAL_DMA_Init+0xb0>)
 8003842:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800385a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800385e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003868:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003874:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003880:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	bffdfff8 	.word	0xbffdfff8
 80038bc:	cccccccd 	.word	0xcccccccd
 80038c0:	40020000 	.word	0x40020000

080038c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d005      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e051      	b.n	800398c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020e 	bic.w	r2, r2, #14
 80038f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_Abort_IT+0xd4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d029      	beq.n	8003966 <HAL_DMA_Abort_IT+0xa2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a21      	ldr	r2, [pc, #132]	@ (800399c <HAL_DMA_Abort_IT+0xd8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_Abort_IT+0x9e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <HAL_DMA_Abort_IT+0xdc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01a      	beq.n	800395c <HAL_DMA_Abort_IT+0x98>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1e      	ldr	r2, [pc, #120]	@ (80039a4 <HAL_DMA_Abort_IT+0xe0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d012      	beq.n	8003956 <HAL_DMA_Abort_IT+0x92>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_DMA_Abort_IT+0xe4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x8c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_DMA_Abort_IT+0xe8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d102      	bne.n	800394a <HAL_DMA_Abort_IT+0x86>
 8003944:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003948:	e00e      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 800394a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800394e:	e00b      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003954:	e008      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800395a:	e005      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 800395c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003960:	e002      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003962:	2310      	movs	r3, #16
 8003964:	e000      	b.n	8003968 <HAL_DMA_Abort_IT+0xa4>
 8003966:	2301      	movs	r3, #1
 8003968:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <HAL_DMA_Abort_IT+0xec>)
 800396a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
    } 
  }
  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40020008 	.word	0x40020008
 800399c:	4002001c 	.word	0x4002001c
 80039a0:	40020030 	.word	0x40020030
 80039a4:	40020044 	.word	0x40020044
 80039a8:	40020058 	.word	0x40020058
 80039ac:	4002006c 	.word	0x4002006c
 80039b0:	40020000 	.word	0x40020000

080039b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	2204      	movs	r2, #4
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d04f      	beq.n	8003a7c <HAL_DMA_IRQHandler+0xc8>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d04a      	beq.n	8003a7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d107      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a66      	ldr	r2, [pc, #408]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d029      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xae>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a65      	ldr	r2, [pc, #404]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1f4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xaa>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a63      	ldr	r2, [pc, #396]	@ (8003bac <HAL_DMA_IRQHandler+0x1f8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01a      	beq.n	8003a58 <HAL_DMA_IRQHandler+0xa4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a62      	ldr	r2, [pc, #392]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1fc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d012      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x9e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a60      	ldr	r2, [pc, #384]	@ (8003bb4 <HAL_DMA_IRQHandler+0x200>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00a      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x98>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb8 <HAL_DMA_IRQHandler+0x204>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d102      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x92>
 8003a40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a44:	e00e      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a4a:	e00b      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a50:	e008      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a56:	e005      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a5c:	e002      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a5e:	2340      	movs	r3, #64	@ 0x40
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0xb0>
 8003a62:	2304      	movs	r3, #4
 8003a64:	4a55      	ldr	r2, [pc, #340]	@ (8003bbc <HAL_DMA_IRQHandler+0x208>)
 8003a66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8094 	beq.w	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a7a:	e08e      	b.n	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	2202      	movs	r2, #2
 8003a82:	409a      	lsls	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d056      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x186>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d051      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020a 	bic.w	r2, r2, #10
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a38      	ldr	r2, [pc, #224]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1f0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d029      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x166>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x162>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	@ (8003bac <HAL_DMA_IRQHandler+0x1f8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01a      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x15c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a34      	ldr	r2, [pc, #208]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1fc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d012      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x156>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a32      	ldr	r2, [pc, #200]	@ (8003bb4 <HAL_DMA_IRQHandler+0x200>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00a      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x150>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a31      	ldr	r2, [pc, #196]	@ (8003bb8 <HAL_DMA_IRQHandler+0x204>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <HAL_DMA_IRQHandler+0x14a>
 8003af8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003afc:	e00e      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b02:	e00b      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b08:	e008      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b0e:	e005      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b14:	e002      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b16:	2320      	movs	r3, #32
 8003b18:	e000      	b.n	8003b1c <HAL_DMA_IRQHandler+0x168>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	4a27      	ldr	r2, [pc, #156]	@ (8003bbc <HAL_DMA_IRQHandler+0x208>)
 8003b1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d034      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b38:	e02f      	b.n	8003b9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2208      	movs	r2, #8
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d028      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1e8>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d023      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 020e 	bic.w	r2, r2, #14
 8003b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
    }
  }
  return;
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
}
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40020008 	.word	0x40020008
 8003ba8:	4002001c 	.word	0x4002001c
 8003bac:	40020030 	.word	0x40020030
 8003bb0:	40020044 	.word	0x40020044
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	4002006c 	.word	0x4002006c
 8003bbc:	40020000 	.word	0x40020000

08003bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b08b      	sub	sp, #44	@ 0x2c
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd2:	e169      	b.n	8003ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	f040 8158 	bne.w	8003ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a9a      	ldr	r2, [pc, #616]	@ (8003e60 <HAL_GPIO_Init+0x2a0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d05e      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003bfc:	4a98      	ldr	r2, [pc, #608]	@ (8003e60 <HAL_GPIO_Init+0x2a0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d875      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c02:	4a98      	ldr	r2, [pc, #608]	@ (8003e64 <HAL_GPIO_Init+0x2a4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d058      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c08:	4a96      	ldr	r2, [pc, #600]	@ (8003e64 <HAL_GPIO_Init+0x2a4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d86f      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c0e:	4a96      	ldr	r2, [pc, #600]	@ (8003e68 <HAL_GPIO_Init+0x2a8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d052      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c14:	4a94      	ldr	r2, [pc, #592]	@ (8003e68 <HAL_GPIO_Init+0x2a8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d869      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c1a:	4a94      	ldr	r2, [pc, #592]	@ (8003e6c <HAL_GPIO_Init+0x2ac>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04c      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c20:	4a92      	ldr	r2, [pc, #584]	@ (8003e6c <HAL_GPIO_Init+0x2ac>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d863      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c26:	4a92      	ldr	r2, [pc, #584]	@ (8003e70 <HAL_GPIO_Init+0x2b0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d046      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c2c:	4a90      	ldr	r2, [pc, #576]	@ (8003e70 <HAL_GPIO_Init+0x2b0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d85d      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c32:	2b12      	cmp	r3, #18
 8003c34:	d82a      	bhi.n	8003c8c <HAL_GPIO_Init+0xcc>
 8003c36:	2b12      	cmp	r3, #18
 8003c38:	d859      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <HAL_GPIO_Init+0x80>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003cbb 	.word	0x08003cbb
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003ca7 	.word	0x08003ca7
 8003c4c:	08003ce9 	.word	0x08003ce9
 8003c50:	08003cef 	.word	0x08003cef
 8003c54:	08003cef 	.word	0x08003cef
 8003c58:	08003cef 	.word	0x08003cef
 8003c5c:	08003cef 	.word	0x08003cef
 8003c60:	08003cef 	.word	0x08003cef
 8003c64:	08003cef 	.word	0x08003cef
 8003c68:	08003cef 	.word	0x08003cef
 8003c6c:	08003cef 	.word	0x08003cef
 8003c70:	08003cef 	.word	0x08003cef
 8003c74:	08003cef 	.word	0x08003cef
 8003c78:	08003cef 	.word	0x08003cef
 8003c7c:	08003cef 	.word	0x08003cef
 8003c80:	08003cef 	.word	0x08003cef
 8003c84:	08003c9d 	.word	0x08003c9d
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	4a79      	ldr	r2, [pc, #484]	@ (8003e74 <HAL_GPIO_Init+0x2b4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c92:	e02c      	b.n	8003cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	623b      	str	r3, [r7, #32]
          break;
 8003c9a:	e029      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	623b      	str	r3, [r7, #32]
          break;
 8003ca4:	e024      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	3308      	adds	r3, #8
 8003cac:	623b      	str	r3, [r7, #32]
          break;
 8003cae:	e01f      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	623b      	str	r3, [r7, #32]
          break;
 8003cb8:	e01a      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	623b      	str	r3, [r7, #32]
          break;
 8003cc6:	e013      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	611a      	str	r2, [r3, #16]
          break;
 8003cda:	e009      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cdc:	2308      	movs	r3, #8
 8003cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	615a      	str	r2, [r3, #20]
          break;
 8003ce6:	e003      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	623b      	str	r3, [r7, #32]
          break;
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          break;
 8003cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2bff      	cmp	r3, #255	@ 0xff
 8003cf4:	d801      	bhi.n	8003cfa <HAL_GPIO_Init+0x13a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	e001      	b.n	8003cfe <HAL_GPIO_Init+0x13e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2bff      	cmp	r3, #255	@ 0xff
 8003d04:	d802      	bhi.n	8003d0c <HAL_GPIO_Init+0x14c>
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x152>
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	3b08      	subs	r3, #8
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	210f      	movs	r1, #15
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	6a39      	ldr	r1, [r7, #32]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80b1 	beq.w	8003ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d40:	4b4d      	ldr	r3, [pc, #308]	@ (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	4a4c      	ldr	r2, [pc, #304]	@ (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6193      	str	r3, [r2, #24]
 8003d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d58:	4a48      	ldr	r2, [pc, #288]	@ (8003e7c <HAL_GPIO_Init+0x2bc>)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	220f      	movs	r2, #15
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a40      	ldr	r2, [pc, #256]	@ (8003e80 <HAL_GPIO_Init+0x2c0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_GPIO_Init+0x1ec>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3f      	ldr	r2, [pc, #252]	@ (8003e84 <HAL_GPIO_Init+0x2c4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00d      	beq.n	8003da8 <HAL_GPIO_Init+0x1e8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e88 <HAL_GPIO_Init+0x2c8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <HAL_GPIO_Init+0x1e4>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3d      	ldr	r2, [pc, #244]	@ (8003e8c <HAL_GPIO_Init+0x2cc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_GPIO_Init+0x1e0>
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003da0:	2304      	movs	r3, #4
 8003da2:	e004      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e002      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003dac:	2300      	movs	r3, #0
 8003dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db0:	f002 0203 	and.w	r2, r2, #3
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	4093      	lsls	r3, r2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dbe:	492f      	ldr	r1, [pc, #188]	@ (8003e7c <HAL_GPIO_Init+0x2bc>)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	492c      	ldr	r1, [pc, #176]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	608b      	str	r3, [r1, #8]
 8003de4:	e006      	b.n	8003df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003de6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	4928      	ldr	r1, [pc, #160]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e00:	4b23      	ldr	r3, [pc, #140]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	4922      	ldr	r1, [pc, #136]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60cb      	str	r3, [r1, #12]
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e0e:	4b20      	ldr	r3, [pc, #128]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	491e      	ldr	r1, [pc, #120]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e28:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4918      	ldr	r1, [pc, #96]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e36:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	4914      	ldr	r1, [pc, #80]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d021      	beq.n	8003e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e50:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	490e      	ldr	r1, [pc, #56]	@ (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]
 8003e5c:	e021      	b.n	8003ea2 <HAL_GPIO_Init+0x2e2>
 8003e5e:	bf00      	nop
 8003e60:	10320000 	.word	0x10320000
 8003e64:	10310000 	.word	0x10310000
 8003e68:	10220000 	.word	0x10220000
 8003e6c:	10210000 	.word	0x10210000
 8003e70:	10120000 	.word	0x10120000
 8003e74:	10110000 	.word	0x10110000
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40010800 	.word	0x40010800
 8003e84:	40010c00 	.word	0x40010c00
 8003e88:	40011000 	.word	0x40011000
 8003e8c:	40011400 	.word	0x40011400
 8003e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_GPIO_Init+0x304>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	4909      	ldr	r1, [pc, #36]	@ (8003ec4 <HAL_GPIO_Init+0x304>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f47f ae8e 	bne.w	8003bd4 <HAL_GPIO_Init+0x14>
  }
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	372c      	adds	r7, #44	@ 0x2c
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ed8:	787b      	ldrb	r3, [r7, #1]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ee4:	e003      	b.n	8003eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ee6:	887b      	ldrh	r3, [r7, #2]
 8003ee8:	041a      	lsls	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	611a      	str	r2, [r3, #16]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f02:	4b08      	ldr	r3, [pc, #32]	@ (8003f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f0e:	4a05      	ldr	r2, [pc, #20]	@ (8003f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f806 	bl	8003f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40010400 	.word	0x40010400

08003f28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e272      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8087 	beq.w	800406a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f5c:	4b92      	ldr	r3, [pc, #584]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d00c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f68:	4b8f      	ldr	r3, [pc, #572]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d112      	bne.n	8003f9a <HAL_RCC_OscConfig+0x5e>
 8003f74:	4b8c      	ldr	r3, [pc, #560]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f82:	4b89      	ldr	r3, [pc, #548]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06c      	beq.n	8004068 <HAL_RCC_OscConfig+0x12c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d168      	bne.n	8004068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e24c      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x76>
 8003fa4:	4b80      	ldr	r3, [pc, #512]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e02e      	b.n	8004010 <HAL_RCC_OscConfig+0xd4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x98>
 8003fba:	4b7b      	ldr	r3, [pc, #492]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7a      	ldr	r2, [pc, #488]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b78      	ldr	r3, [pc, #480]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a77      	ldr	r2, [pc, #476]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xd4>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0xbc>
 8003fde:	4b72      	ldr	r3, [pc, #456]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a71      	ldr	r2, [pc, #452]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b6f      	ldr	r3, [pc, #444]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6e      	ldr	r2, [pc, #440]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xd4>
 8003ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b68      	ldr	r3, [pc, #416]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a67      	ldr	r2, [pc, #412]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800400e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7ff fabe 	bl	8003598 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004020:	f7ff faba 	bl	8003598 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	@ 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e200      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b5d      	ldr	r3, [pc, #372]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xe4>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7ff faaa 	bl	8003598 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004048:	f7ff faa6 	bl	8003598 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	@ 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1ec      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	4b53      	ldr	r3, [pc, #332]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x10c>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d063      	beq.n	800413e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004076:	4b4c      	ldr	r3, [pc, #304]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004082:	4b49      	ldr	r3, [pc, #292]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x18c>
 800408e:	4b46      	ldr	r3, [pc, #280]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b43      	ldr	r3, [pc, #268]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x176>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1c0      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b3d      	ldr	r3, [pc, #244]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4939      	ldr	r1, [pc, #228]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e03a      	b.n	800413e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b36      	ldr	r3, [pc, #216]	@ (80041ac <HAL_RCC_OscConfig+0x270>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7ff fa5f 	bl	8003598 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040de:	f7ff fa5b 	bl	8003598 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1a1      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b2a      	ldr	r3, [pc, #168]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4927      	ldr	r1, [pc, #156]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004112:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <HAL_RCC_OscConfig+0x270>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7ff fa3e 	bl	8003598 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004120:	f7ff fa3a 	bl	8003598 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e180      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d03a      	beq.n	80041c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d019      	beq.n	8004186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7ff fa1e 	bl	8003598 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7ff fa1a 	bl	8003598 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e160      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800417e:	2001      	movs	r0, #1
 8004180:	f000 fa9c 	bl	80046bc <RCC_Delay>
 8004184:	e01c      	b.n	80041c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004186:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418c:	f7ff fa04 	bl	8003598 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004192:	e00f      	b.n	80041b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004194:	f7ff fa00 	bl	8003598 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d908      	bls.n	80041b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e146      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	42420000 	.word	0x42420000
 80041b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	4b92      	ldr	r3, [pc, #584]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e9      	bne.n	8004194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a6 	beq.w	800431a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b88      	ldr	r3, [pc, #544]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4a87      	ldr	r2, [pc, #540]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	61d3      	str	r3, [r2, #28]
 80041ea:	4b85      	ldr	r3, [pc, #532]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b82      	ldr	r3, [pc, #520]	@ (8004404 <HAL_RCC_OscConfig+0x4c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <HAL_RCC_OscConfig+0x4c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7e      	ldr	r2, [pc, #504]	@ (8004404 <HAL_RCC_OscConfig+0x4c8>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7ff f9c1 	bl	8003598 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7ff f9bd 	bl	8003598 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	@ 0x64
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e103      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b75      	ldr	r3, [pc, #468]	@ (8004404 <HAL_RCC_OscConfig+0x4c8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x312>
 8004240:	4b6f      	ldr	r3, [pc, #444]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4a6e      	ldr	r2, [pc, #440]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6213      	str	r3, [r2, #32]
 800424c:	e02d      	b.n	80042aa <HAL_RCC_OscConfig+0x36e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x334>
 8004256:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	4a69      	ldr	r2, [pc, #420]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6213      	str	r3, [r2, #32]
 8004262:	4b67      	ldr	r3, [pc, #412]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4a66      	ldr	r2, [pc, #408]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	6213      	str	r3, [r2, #32]
 800426e:	e01c      	b.n	80042aa <HAL_RCC_OscConfig+0x36e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d10c      	bne.n	8004292 <HAL_RCC_OscConfig+0x356>
 8004278:	4b61      	ldr	r3, [pc, #388]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4a60      	ldr	r2, [pc, #384]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	6213      	str	r3, [r2, #32]
 8004284:	4b5e      	ldr	r3, [pc, #376]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a5d      	ldr	r2, [pc, #372]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	e00b      	b.n	80042aa <HAL_RCC_OscConfig+0x36e>
 8004292:	4b5b      	ldr	r3, [pc, #364]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4a5a      	ldr	r2, [pc, #360]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	6213      	str	r3, [r2, #32]
 800429e:	4b58      	ldr	r3, [pc, #352]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a57      	ldr	r2, [pc, #348]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	f023 0304 	bic.w	r3, r3, #4
 80042a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7ff f971 	bl	8003598 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7ff f96d 	bl	8003598 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0b1      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ee      	beq.n	80042ba <HAL_RCC_OscConfig+0x37e>
 80042dc:	e014      	b.n	8004308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7ff f95b 	bl	8003598 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7ff f957 	bl	8003598 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e09b      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fc:	4b40      	ldr	r3, [pc, #256]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d105      	bne.n	800431a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430e:	4b3c      	ldr	r3, [pc, #240]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4a3b      	ldr	r2, [pc, #236]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8087 	beq.w	8004432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004324:	4b36      	ldr	r3, [pc, #216]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d061      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d146      	bne.n	80043c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b33      	ldr	r3, [pc, #204]	@ (8004408 <HAL_RCC_OscConfig+0x4cc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7ff f92b 	bl	8003598 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004346:	f7ff f927 	bl	8003598 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e06d      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004358:	4b29      	ldr	r3, [pc, #164]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436c:	d108      	bne.n	8004380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800436e:	4b24      	ldr	r3, [pc, #144]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	4921      	ldr	r1, [pc, #132]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004380:	4b1f      	ldr	r3, [pc, #124]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a19      	ldr	r1, [r3, #32]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	430b      	orrs	r3, r1
 8004392:	491b      	ldr	r1, [pc, #108]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004398:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <HAL_RCC_OscConfig+0x4cc>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7ff f8fb 	bl	8003598 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7ff f8f7 	bl	8003598 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e03d      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043b8:	4b11      	ldr	r3, [pc, #68]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x46a>
 80043c4:	e035      	b.n	8004432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_RCC_OscConfig+0x4cc>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7ff f8e4 	bl	8003598 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7ff f8e0 	bl	8003598 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e026      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e6:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x498>
 80043f2:	e01e      	b.n	8004432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d107      	bne.n	800440c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e019      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
 8004400:	40021000 	.word	0x40021000
 8004404:	40007000 	.word	0x40007000
 8004408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_RCC_OscConfig+0x500>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	429a      	cmp	r2, r3
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000

08004440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0d0      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b6a      	ldr	r3, [pc, #424]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d910      	bls.n	8004484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b67      	ldr	r3, [pc, #412]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 0207 	bic.w	r2, r3, #7
 800446a:	4965      	ldr	r1, [pc, #404]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b63      	ldr	r3, [pc, #396]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0b8      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800449c:	4b59      	ldr	r3, [pc, #356]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4a58      	ldr	r2, [pc, #352]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b4:	4b53      	ldr	r3, [pc, #332]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a52      	ldr	r2, [pc, #328]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c0:	4b50      	ldr	r3, [pc, #320]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	494d      	ldr	r1, [pc, #308]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d040      	beq.n	8004560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b47      	ldr	r3, [pc, #284]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d115      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e07f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	4b41      	ldr	r3, [pc, #260]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e073      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450e:	4b3d      	ldr	r3, [pc, #244]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e06b      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b39      	ldr	r3, [pc, #228]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4936      	ldr	r1, [pc, #216]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004530:	f7ff f832 	bl	8003598 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7ff f82e 	bl	8003598 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e053      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b2d      	ldr	r3, [pc, #180]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004560:	4b27      	ldr	r3, [pc, #156]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d210      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b24      	ldr	r3, [pc, #144]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 0207 	bic.w	r2, r3, #7
 8004576:	4922      	ldr	r1, [pc, #136]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b20      	ldr	r3, [pc, #128]	@ (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e032      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4916      	ldr	r1, [pc, #88]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ba:	4b12      	ldr	r3, [pc, #72]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	490e      	ldr	r1, [pc, #56]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ce:	f000 f821 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	490a      	ldr	r1, [pc, #40]	@ (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	5ccb      	ldrb	r3, [r1, r3]
 80045e2:	fa22 f303 	lsr.w	r3, r2, r3
 80045e6:	4a09      	ldr	r2, [pc, #36]	@ (800460c <HAL_RCC_ClockConfig+0x1cc>)
 80045e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045ea:	4b09      	ldr	r3, [pc, #36]	@ (8004610 <HAL_RCC_ClockConfig+0x1d0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe ff90 	bl	8003514 <HAL_InitTick>

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40022000 	.word	0x40022000
 8004604:	40021000 	.word	0x40021000
 8004608:	08006cc0 	.word	0x08006cc0
 800460c:	20000034 	.word	0x20000034
 8004610:	20000038 	.word	0x20000038

08004614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800462e:	4b1e      	ldr	r3, [pc, #120]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b04      	cmp	r3, #4
 800463c:	d002      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x30>
 800463e:	2b08      	cmp	r3, #8
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x36>
 8004642:	e027      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004644:	4b19      	ldr	r3, [pc, #100]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004646:	613b      	str	r3, [r7, #16]
      break;
 8004648:	e027      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	0c9b      	lsrs	r3, r3, #18
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	4a17      	ldr	r2, [pc, #92]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004654:	5cd3      	ldrb	r3, [r2, r3]
 8004656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004662:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	0c5b      	lsrs	r3, r3, #17
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	4a11      	ldr	r2, [pc, #68]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800466e:	5cd3      	ldrb	r3, [r2, r3]
 8004670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a0d      	ldr	r2, [pc, #52]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004676:	fb03 f202 	mul.w	r2, r3, r2
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e004      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0c      	ldr	r2, [pc, #48]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	613b      	str	r3, [r7, #16]
      break;
 8004692:	e002      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004696:	613b      	str	r3, [r7, #16]
      break;
 8004698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469a:	693b      	ldr	r3, [r7, #16]
}
 800469c:	4618      	mov	r0, r3
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	007a1200 	.word	0x007a1200
 80046b0:	08006cd0 	.word	0x08006cd0
 80046b4:	08006ce0 	.word	0x08006ce0
 80046b8:	003d0900 	.word	0x003d0900

080046bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <RCC_Delay+0x34>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	@ (80046f4 <RCC_Delay+0x38>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0a5b      	lsrs	r3, r3, #9
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046d8:	bf00      	nop
  }
  while (Delay --);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	60fa      	str	r2, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f9      	bne.n	80046d8 <RCC_Delay+0x1c>
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	20000034 	.word	0x20000034
 80046f4:	10624dd3 	.word	0x10624dd3

080046f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e076      	b.n	80047f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471a:	d009      	beq.n	8004730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
 8004722:	e005      	b.n	8004730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fe fc2c 	bl	8002fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b4:	ea42 0103 	orr.w	r1, r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	0c1a      	lsrs	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f002 0204 	and.w	r2, r2, #4
 80047d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800480e:	2301      	movs	r3, #1
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004812:	f7fe fec1 	bl	8003598 <HAL_GetTick>
 8004816:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800481e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004826:	887b      	ldrh	r3, [r7, #2]
 8004828:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800482a:	7ffb      	ldrb	r3, [r7, #31]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d00c      	beq.n	800484a <HAL_SPI_TransmitReceive+0x4a>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004836:	d106      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x46>
 8004840:	7ffb      	ldrb	r3, [r7, #31]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d001      	beq.n	800484a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004846:	2302      	movs	r3, #2
 8004848:	e17f      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_SPI_TransmitReceive+0x5c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_SPI_TransmitReceive+0x5c>
 8004856:	887b      	ldrh	r3, [r7, #2]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e174      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_SPI_TransmitReceive+0x6e>
 800486a:	2302      	movs	r3, #2
 800486c:	e16d      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x34a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b04      	cmp	r3, #4
 8004880:	d003      	beq.n	800488a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2205      	movs	r2, #5
 8004886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	887a      	ldrh	r2, [r7, #2]
 800489a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	887a      	ldrh	r2, [r7, #2]
 80048b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ca:	2b40      	cmp	r3, #64	@ 0x40
 80048cc:	d007      	beq.n	80048de <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e6:	d17e      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0xf6>
 80048f0:	8afb      	ldrh	r3, [r7, #22]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d16c      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	881a      	ldrh	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	1c9a      	adds	r2, r3, #2
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491a:	e059      	b.n	80049d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d11b      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x162>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d016      	beq.n	8004962 <HAL_SPI_TransmitReceive+0x162>
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	2b01      	cmp	r3, #1
 8004938:	d113      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d119      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x1a4>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d014      	beq.n	80049a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	b292      	uxth	r2, r2
 8004986:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a0:	2301      	movs	r3, #1
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049a4:	f7fe fdf8 	bl	8003598 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d80d      	bhi.n	80049d0 <HAL_SPI_TransmitReceive+0x1d0>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ba:	d009      	beq.n	80049d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0bc      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1a0      	bne.n	800491c <HAL_SPI_TransmitReceive+0x11c>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d19b      	bne.n	800491c <HAL_SPI_TransmitReceive+0x11c>
 80049e4:	e082      	b.n	8004aec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x1f4>
 80049ee:	8afb      	ldrh	r3, [r7, #22]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d171      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1a:	e05d      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d11c      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x264>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d017      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x264>
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d114      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d119      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x2a6>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d014      	beq.n	8004aa6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aa6:	f7fe fd77 	bl	8003598 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d803      	bhi.n	8004abe <HAL_SPI_TransmitReceive+0x2be>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004abc:	d102      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x2c4>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d109      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e038      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d19c      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x21c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d197      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f9b1 	bl	8004e58 <SPI_EndRxTxTransaction>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e01d      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3728      	adds	r7, #40	@ 0x28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	099b      	lsrs	r3, r3, #6
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10f      	bne.n	8004b98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
    return;
 8004b96:	e0be      	b.n	8004d16 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_SPI_IRQHandler+0x66>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	09db      	lsrs	r3, r3, #7
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
    return;
 8004bb8:	e0ad      	b.n	8004d16 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_SPI_IRQHandler+0x80>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a1 	beq.w	8004d16 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 809a 	beq.w	8004d16 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d023      	beq.n	8004c36 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d011      	beq.n	8004c1e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfe:	f043 0204 	orr.w	r2, r3, #4
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	e00b      	b.n	8004c36 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	693b      	ldr	r3, [r7, #16]
        return;
 8004c34:	e06f      	b.n	8004d16 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d014      	beq.n	8004c6c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c46:	f043 0201 	orr.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d04f      	beq.n	8004d14 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c82:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d104      	bne.n	8004ca0 <HAL_SPI_IRQHandler+0x14c>
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d034      	beq.n	8004d0a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0203 	bic.w	r2, r2, #3
 8004cae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d011      	beq.n	8004cdc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbc:	4a17      	ldr	r2, [pc, #92]	@ (8004d1c <HAL_SPI_IRQHandler+0x1c8>)
 8004cbe:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe fdfd 	bl	80038c4 <HAL_DMA_Abort_IT>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d016      	beq.n	8004d12 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8004d1c <HAL_SPI_IRQHandler+0x1c8>)
 8004cea:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fde7 	bl	80038c4 <HAL_DMA_Abort_IT>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004d08:	e003      	b.n	8004d12 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fe f906 	bl	8002f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d10:	e000      	b.n	8004d14 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004d12:	bf00      	nop
    return;
 8004d14:	bf00      	nop
  }
}
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	08004d21 	.word	0x08004d21

08004d20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7fe f8ee 	bl	8002f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d58:	f7fe fc1e 	bl	8003598 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	4413      	add	r3, r2
 8004d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d68:	f7fe fc16 	bl	8003598 <HAL_GetTick>
 8004d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d6e:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	015b      	lsls	r3, r3, #5
 8004d74:	0d1b      	lsrs	r3, r3, #20
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	fb02 f303 	mul.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7e:	e054      	b.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d86:	d050      	beq.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d88:	f7fe fc06 	bl	8003598 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d902      	bls.n	8004d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d13d      	bne.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004db6:	d111      	bne.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc0:	d004      	beq.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dca:	d107      	bne.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de4:	d10f      	bne.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e017      	b.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d19b      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000034 	.word	0x20000034

08004e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff ff6a 	bl	8004d48 <SPI_WaitFlagStateUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e013      	b.n	8004eb2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2200      	movs	r2, #0
 8004e92:	2180      	movs	r1, #128	@ 0x80
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff ff57 	bl	8004d48 <SPI_WaitFlagStateUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e000      	b.n	8004eb2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e03a      	b.n	8004f4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	@ (8004f54 <HAL_TIM_Base_Start_IT+0x98>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x58>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efe:	d009      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x58>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a14      	ldr	r2, [pc, #80]	@ (8004f58 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x58>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a13      	ldr	r2, [pc, #76]	@ (8004f5c <HAL_TIM_Base_Start_IT+0xa0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d111      	bne.n	8004f38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d010      	beq.n	8004f48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	e007      	b.n	8004f48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800

08004f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e041      	b.n	8004ff6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fe f8b8 	bl	80030fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f000 fab0 	bl	8005504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_TIM_PWM_Start+0x24>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e022      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d109      	bne.n	800503e <HAL_TIM_PWM_Start+0x3e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e015      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d109      	bne.n	8005058 <HAL_TIM_PWM_Start+0x58>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e008      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e05e      	b.n	8005130 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0x82>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005080:	e013      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0x92>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005090:	e00b      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0xa2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a0:	e003      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fc1c 	bl	80058f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005138 <HAL_TIM_PWM_Start+0x138>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d107      	bne.n	80050d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <HAL_TIM_PWM_Start+0x138>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_TIM_PWM_Start+0xfa>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e4:	d009      	beq.n	80050fa <HAL_TIM_PWM_Start+0xfa>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a14      	ldr	r2, [pc, #80]	@ (800513c <HAL_TIM_PWM_Start+0x13c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIM_PWM_Start+0xfa>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a12      	ldr	r2, [pc, #72]	@ (8005140 <HAL_TIM_PWM_Start+0x140>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d111      	bne.n	800511e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b06      	cmp	r3, #6
 800510a:	d010      	beq.n	800512e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	e007      	b.n	800512e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800

08005144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0202 	mvn.w	r2, #2
 8005178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f99c 	bl	80054cc <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f98f 	bl	80054ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f99e 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d020      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0204 	mvn.w	r2, #4
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f976 	bl	80054cc <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f969 	bl	80054ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f978 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0208 	mvn.w	r2, #8
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2204      	movs	r2, #4
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f950 	bl	80054cc <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f943 	bl	80054ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f952 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b00      	cmp	r3, #0
 8005248:	d020      	beq.n	800528c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0210 	mvn.w	r2, #16
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2208      	movs	r2, #8
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f92a 	bl	80054cc <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f91d 	bl	80054ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f92c 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0201 	mvn.w	r2, #1
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8fc 	bl	80054a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fb99 	bl	8005a06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8fc 	bl	80054f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0220 	mvn.w	r2, #32
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fb6c 	bl	80059f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800533e:	2302      	movs	r3, #2
 8005340:	e0ae      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	f200 809f 	bhi.w	8005490 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005352:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800538d 	.word	0x0800538d
 800535c:	08005491 	.word	0x08005491
 8005360:	08005491 	.word	0x08005491
 8005364:	08005491 	.word	0x08005491
 8005368:	080053cd 	.word	0x080053cd
 800536c:	08005491 	.word	0x08005491
 8005370:	08005491 	.word	0x08005491
 8005374:	08005491 	.word	0x08005491
 8005378:	0800540f 	.word	0x0800540f
 800537c:	08005491 	.word	0x08005491
 8005380:	08005491 	.word	0x08005491
 8005384:	08005491 	.word	0x08005491
 8005388:	0800544f 	.word	0x0800544f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f924 	bl	80055e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6999      	ldr	r1, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	619a      	str	r2, [r3, #24]
      break;
 80053ca:	e064      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f96a 	bl	80056ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
      break;
 800540c:	e043      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f9b3 	bl	8005780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0208 	orr.w	r2, r2, #8
 8005428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0204 	bic.w	r2, r2, #4
 8005438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69d9      	ldr	r1, [r3, #28]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	61da      	str	r2, [r3, #28]
      break;
 800544c:	e023      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f9fd 	bl	8005854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69d9      	ldr	r1, [r3, #28]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	021a      	lsls	r2, r3, #8
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	61da      	str	r2, [r3, #28]
      break;
 800548e:	e002      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
      break;
 8005494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
	...

08005504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a2f      	ldr	r2, [pc, #188]	@ (80055d4 <TIM_Base_SetConfig+0xd0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x30>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x30>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a2c      	ldr	r2, [pc, #176]	@ (80055d8 <TIM_Base_SetConfig+0xd4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x30>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a2b      	ldr	r2, [pc, #172]	@ (80055dc <TIM_Base_SetConfig+0xd8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a22      	ldr	r2, [pc, #136]	@ (80055d4 <TIM_Base_SetConfig+0xd0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00b      	beq.n	8005566 <TIM_Base_SetConfig+0x62>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005554:	d007      	beq.n	8005566 <TIM_Base_SetConfig+0x62>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a1f      	ldr	r2, [pc, #124]	@ (80055d8 <TIM_Base_SetConfig+0xd4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_Base_SetConfig+0x62>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1e      	ldr	r2, [pc, #120]	@ (80055dc <TIM_Base_SetConfig+0xd8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d108      	bne.n	8005578 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a0d      	ldr	r2, [pc, #52]	@ (80055d4 <TIM_Base_SetConfig+0xd0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d103      	bne.n	80055ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
  }
}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800

080055e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f023 0201 	bic.w	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 0302 	bic.w	r3, r3, #2
 8005628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1c      	ldr	r2, [pc, #112]	@ (80056a8 <TIM_OC1_SetConfig+0xc8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d10c      	bne.n	8005656 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0308 	bic.w	r3, r3, #8
 8005642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <TIM_OC1_SetConfig+0xc8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d111      	bne.n	8005682 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40012c00 	.word	0x40012c00

080056ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 0210 	bic.w	r2, r3, #16
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f023 0320 	bic.w	r3, r3, #32
 80056f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a1d      	ldr	r2, [pc, #116]	@ (800577c <TIM_OC2_SetConfig+0xd0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10d      	bne.n	8005728 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a14      	ldr	r2, [pc, #80]	@ (800577c <TIM_OC2_SetConfig+0xd0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d113      	bne.n	8005758 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800573e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00

08005780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0303 	bic.w	r3, r3, #3
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005850 <TIM_OC3_SetConfig+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10d      	bne.n	80057fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a14      	ldr	r2, [pc, #80]	@ (8005850 <TIM_OC3_SetConfig+0xd0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d113      	bne.n	800582a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00

08005854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800589e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	031b      	lsls	r3, r3, #12
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a0f      	ldr	r2, [pc, #60]	@ (80058ec <TIM_OC4_SetConfig+0x98>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d109      	bne.n	80058c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr
 80058ec:	40012c00 	.word	0x40012c00

080058f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2201      	movs	r2, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800594c:	2302      	movs	r3, #2
 800594e:	e046      	b.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599c:	d009      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a12      	ldr	r2, [pc, #72]	@ (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a10      	ldr	r2, [pc, #64]	@ (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10c      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800

080059f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr

08005a06 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <_ZdlPvj>:
 8005a18:	f000 b811 	b.w	8005a3e <_ZdlPv>

08005a1c <_Znwj>:
 8005a1c:	2801      	cmp	r0, #1
 8005a1e:	bf38      	it	cc
 8005a20:	2001      	movcc	r0, #1
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f82e 	bl	8005a88 <malloc>
 8005a2c:	b100      	cbz	r0, 8005a30 <_Znwj+0x14>
 8005a2e:	bd10      	pop	{r4, pc}
 8005a30:	f000 f808 	bl	8005a44 <_ZSt15get_new_handlerv>
 8005a34:	b908      	cbnz	r0, 8005a3a <_Znwj+0x1e>
 8005a36:	f000 f80d 	bl	8005a54 <abort>
 8005a3a:	4780      	blx	r0
 8005a3c:	e7f3      	b.n	8005a26 <_Znwj+0xa>

08005a3e <_ZdlPv>:
 8005a3e:	f000 b82b 	b.w	8005a98 <free>
	...

08005a44 <_ZSt15get_new_handlerv>:
 8005a44:	4b02      	ldr	r3, [pc, #8]	@ (8005a50 <_ZSt15get_new_handlerv+0xc>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	f3bf 8f5b 	dmb	ish
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000220 	.word	0x20000220

08005a54 <abort>:
 8005a54:	2006      	movs	r0, #6
 8005a56:	b508      	push	{r3, lr}
 8005a58:	f000 fa36 	bl	8005ec8 <raise>
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f7fd fc6c 	bl	800333a <_exit>
	...

08005a64 <exit>:
 8005a64:	b508      	push	{r3, lr}
 8005a66:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <exit+0x1c>)
 8005a68:	4604      	mov	r4, r0
 8005a6a:	b113      	cbz	r3, 8005a72 <exit+0xe>
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f3af 8000 	nop.w
 8005a72:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <exit+0x20>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <exit+0x16>
 8005a78:	4798      	blx	r3
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7fd fc5d 	bl	800333a <_exit>
 8005a80:	00000000 	.word	0x00000000
 8005a84:	20000364 	.word	0x20000364

08005a88 <malloc>:
 8005a88:	4b02      	ldr	r3, [pc, #8]	@ (8005a94 <malloc+0xc>)
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	f000 b82d 	b.w	8005aec <_malloc_r>
 8005a92:	bf00      	nop
 8005a94:	2000004c 	.word	0x2000004c

08005a98 <free>:
 8005a98:	4b02      	ldr	r3, [pc, #8]	@ (8005aa4 <free+0xc>)
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f000 ba6d 	b.w	8005f7c <_free_r>
 8005aa2:	bf00      	nop
 8005aa4:	2000004c 	.word	0x2000004c

08005aa8 <sbrk_aligned>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8005ae8 <sbrk_aligned+0x40>)
 8005aac:	460c      	mov	r4, r1
 8005aae:	6831      	ldr	r1, [r6, #0]
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	b911      	cbnz	r1, 8005aba <sbrk_aligned+0x12>
 8005ab4:	f000 fa24 	bl	8005f00 <_sbrk_r>
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 fa1f 	bl	8005f00 <_sbrk_r>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d103      	bne.n	8005ace <sbrk_aligned+0x26>
 8005ac6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005aca:	4620      	mov	r0, r4
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
 8005ace:	1cc4      	adds	r4, r0, #3
 8005ad0:	f024 0403 	bic.w	r4, r4, #3
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d0f8      	beq.n	8005aca <sbrk_aligned+0x22>
 8005ad8:	1a21      	subs	r1, r4, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fa10 	bl	8005f00 <_sbrk_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d1f2      	bne.n	8005aca <sbrk_aligned+0x22>
 8005ae4:	e7ef      	b.n	8005ac6 <sbrk_aligned+0x1e>
 8005ae6:	bf00      	nop
 8005ae8:	20000224 	.word	0x20000224

08005aec <_malloc_r>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	1ccd      	adds	r5, r1, #3
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	4606      	mov	r6, r0
 8005b02:	db01      	blt.n	8005b08 <_malloc_r+0x1c>
 8005b04:	42a9      	cmp	r1, r5
 8005b06:	d904      	bls.n	8005b12 <_malloc_r+0x26>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005be8 <_malloc_r+0xfc>
 8005b16:	f000 f869 	bl	8005bec <__malloc_lock>
 8005b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1e:	461c      	mov	r4, r3
 8005b20:	bb44      	cbnz	r4, 8005b74 <_malloc_r+0x88>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff ffbf 	bl	8005aa8 <sbrk_aligned>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	d158      	bne.n	8005be2 <_malloc_r+0xf6>
 8005b30:	f8d8 4000 	ldr.w	r4, [r8]
 8005b34:	4627      	mov	r7, r4
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	d143      	bne.n	8005bc2 <_malloc_r+0xd6>
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d04b      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	4639      	mov	r1, r7
 8005b42:	4630      	mov	r0, r6
 8005b44:	eb04 0903 	add.w	r9, r4, r3
 8005b48:	f000 f9da 	bl	8005f00 <_sbrk_r>
 8005b4c:	4581      	cmp	r9, r0
 8005b4e:	d142      	bne.n	8005bd6 <_malloc_r+0xea>
 8005b50:	6821      	ldr	r1, [r4, #0]
 8005b52:	4630      	mov	r0, r6
 8005b54:	1a6d      	subs	r5, r5, r1
 8005b56:	4629      	mov	r1, r5
 8005b58:	f7ff ffa6 	bl	8005aa8 <sbrk_aligned>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d03a      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	442b      	add	r3, r5
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	bb62      	cbnz	r2, 8005bc8 <_malloc_r+0xdc>
 8005b6e:	f8c8 7000 	str.w	r7, [r8]
 8005b72:	e00f      	b.n	8005b94 <_malloc_r+0xa8>
 8005b74:	6822      	ldr	r2, [r4, #0]
 8005b76:	1b52      	subs	r2, r2, r5
 8005b78:	d420      	bmi.n	8005bbc <_malloc_r+0xd0>
 8005b7a:	2a0b      	cmp	r2, #11
 8005b7c:	d917      	bls.n	8005bae <_malloc_r+0xc2>
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	6025      	str	r5, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	6059      	strne	r1, [r3, #4]
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	bf08      	it	eq
 8005b8c:	f8c8 1000 	streq.w	r1, [r8]
 8005b90:	5162      	str	r2, [r4, r5]
 8005b92:	604b      	str	r3, [r1, #4]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f82f 	bl	8005bf8 <__malloc_unlock>
 8005b9a:	f104 000b 	add.w	r0, r4, #11
 8005b9e:	1d23      	adds	r3, r4, #4
 8005ba0:	f020 0007 	bic.w	r0, r0, #7
 8005ba4:	1ac2      	subs	r2, r0, r3
 8005ba6:	bf1c      	itt	ne
 8005ba8:	1a1b      	subne	r3, r3, r0
 8005baa:	50a3      	strne	r3, [r4, r2]
 8005bac:	e7af      	b.n	8005b0e <_malloc_r+0x22>
 8005bae:	6862      	ldr	r2, [r4, #4]
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f8c8 2000 	streq.w	r2, [r8]
 8005bb8:	605a      	strne	r2, [r3, #4]
 8005bba:	e7eb      	b.n	8005b94 <_malloc_r+0xa8>
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	6864      	ldr	r4, [r4, #4]
 8005bc0:	e7ae      	b.n	8005b20 <_malloc_r+0x34>
 8005bc2:	463c      	mov	r4, r7
 8005bc4:	687f      	ldr	r7, [r7, #4]
 8005bc6:	e7b6      	b.n	8005b36 <_malloc_r+0x4a>
 8005bc8:	461a      	mov	r2, r3
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d1fb      	bne.n	8005bc8 <_malloc_r+0xdc>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6053      	str	r3, [r2, #4]
 8005bd4:	e7de      	b.n	8005b94 <_malloc_r+0xa8>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	4630      	mov	r0, r6
 8005bda:	6033      	str	r3, [r6, #0]
 8005bdc:	f000 f80c 	bl	8005bf8 <__malloc_unlock>
 8005be0:	e794      	b.n	8005b0c <_malloc_r+0x20>
 8005be2:	6005      	str	r5, [r0, #0]
 8005be4:	e7d6      	b.n	8005b94 <_malloc_r+0xa8>
 8005be6:	bf00      	nop
 8005be8:	20000228 	.word	0x20000228

08005bec <__malloc_lock>:
 8005bec:	4801      	ldr	r0, [pc, #4]	@ (8005bf4 <__malloc_lock+0x8>)
 8005bee:	f000 b9c2 	b.w	8005f76 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	20000368 	.word	0x20000368

08005bf8 <__malloc_unlock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	@ (8005c00 <__malloc_unlock+0x8>)
 8005bfa:	f000 b9bd 	b.w	8005f78 <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20000368 	.word	0x20000368

08005c04 <std>:
 8005c04:	2300      	movs	r3, #0
 8005c06:	b510      	push	{r4, lr}
 8005c08:	4604      	mov	r4, r0
 8005c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c12:	6083      	str	r3, [r0, #8]
 8005c14:	8181      	strh	r1, [r0, #12]
 8005c16:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c18:	81c2      	strh	r2, [r0, #14]
 8005c1a:	6183      	str	r3, [r0, #24]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	2208      	movs	r2, #8
 8005c20:	305c      	adds	r0, #92	@ 0x5c
 8005c22:	f000 f921 	bl	8005e68 <memset>
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <std+0x58>)
 8005c28:	6224      	str	r4, [r4, #32]
 8005c2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <std+0x5c>)
 8005c2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c30:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <std+0x60>)
 8005c32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <std+0x64>)
 8005c36:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c38:	4b0c      	ldr	r3, [pc, #48]	@ (8005c6c <std+0x68>)
 8005c3a:	429c      	cmp	r4, r3
 8005c3c:	d006      	beq.n	8005c4c <std+0x48>
 8005c3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c42:	4294      	cmp	r4, r2
 8005c44:	d002      	beq.n	8005c4c <std+0x48>
 8005c46:	33d0      	adds	r3, #208	@ 0xd0
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	d105      	bne.n	8005c58 <std+0x54>
 8005c4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c54:	f000 b98e 	b.w	8005f74 <__retarget_lock_init_recursive>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	bf00      	nop
 8005c5c:	080066fd 	.word	0x080066fd
 8005c60:	0800671f 	.word	0x0800671f
 8005c64:	08006757 	.word	0x08006757
 8005c68:	0800677b 	.word	0x0800677b
 8005c6c:	2000022c 	.word	0x2000022c

08005c70 <stdio_exit_handler>:
 8005c70:	4a02      	ldr	r2, [pc, #8]	@ (8005c7c <stdio_exit_handler+0xc>)
 8005c72:	4903      	ldr	r1, [pc, #12]	@ (8005c80 <stdio_exit_handler+0x10>)
 8005c74:	4803      	ldr	r0, [pc, #12]	@ (8005c84 <stdio_exit_handler+0x14>)
 8005c76:	f000 b869 	b.w	8005d4c <_fwalk_sglue>
 8005c7a:	bf00      	nop
 8005c7c:	20000040 	.word	0x20000040
 8005c80:	080066ad 	.word	0x080066ad
 8005c84:	20000050 	.word	0x20000050

08005c88 <cleanup_stdio>:
 8005c88:	6841      	ldr	r1, [r0, #4]
 8005c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <cleanup_stdio+0x34>)
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4299      	cmp	r1, r3
 8005c90:	4604      	mov	r4, r0
 8005c92:	d001      	beq.n	8005c98 <cleanup_stdio+0x10>
 8005c94:	f000 fd0a 	bl	80066ac <_fflush_r>
 8005c98:	68a1      	ldr	r1, [r4, #8]
 8005c9a:	4b09      	ldr	r3, [pc, #36]	@ (8005cc0 <cleanup_stdio+0x38>)
 8005c9c:	4299      	cmp	r1, r3
 8005c9e:	d002      	beq.n	8005ca6 <cleanup_stdio+0x1e>
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fd03 	bl	80066ac <_fflush_r>
 8005ca6:	68e1      	ldr	r1, [r4, #12]
 8005ca8:	4b06      	ldr	r3, [pc, #24]	@ (8005cc4 <cleanup_stdio+0x3c>)
 8005caa:	4299      	cmp	r1, r3
 8005cac:	d004      	beq.n	8005cb8 <cleanup_stdio+0x30>
 8005cae:	4620      	mov	r0, r4
 8005cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb4:	f000 bcfa 	b.w	80066ac <_fflush_r>
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	2000022c 	.word	0x2000022c
 8005cc0:	20000294 	.word	0x20000294
 8005cc4:	200002fc 	.word	0x200002fc

08005cc8 <global_stdio_init.part.0>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf8 <global_stdio_init.part.0+0x30>)
 8005ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8005cfc <global_stdio_init.part.0+0x34>)
 8005cce:	4a0c      	ldr	r2, [pc, #48]	@ (8005d00 <global_stdio_init.part.0+0x38>)
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f7ff ff94 	bl	8005c04 <std>
 8005cdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	2109      	movs	r1, #9
 8005ce4:	f7ff ff8e 	bl	8005c04 <std>
 8005ce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cec:	2202      	movs	r2, #2
 8005cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf2:	2112      	movs	r1, #18
 8005cf4:	f7ff bf86 	b.w	8005c04 <std>
 8005cf8:	20000364 	.word	0x20000364
 8005cfc:	2000022c 	.word	0x2000022c
 8005d00:	08005c71 	.word	0x08005c71

08005d04 <__sfp_lock_acquire>:
 8005d04:	4801      	ldr	r0, [pc, #4]	@ (8005d0c <__sfp_lock_acquire+0x8>)
 8005d06:	f000 b936 	b.w	8005f76 <__retarget_lock_acquire_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	20000369 	.word	0x20000369

08005d10 <__sfp_lock_release>:
 8005d10:	4801      	ldr	r0, [pc, #4]	@ (8005d18 <__sfp_lock_release+0x8>)
 8005d12:	f000 b931 	b.w	8005f78 <__retarget_lock_release_recursive>
 8005d16:	bf00      	nop
 8005d18:	20000369 	.word	0x20000369

08005d1c <__sinit>:
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4604      	mov	r4, r0
 8005d20:	f7ff fff0 	bl	8005d04 <__sfp_lock_acquire>
 8005d24:	6a23      	ldr	r3, [r4, #32]
 8005d26:	b11b      	cbz	r3, 8005d30 <__sinit+0x14>
 8005d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2c:	f7ff bff0 	b.w	8005d10 <__sfp_lock_release>
 8005d30:	4b04      	ldr	r3, [pc, #16]	@ (8005d44 <__sinit+0x28>)
 8005d32:	6223      	str	r3, [r4, #32]
 8005d34:	4b04      	ldr	r3, [pc, #16]	@ (8005d48 <__sinit+0x2c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f5      	bne.n	8005d28 <__sinit+0xc>
 8005d3c:	f7ff ffc4 	bl	8005cc8 <global_stdio_init.part.0>
 8005d40:	e7f2      	b.n	8005d28 <__sinit+0xc>
 8005d42:	bf00      	nop
 8005d44:	08005c89 	.word	0x08005c89
 8005d48:	20000364 	.word	0x20000364

08005d4c <_fwalk_sglue>:
 8005d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d50:	4607      	mov	r7, r0
 8005d52:	4688      	mov	r8, r1
 8005d54:	4614      	mov	r4, r2
 8005d56:	2600      	movs	r6, #0
 8005d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005d60:	d505      	bpl.n	8005d6e <_fwalk_sglue+0x22>
 8005d62:	6824      	ldr	r4, [r4, #0]
 8005d64:	2c00      	cmp	r4, #0
 8005d66:	d1f7      	bne.n	8005d58 <_fwalk_sglue+0xc>
 8005d68:	4630      	mov	r0, r6
 8005d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d907      	bls.n	8005d84 <_fwalk_sglue+0x38>
 8005d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	d003      	beq.n	8005d84 <_fwalk_sglue+0x38>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4638      	mov	r0, r7
 8005d80:	47c0      	blx	r8
 8005d82:	4306      	orrs	r6, r0
 8005d84:	3568      	adds	r5, #104	@ 0x68
 8005d86:	e7e9      	b.n	8005d5c <_fwalk_sglue+0x10>

08005d88 <iprintf>:
 8005d88:	b40f      	push	{r0, r1, r2, r3}
 8005d8a:	b507      	push	{r0, r1, r2, lr}
 8005d8c:	4906      	ldr	r1, [pc, #24]	@ (8005da8 <iprintf+0x20>)
 8005d8e:	ab04      	add	r3, sp, #16
 8005d90:	6808      	ldr	r0, [r1, #0]
 8005d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d96:	6881      	ldr	r1, [r0, #8]
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	f000 f95f 	bl	800605c <_vfiprintf_r>
 8005d9e:	b003      	add	sp, #12
 8005da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da4:	b004      	add	sp, #16
 8005da6:	4770      	bx	lr
 8005da8:	2000004c 	.word	0x2000004c

08005dac <_puts_r>:
 8005dac:	6a03      	ldr	r3, [r0, #32]
 8005dae:	b570      	push	{r4, r5, r6, lr}
 8005db0:	4605      	mov	r5, r0
 8005db2:	460e      	mov	r6, r1
 8005db4:	6884      	ldr	r4, [r0, #8]
 8005db6:	b90b      	cbnz	r3, 8005dbc <_puts_r+0x10>
 8005db8:	f7ff ffb0 	bl	8005d1c <__sinit>
 8005dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dbe:	07db      	lsls	r3, r3, #31
 8005dc0:	d405      	bmi.n	8005dce <_puts_r+0x22>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	0598      	lsls	r0, r3, #22
 8005dc6:	d402      	bmi.n	8005dce <_puts_r+0x22>
 8005dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dca:	f000 f8d4 	bl	8005f76 <__retarget_lock_acquire_recursive>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	0719      	lsls	r1, r3, #28
 8005dd2:	d502      	bpl.n	8005dda <_puts_r+0x2e>
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d135      	bne.n	8005e46 <_puts_r+0x9a>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 fd0f 	bl	8006800 <__swsetup_r>
 8005de2:	b380      	cbz	r0, 8005e46 <_puts_r+0x9a>
 8005de4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dea:	07da      	lsls	r2, r3, #31
 8005dec:	d405      	bmi.n	8005dfa <_puts_r+0x4e>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	059b      	lsls	r3, r3, #22
 8005df2:	d402      	bmi.n	8005dfa <_puts_r+0x4e>
 8005df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005df6:	f000 f8bf 	bl	8005f78 <__retarget_lock_release_recursive>
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da04      	bge.n	8005e0c <_puts_r+0x60>
 8005e02:	69a2      	ldr	r2, [r4, #24]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	dc17      	bgt.n	8005e38 <_puts_r+0x8c>
 8005e08:	290a      	cmp	r1, #10
 8005e0a:	d015      	beq.n	8005e38 <_puts_r+0x8c>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	7019      	strb	r1, [r3, #0]
 8005e14:	68a3      	ldr	r3, [r4, #8]
 8005e16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60a3      	str	r3, [r4, #8]
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d1ed      	bne.n	8005dfe <_puts_r+0x52>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da11      	bge.n	8005e4a <_puts_r+0x9e>
 8005e26:	4622      	mov	r2, r4
 8005e28:	210a      	movs	r1, #10
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f000 fca9 	bl	8006782 <__swbuf_r>
 8005e30:	3001      	adds	r0, #1
 8005e32:	d0d7      	beq.n	8005de4 <_puts_r+0x38>
 8005e34:	250a      	movs	r5, #10
 8005e36:	e7d7      	b.n	8005de8 <_puts_r+0x3c>
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 fca1 	bl	8006782 <__swbuf_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d1e7      	bne.n	8005e14 <_puts_r+0x68>
 8005e44:	e7ce      	b.n	8005de4 <_puts_r+0x38>
 8005e46:	3e01      	subs	r6, #1
 8005e48:	e7e4      	b.n	8005e14 <_puts_r+0x68>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	6022      	str	r2, [r4, #0]
 8005e50:	220a      	movs	r2, #10
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e7ee      	b.n	8005e34 <_puts_r+0x88>
	...

08005e58 <puts>:
 8005e58:	4b02      	ldr	r3, [pc, #8]	@ (8005e64 <puts+0xc>)
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	f7ff bfa5 	b.w	8005dac <_puts_r>
 8005e62:	bf00      	nop
 8005e64:	2000004c 	.word	0x2000004c

08005e68 <memset>:
 8005e68:	4603      	mov	r3, r0
 8005e6a:	4402      	add	r2, r0
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d100      	bne.n	8005e72 <memset+0xa>
 8005e70:	4770      	bx	lr
 8005e72:	f803 1b01 	strb.w	r1, [r3], #1
 8005e76:	e7f9      	b.n	8005e6c <memset+0x4>

08005e78 <_raise_r>:
 8005e78:	291f      	cmp	r1, #31
 8005e7a:	b538      	push	{r3, r4, r5, lr}
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	d904      	bls.n	8005e8c <_raise_r+0x14>
 8005e82:	2316      	movs	r3, #22
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e8e:	b112      	cbz	r2, 8005e96 <_raise_r+0x1e>
 8005e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e94:	b94b      	cbnz	r3, 8005eaa <_raise_r+0x32>
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f830 	bl	8005efc <_getpid_r>
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea6:	f000 b817 	b.w	8005ed8 <_kill_r>
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d00a      	beq.n	8005ec4 <_raise_r+0x4c>
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	d103      	bne.n	8005eba <_raise_r+0x42>
 8005eb2:	2316      	movs	r3, #22
 8005eb4:	6003      	str	r3, [r0, #0]
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	e7e7      	b.n	8005e8a <_raise_r+0x12>
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005ec2:	4798      	blx	r3
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	e7e0      	b.n	8005e8a <_raise_r+0x12>

08005ec8 <raise>:
 8005ec8:	4b02      	ldr	r3, [pc, #8]	@ (8005ed4 <raise+0xc>)
 8005eca:	4601      	mov	r1, r0
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f7ff bfd3 	b.w	8005e78 <_raise_r>
 8005ed2:	bf00      	nop
 8005ed4:	2000004c 	.word	0x2000004c

08005ed8 <_kill_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	2300      	movs	r3, #0
 8005edc:	4d06      	ldr	r5, [pc, #24]	@ (8005ef8 <_kill_r+0x20>)
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f7fd fa18 	bl	800331a <_kill>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d102      	bne.n	8005ef4 <_kill_r+0x1c>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b103      	cbz	r3, 8005ef4 <_kill_r+0x1c>
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
 8005ef6:	bf00      	nop
 8005ef8:	2000036c 	.word	0x2000036c

08005efc <_getpid_r>:
 8005efc:	f7fd ba06 	b.w	800330c <_getpid>

08005f00 <_sbrk_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	2300      	movs	r3, #0
 8005f04:	4d05      	ldr	r5, [pc, #20]	@ (8005f1c <_sbrk_r+0x1c>)
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	602b      	str	r3, [r5, #0]
 8005f0c:	f7fd fa8a 	bl	8003424 <_sbrk>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_sbrk_r+0x1a>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_sbrk_r+0x1a>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	2000036c 	.word	0x2000036c

08005f20 <__errno>:
 8005f20:	4b01      	ldr	r3, [pc, #4]	@ (8005f28 <__errno+0x8>)
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	2000004c 	.word	0x2000004c

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	2600      	movs	r6, #0
 8005f30:	4d0c      	ldr	r5, [pc, #48]	@ (8005f64 <__libc_init_array+0x38>)
 8005f32:	4c0d      	ldr	r4, [pc, #52]	@ (8005f68 <__libc_init_array+0x3c>)
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	f000 fd8e 	bl	8006a5c <_init>
 8005f40:	2600      	movs	r6, #0
 8005f42:	4d0a      	ldr	r5, [pc, #40]	@ (8005f6c <__libc_init_array+0x40>)
 8005f44:	4c0a      	ldr	r4, [pc, #40]	@ (8005f70 <__libc_init_array+0x44>)
 8005f46:	1b64      	subs	r4, r4, r5
 8005f48:	10a4      	asrs	r4, r4, #2
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	08006d18 	.word	0x08006d18
 8005f68:	08006d18 	.word	0x08006d18
 8005f6c:	08006d18 	.word	0x08006d18
 8005f70:	08006d1c 	.word	0x08006d1c

08005f74 <__retarget_lock_init_recursive>:
 8005f74:	4770      	bx	lr

08005f76 <__retarget_lock_acquire_recursive>:
 8005f76:	4770      	bx	lr

08005f78 <__retarget_lock_release_recursive>:
 8005f78:	4770      	bx	lr
	...

08005f7c <_free_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4605      	mov	r5, r0
 8005f80:	2900      	cmp	r1, #0
 8005f82:	d040      	beq.n	8006006 <_free_r+0x8a>
 8005f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f88:	1f0c      	subs	r4, r1, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bfb8      	it	lt
 8005f8e:	18e4      	addlt	r4, r4, r3
 8005f90:	f7ff fe2c 	bl	8005bec <__malloc_lock>
 8005f94:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <_free_r+0x8c>)
 8005f96:	6813      	ldr	r3, [r2, #0]
 8005f98:	b933      	cbnz	r3, 8005fa8 <_free_r+0x2c>
 8005f9a:	6063      	str	r3, [r4, #4]
 8005f9c:	6014      	str	r4, [r2, #0]
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa4:	f7ff be28 	b.w	8005bf8 <__malloc_unlock>
 8005fa8:	42a3      	cmp	r3, r4
 8005faa:	d908      	bls.n	8005fbe <_free_r+0x42>
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	1821      	adds	r1, r4, r0
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	bf01      	itttt	eq
 8005fb4:	6819      	ldreq	r1, [r3, #0]
 8005fb6:	685b      	ldreq	r3, [r3, #4]
 8005fb8:	1809      	addeq	r1, r1, r0
 8005fba:	6021      	streq	r1, [r4, #0]
 8005fbc:	e7ed      	b.n	8005f9a <_free_r+0x1e>
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	b10b      	cbz	r3, 8005fc8 <_free_r+0x4c>
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	d9fa      	bls.n	8005fbe <_free_r+0x42>
 8005fc8:	6811      	ldr	r1, [r2, #0]
 8005fca:	1850      	adds	r0, r2, r1
 8005fcc:	42a0      	cmp	r0, r4
 8005fce:	d10b      	bne.n	8005fe8 <_free_r+0x6c>
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	1850      	adds	r0, r2, r1
 8005fd6:	4283      	cmp	r3, r0
 8005fd8:	6011      	str	r1, [r2, #0]
 8005fda:	d1e0      	bne.n	8005f9e <_free_r+0x22>
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4408      	add	r0, r1
 8005fe2:	6010      	str	r0, [r2, #0]
 8005fe4:	6053      	str	r3, [r2, #4]
 8005fe6:	e7da      	b.n	8005f9e <_free_r+0x22>
 8005fe8:	d902      	bls.n	8005ff0 <_free_r+0x74>
 8005fea:	230c      	movs	r3, #12
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	e7d6      	b.n	8005f9e <_free_r+0x22>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	1821      	adds	r1, r4, r0
 8005ff4:	428b      	cmp	r3, r1
 8005ff6:	bf01      	itttt	eq
 8005ff8:	6819      	ldreq	r1, [r3, #0]
 8005ffa:	685b      	ldreq	r3, [r3, #4]
 8005ffc:	1809      	addeq	r1, r1, r0
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	6063      	str	r3, [r4, #4]
 8006002:	6054      	str	r4, [r2, #4]
 8006004:	e7cb      	b.n	8005f9e <_free_r+0x22>
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20000228 	.word	0x20000228

0800600c <__sfputc_r>:
 800600c:	6893      	ldr	r3, [r2, #8]
 800600e:	b410      	push	{r4}
 8006010:	3b01      	subs	r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	6093      	str	r3, [r2, #8]
 8006016:	da07      	bge.n	8006028 <__sfputc_r+0x1c>
 8006018:	6994      	ldr	r4, [r2, #24]
 800601a:	42a3      	cmp	r3, r4
 800601c:	db01      	blt.n	8006022 <__sfputc_r+0x16>
 800601e:	290a      	cmp	r1, #10
 8006020:	d102      	bne.n	8006028 <__sfputc_r+0x1c>
 8006022:	bc10      	pop	{r4}
 8006024:	f000 bbad 	b.w	8006782 <__swbuf_r>
 8006028:	6813      	ldr	r3, [r2, #0]
 800602a:	1c58      	adds	r0, r3, #1
 800602c:	6010      	str	r0, [r2, #0]
 800602e:	7019      	strb	r1, [r3, #0]
 8006030:	4608      	mov	r0, r1
 8006032:	bc10      	pop	{r4}
 8006034:	4770      	bx	lr

08006036 <__sfputs_r>:
 8006036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006038:	4606      	mov	r6, r0
 800603a:	460f      	mov	r7, r1
 800603c:	4614      	mov	r4, r2
 800603e:	18d5      	adds	r5, r2, r3
 8006040:	42ac      	cmp	r4, r5
 8006042:	d101      	bne.n	8006048 <__sfputs_r+0x12>
 8006044:	2000      	movs	r0, #0
 8006046:	e007      	b.n	8006058 <__sfputs_r+0x22>
 8006048:	463a      	mov	r2, r7
 800604a:	4630      	mov	r0, r6
 800604c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006050:	f7ff ffdc 	bl	800600c <__sfputc_r>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d1f3      	bne.n	8006040 <__sfputs_r+0xa>
 8006058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800605c <_vfiprintf_r>:
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	460d      	mov	r5, r1
 8006062:	4614      	mov	r4, r2
 8006064:	4698      	mov	r8, r3
 8006066:	4606      	mov	r6, r0
 8006068:	b09d      	sub	sp, #116	@ 0x74
 800606a:	b118      	cbz	r0, 8006074 <_vfiprintf_r+0x18>
 800606c:	6a03      	ldr	r3, [r0, #32]
 800606e:	b90b      	cbnz	r3, 8006074 <_vfiprintf_r+0x18>
 8006070:	f7ff fe54 	bl	8005d1c <__sinit>
 8006074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006076:	07d9      	lsls	r1, r3, #31
 8006078:	d405      	bmi.n	8006086 <_vfiprintf_r+0x2a>
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	059a      	lsls	r2, r3, #22
 800607e:	d402      	bmi.n	8006086 <_vfiprintf_r+0x2a>
 8006080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006082:	f7ff ff78 	bl	8005f76 <__retarget_lock_acquire_recursive>
 8006086:	89ab      	ldrh	r3, [r5, #12]
 8006088:	071b      	lsls	r3, r3, #28
 800608a:	d501      	bpl.n	8006090 <_vfiprintf_r+0x34>
 800608c:	692b      	ldr	r3, [r5, #16]
 800608e:	b99b      	cbnz	r3, 80060b8 <_vfiprintf_r+0x5c>
 8006090:	4629      	mov	r1, r5
 8006092:	4630      	mov	r0, r6
 8006094:	f000 fbb4 	bl	8006800 <__swsetup_r>
 8006098:	b170      	cbz	r0, 80060b8 <_vfiprintf_r+0x5c>
 800609a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800609c:	07dc      	lsls	r4, r3, #31
 800609e:	d504      	bpl.n	80060aa <_vfiprintf_r+0x4e>
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060a4:	b01d      	add	sp, #116	@ 0x74
 80060a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	0598      	lsls	r0, r3, #22
 80060ae:	d4f7      	bmi.n	80060a0 <_vfiprintf_r+0x44>
 80060b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060b2:	f7ff ff61 	bl	8005f78 <__retarget_lock_release_recursive>
 80060b6:	e7f3      	b.n	80060a0 <_vfiprintf_r+0x44>
 80060b8:	2300      	movs	r3, #0
 80060ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80060bc:	2320      	movs	r3, #32
 80060be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060c2:	2330      	movs	r3, #48	@ 0x30
 80060c4:	f04f 0901 	mov.w	r9, #1
 80060c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006278 <_vfiprintf_r+0x21c>
 80060d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060d4:	4623      	mov	r3, r4
 80060d6:	469a      	mov	sl, r3
 80060d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060dc:	b10a      	cbz	r2, 80060e2 <_vfiprintf_r+0x86>
 80060de:	2a25      	cmp	r2, #37	@ 0x25
 80060e0:	d1f9      	bne.n	80060d6 <_vfiprintf_r+0x7a>
 80060e2:	ebba 0b04 	subs.w	fp, sl, r4
 80060e6:	d00b      	beq.n	8006100 <_vfiprintf_r+0xa4>
 80060e8:	465b      	mov	r3, fp
 80060ea:	4622      	mov	r2, r4
 80060ec:	4629      	mov	r1, r5
 80060ee:	4630      	mov	r0, r6
 80060f0:	f7ff ffa1 	bl	8006036 <__sfputs_r>
 80060f4:	3001      	adds	r0, #1
 80060f6:	f000 80a7 	beq.w	8006248 <_vfiprintf_r+0x1ec>
 80060fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060fc:	445a      	add	r2, fp
 80060fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006100:	f89a 3000 	ldrb.w	r3, [sl]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 809f 	beq.w	8006248 <_vfiprintf_r+0x1ec>
 800610a:	2300      	movs	r3, #0
 800610c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006114:	f10a 0a01 	add.w	sl, sl, #1
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	9307      	str	r3, [sp, #28]
 800611c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006120:	931a      	str	r3, [sp, #104]	@ 0x68
 8006122:	4654      	mov	r4, sl
 8006124:	2205      	movs	r2, #5
 8006126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612a:	4853      	ldr	r0, [pc, #332]	@ (8006278 <_vfiprintf_r+0x21c>)
 800612c:	f000 fc88 	bl	8006a40 <memchr>
 8006130:	9a04      	ldr	r2, [sp, #16]
 8006132:	b9d8      	cbnz	r0, 800616c <_vfiprintf_r+0x110>
 8006134:	06d1      	lsls	r1, r2, #27
 8006136:	bf44      	itt	mi
 8006138:	2320      	movmi	r3, #32
 800613a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800613e:	0713      	lsls	r3, r2, #28
 8006140:	bf44      	itt	mi
 8006142:	232b      	movmi	r3, #43	@ 0x2b
 8006144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006148:	f89a 3000 	ldrb.w	r3, [sl]
 800614c:	2b2a      	cmp	r3, #42	@ 0x2a
 800614e:	d015      	beq.n	800617c <_vfiprintf_r+0x120>
 8006150:	4654      	mov	r4, sl
 8006152:	2000      	movs	r0, #0
 8006154:	f04f 0c0a 	mov.w	ip, #10
 8006158:	9a07      	ldr	r2, [sp, #28]
 800615a:	4621      	mov	r1, r4
 800615c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006160:	3b30      	subs	r3, #48	@ 0x30
 8006162:	2b09      	cmp	r3, #9
 8006164:	d94b      	bls.n	80061fe <_vfiprintf_r+0x1a2>
 8006166:	b1b0      	cbz	r0, 8006196 <_vfiprintf_r+0x13a>
 8006168:	9207      	str	r2, [sp, #28]
 800616a:	e014      	b.n	8006196 <_vfiprintf_r+0x13a>
 800616c:	eba0 0308 	sub.w	r3, r0, r8
 8006170:	fa09 f303 	lsl.w	r3, r9, r3
 8006174:	4313      	orrs	r3, r2
 8006176:	46a2      	mov	sl, r4
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	e7d2      	b.n	8006122 <_vfiprintf_r+0xc6>
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	1d19      	adds	r1, r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	9103      	str	r1, [sp, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfbb      	ittet	lt
 8006188:	425b      	neglt	r3, r3
 800618a:	f042 0202 	orrlt.w	r2, r2, #2
 800618e:	9307      	strge	r3, [sp, #28]
 8006190:	9307      	strlt	r3, [sp, #28]
 8006192:	bfb8      	it	lt
 8006194:	9204      	strlt	r2, [sp, #16]
 8006196:	7823      	ldrb	r3, [r4, #0]
 8006198:	2b2e      	cmp	r3, #46	@ 0x2e
 800619a:	d10a      	bne.n	80061b2 <_vfiprintf_r+0x156>
 800619c:	7863      	ldrb	r3, [r4, #1]
 800619e:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a0:	d132      	bne.n	8006208 <_vfiprintf_r+0x1ac>
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	3402      	adds	r4, #2
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061b0:	9305      	str	r3, [sp, #20]
 80061b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800627c <_vfiprintf_r+0x220>
 80061b6:	2203      	movs	r2, #3
 80061b8:	4650      	mov	r0, sl
 80061ba:	7821      	ldrb	r1, [r4, #0]
 80061bc:	f000 fc40 	bl	8006a40 <memchr>
 80061c0:	b138      	cbz	r0, 80061d2 <_vfiprintf_r+0x176>
 80061c2:	2240      	movs	r2, #64	@ 0x40
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	eba0 000a 	sub.w	r0, r0, sl
 80061ca:	4082      	lsls	r2, r0
 80061cc:	4313      	orrs	r3, r2
 80061ce:	3401      	adds	r4, #1
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d6:	2206      	movs	r2, #6
 80061d8:	4829      	ldr	r0, [pc, #164]	@ (8006280 <_vfiprintf_r+0x224>)
 80061da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061de:	f000 fc2f 	bl	8006a40 <memchr>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d03f      	beq.n	8006266 <_vfiprintf_r+0x20a>
 80061e6:	4b27      	ldr	r3, [pc, #156]	@ (8006284 <_vfiprintf_r+0x228>)
 80061e8:	bb1b      	cbnz	r3, 8006232 <_vfiprintf_r+0x1d6>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	3307      	adds	r3, #7
 80061ee:	f023 0307 	bic.w	r3, r3, #7
 80061f2:	3308      	adds	r3, #8
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f8:	443b      	add	r3, r7
 80061fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80061fc:	e76a      	b.n	80060d4 <_vfiprintf_r+0x78>
 80061fe:	460c      	mov	r4, r1
 8006200:	2001      	movs	r0, #1
 8006202:	fb0c 3202 	mla	r2, ip, r2, r3
 8006206:	e7a8      	b.n	800615a <_vfiprintf_r+0xfe>
 8006208:	2300      	movs	r3, #0
 800620a:	f04f 0c0a 	mov.w	ip, #10
 800620e:	4619      	mov	r1, r3
 8006210:	3401      	adds	r4, #1
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	4620      	mov	r0, r4
 8006216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621a:	3a30      	subs	r2, #48	@ 0x30
 800621c:	2a09      	cmp	r2, #9
 800621e:	d903      	bls.n	8006228 <_vfiprintf_r+0x1cc>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0c6      	beq.n	80061b2 <_vfiprintf_r+0x156>
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	e7c4      	b.n	80061b2 <_vfiprintf_r+0x156>
 8006228:	4604      	mov	r4, r0
 800622a:	2301      	movs	r3, #1
 800622c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006230:	e7f0      	b.n	8006214 <_vfiprintf_r+0x1b8>
 8006232:	ab03      	add	r3, sp, #12
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	462a      	mov	r2, r5
 8006238:	4630      	mov	r0, r6
 800623a:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <_vfiprintf_r+0x22c>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	f3af 8000 	nop.w
 8006242:	4607      	mov	r7, r0
 8006244:	1c78      	adds	r0, r7, #1
 8006246:	d1d6      	bne.n	80061f6 <_vfiprintf_r+0x19a>
 8006248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800624a:	07d9      	lsls	r1, r3, #31
 800624c:	d405      	bmi.n	800625a <_vfiprintf_r+0x1fe>
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	059a      	lsls	r2, r3, #22
 8006252:	d402      	bmi.n	800625a <_vfiprintf_r+0x1fe>
 8006254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006256:	f7ff fe8f 	bl	8005f78 <__retarget_lock_release_recursive>
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	065b      	lsls	r3, r3, #25
 800625e:	f53f af1f 	bmi.w	80060a0 <_vfiprintf_r+0x44>
 8006262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006264:	e71e      	b.n	80060a4 <_vfiprintf_r+0x48>
 8006266:	ab03      	add	r3, sp, #12
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	462a      	mov	r2, r5
 800626c:	4630      	mov	r0, r6
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <_vfiprintf_r+0x22c>)
 8006270:	a904      	add	r1, sp, #16
 8006272:	f000 f87d 	bl	8006370 <_printf_i>
 8006276:	e7e4      	b.n	8006242 <_vfiprintf_r+0x1e6>
 8006278:	08006ce2 	.word	0x08006ce2
 800627c:	08006ce8 	.word	0x08006ce8
 8006280:	08006cec 	.word	0x08006cec
 8006284:	00000000 	.word	0x00000000
 8006288:	08006037 	.word	0x08006037

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4698      	mov	r8, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	4607      	mov	r7, r0
 800629a:	4293      	cmp	r3, r2
 800629c:	bfb8      	it	lt
 800629e:	4613      	movlt	r3, r2
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062a6:	460c      	mov	r4, r1
 80062a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc2b      	bgt.n	800632c <_printf_common+0xa0>
 80062d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	3b00      	subs	r3, #0
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d430      	bmi.n	8006346 <_printf_common+0xba>
 80062e4:	4641      	mov	r1, r8
 80062e6:	4638      	mov	r0, r7
 80062e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062ec:	47c8      	blx	r9
 80062ee:	3001      	adds	r0, #1
 80062f0:	d023      	beq.n	800633a <_printf_common+0xae>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf14      	ite	ne
 80062fe:	2500      	movne	r5, #0
 8006300:	6833      	ldreq	r3, [r6, #0]
 8006302:	f04f 0600 	mov.w	r6, #0
 8006306:	bf08      	it	eq
 8006308:	68e5      	ldreq	r5, [r4, #12]
 800630a:	f104 041a 	add.w	r4, r4, #26
 800630e:	bf08      	it	eq
 8006310:	1aed      	subeq	r5, r5, r3
 8006312:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006316:	bf08      	it	eq
 8006318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800631c:	4293      	cmp	r3, r2
 800631e:	bfc4      	itt	gt
 8006320:	1a9b      	subgt	r3, r3, r2
 8006322:	18ed      	addgt	r5, r5, r3
 8006324:	42b5      	cmp	r5, r6
 8006326:	d11a      	bne.n	800635e <_printf_common+0xd2>
 8006328:	2000      	movs	r0, #0
 800632a:	e008      	b.n	800633e <_printf_common+0xb2>
 800632c:	2301      	movs	r3, #1
 800632e:	4652      	mov	r2, sl
 8006330:	4641      	mov	r1, r8
 8006332:	4638      	mov	r0, r7
 8006334:	47c8      	blx	r9
 8006336:	3001      	adds	r0, #1
 8006338:	d103      	bne.n	8006342 <_printf_common+0xb6>
 800633a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	3501      	adds	r5, #1
 8006344:	e7c1      	b.n	80062ca <_printf_common+0x3e>
 8006346:	2030      	movs	r0, #48	@ 0x30
 8006348:	18e1      	adds	r1, r4, r3
 800634a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006354:	4422      	add	r2, r4
 8006356:	3302      	adds	r3, #2
 8006358:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800635c:	e7c2      	b.n	80062e4 <_printf_common+0x58>
 800635e:	2301      	movs	r3, #1
 8006360:	4622      	mov	r2, r4
 8006362:	4641      	mov	r1, r8
 8006364:	4638      	mov	r0, r7
 8006366:	47c8      	blx	r9
 8006368:	3001      	adds	r0, #1
 800636a:	d0e6      	beq.n	800633a <_printf_common+0xae>
 800636c:	3601      	adds	r6, #1
 800636e:	e7d9      	b.n	8006324 <_printf_common+0x98>

08006370 <_printf_i>:
 8006370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	7e0f      	ldrb	r7, [r1, #24]
 8006376:	4691      	mov	r9, r2
 8006378:	2f78      	cmp	r7, #120	@ 0x78
 800637a:	4680      	mov	r8, r0
 800637c:	460c      	mov	r4, r1
 800637e:	469a      	mov	sl, r3
 8006380:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006386:	d807      	bhi.n	8006398 <_printf_i+0x28>
 8006388:	2f62      	cmp	r7, #98	@ 0x62
 800638a:	d80a      	bhi.n	80063a2 <_printf_i+0x32>
 800638c:	2f00      	cmp	r7, #0
 800638e:	f000 80d1 	beq.w	8006534 <_printf_i+0x1c4>
 8006392:	2f58      	cmp	r7, #88	@ 0x58
 8006394:	f000 80b8 	beq.w	8006508 <_printf_i+0x198>
 8006398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800639c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063a0:	e03a      	b.n	8006418 <_printf_i+0xa8>
 80063a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063a6:	2b15      	cmp	r3, #21
 80063a8:	d8f6      	bhi.n	8006398 <_printf_i+0x28>
 80063aa:	a101      	add	r1, pc, #4	@ (adr r1, 80063b0 <_printf_i+0x40>)
 80063ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063b0:	08006409 	.word	0x08006409
 80063b4:	0800641d 	.word	0x0800641d
 80063b8:	08006399 	.word	0x08006399
 80063bc:	08006399 	.word	0x08006399
 80063c0:	08006399 	.word	0x08006399
 80063c4:	08006399 	.word	0x08006399
 80063c8:	0800641d 	.word	0x0800641d
 80063cc:	08006399 	.word	0x08006399
 80063d0:	08006399 	.word	0x08006399
 80063d4:	08006399 	.word	0x08006399
 80063d8:	08006399 	.word	0x08006399
 80063dc:	0800651b 	.word	0x0800651b
 80063e0:	08006447 	.word	0x08006447
 80063e4:	080064d5 	.word	0x080064d5
 80063e8:	08006399 	.word	0x08006399
 80063ec:	08006399 	.word	0x08006399
 80063f0:	0800653d 	.word	0x0800653d
 80063f4:	08006399 	.word	0x08006399
 80063f8:	08006447 	.word	0x08006447
 80063fc:	08006399 	.word	0x08006399
 8006400:	08006399 	.word	0x08006399
 8006404:	080064dd 	.word	0x080064dd
 8006408:	6833      	ldr	r3, [r6, #0]
 800640a:	1d1a      	adds	r2, r3, #4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6032      	str	r2, [r6, #0]
 8006410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006418:	2301      	movs	r3, #1
 800641a:	e09c      	b.n	8006556 <_printf_i+0x1e6>
 800641c:	6833      	ldr	r3, [r6, #0]
 800641e:	6820      	ldr	r0, [r4, #0]
 8006420:	1d19      	adds	r1, r3, #4
 8006422:	6031      	str	r1, [r6, #0]
 8006424:	0606      	lsls	r6, r0, #24
 8006426:	d501      	bpl.n	800642c <_printf_i+0xbc>
 8006428:	681d      	ldr	r5, [r3, #0]
 800642a:	e003      	b.n	8006434 <_printf_i+0xc4>
 800642c:	0645      	lsls	r5, r0, #25
 800642e:	d5fb      	bpl.n	8006428 <_printf_i+0xb8>
 8006430:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006434:	2d00      	cmp	r5, #0
 8006436:	da03      	bge.n	8006440 <_printf_i+0xd0>
 8006438:	232d      	movs	r3, #45	@ 0x2d
 800643a:	426d      	negs	r5, r5
 800643c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006440:	230a      	movs	r3, #10
 8006442:	4858      	ldr	r0, [pc, #352]	@ (80065a4 <_printf_i+0x234>)
 8006444:	e011      	b.n	800646a <_printf_i+0xfa>
 8006446:	6821      	ldr	r1, [r4, #0]
 8006448:	6833      	ldr	r3, [r6, #0]
 800644a:	0608      	lsls	r0, r1, #24
 800644c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006450:	d402      	bmi.n	8006458 <_printf_i+0xe8>
 8006452:	0649      	lsls	r1, r1, #25
 8006454:	bf48      	it	mi
 8006456:	b2ad      	uxthmi	r5, r5
 8006458:	2f6f      	cmp	r7, #111	@ 0x6f
 800645a:	6033      	str	r3, [r6, #0]
 800645c:	bf14      	ite	ne
 800645e:	230a      	movne	r3, #10
 8006460:	2308      	moveq	r3, #8
 8006462:	4850      	ldr	r0, [pc, #320]	@ (80065a4 <_printf_i+0x234>)
 8006464:	2100      	movs	r1, #0
 8006466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800646a:	6866      	ldr	r6, [r4, #4]
 800646c:	2e00      	cmp	r6, #0
 800646e:	60a6      	str	r6, [r4, #8]
 8006470:	db05      	blt.n	800647e <_printf_i+0x10e>
 8006472:	6821      	ldr	r1, [r4, #0]
 8006474:	432e      	orrs	r6, r5
 8006476:	f021 0104 	bic.w	r1, r1, #4
 800647a:	6021      	str	r1, [r4, #0]
 800647c:	d04b      	beq.n	8006516 <_printf_i+0x1a6>
 800647e:	4616      	mov	r6, r2
 8006480:	fbb5 f1f3 	udiv	r1, r5, r3
 8006484:	fb03 5711 	mls	r7, r3, r1, r5
 8006488:	5dc7      	ldrb	r7, [r0, r7]
 800648a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800648e:	462f      	mov	r7, r5
 8006490:	42bb      	cmp	r3, r7
 8006492:	460d      	mov	r5, r1
 8006494:	d9f4      	bls.n	8006480 <_printf_i+0x110>
 8006496:	2b08      	cmp	r3, #8
 8006498:	d10b      	bne.n	80064b2 <_printf_i+0x142>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	07df      	lsls	r7, r3, #31
 800649e:	d508      	bpl.n	80064b2 <_printf_i+0x142>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	6861      	ldr	r1, [r4, #4]
 80064a4:	4299      	cmp	r1, r3
 80064a6:	bfde      	ittt	le
 80064a8:	2330      	movle	r3, #48	@ 0x30
 80064aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80064b2:	1b92      	subs	r2, r2, r6
 80064b4:	6122      	str	r2, [r4, #16]
 80064b6:	464b      	mov	r3, r9
 80064b8:	4621      	mov	r1, r4
 80064ba:	4640      	mov	r0, r8
 80064bc:	f8cd a000 	str.w	sl, [sp]
 80064c0:	aa03      	add	r2, sp, #12
 80064c2:	f7ff fee3 	bl	800628c <_printf_common>
 80064c6:	3001      	adds	r0, #1
 80064c8:	d14a      	bne.n	8006560 <_printf_i+0x1f0>
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ce:	b004      	add	sp, #16
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	f043 0320 	orr.w	r3, r3, #32
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	2778      	movs	r7, #120	@ 0x78
 80064de:	4832      	ldr	r0, [pc, #200]	@ (80065a8 <_printf_i+0x238>)
 80064e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	6831      	ldr	r1, [r6, #0]
 80064e8:	061f      	lsls	r7, r3, #24
 80064ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80064ee:	d402      	bmi.n	80064f6 <_printf_i+0x186>
 80064f0:	065f      	lsls	r7, r3, #25
 80064f2:	bf48      	it	mi
 80064f4:	b2ad      	uxthmi	r5, r5
 80064f6:	6031      	str	r1, [r6, #0]
 80064f8:	07d9      	lsls	r1, r3, #31
 80064fa:	bf44      	itt	mi
 80064fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006500:	6023      	strmi	r3, [r4, #0]
 8006502:	b11d      	cbz	r5, 800650c <_printf_i+0x19c>
 8006504:	2310      	movs	r3, #16
 8006506:	e7ad      	b.n	8006464 <_printf_i+0xf4>
 8006508:	4826      	ldr	r0, [pc, #152]	@ (80065a4 <_printf_i+0x234>)
 800650a:	e7e9      	b.n	80064e0 <_printf_i+0x170>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	f023 0320 	bic.w	r3, r3, #32
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	e7f6      	b.n	8006504 <_printf_i+0x194>
 8006516:	4616      	mov	r6, r2
 8006518:	e7bd      	b.n	8006496 <_printf_i+0x126>
 800651a:	6833      	ldr	r3, [r6, #0]
 800651c:	6825      	ldr	r5, [r4, #0]
 800651e:	1d18      	adds	r0, r3, #4
 8006520:	6961      	ldr	r1, [r4, #20]
 8006522:	6030      	str	r0, [r6, #0]
 8006524:	062e      	lsls	r6, r5, #24
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	d501      	bpl.n	800652e <_printf_i+0x1be>
 800652a:	6019      	str	r1, [r3, #0]
 800652c:	e002      	b.n	8006534 <_printf_i+0x1c4>
 800652e:	0668      	lsls	r0, r5, #25
 8006530:	d5fb      	bpl.n	800652a <_printf_i+0x1ba>
 8006532:	8019      	strh	r1, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	4616      	mov	r6, r2
 8006538:	6123      	str	r3, [r4, #16]
 800653a:	e7bc      	b.n	80064b6 <_printf_i+0x146>
 800653c:	6833      	ldr	r3, [r6, #0]
 800653e:	2100      	movs	r1, #0
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	6032      	str	r2, [r6, #0]
 8006544:	681e      	ldr	r6, [r3, #0]
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	4630      	mov	r0, r6
 800654a:	f000 fa79 	bl	8006a40 <memchr>
 800654e:	b108      	cbz	r0, 8006554 <_printf_i+0x1e4>
 8006550:	1b80      	subs	r0, r0, r6
 8006552:	6060      	str	r0, [r4, #4]
 8006554:	6863      	ldr	r3, [r4, #4]
 8006556:	6123      	str	r3, [r4, #16]
 8006558:	2300      	movs	r3, #0
 800655a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800655e:	e7aa      	b.n	80064b6 <_printf_i+0x146>
 8006560:	4632      	mov	r2, r6
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	47d0      	blx	sl
 800656a:	3001      	adds	r0, #1
 800656c:	d0ad      	beq.n	80064ca <_printf_i+0x15a>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	079b      	lsls	r3, r3, #30
 8006572:	d413      	bmi.n	800659c <_printf_i+0x22c>
 8006574:	68e0      	ldr	r0, [r4, #12]
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	4298      	cmp	r0, r3
 800657a:	bfb8      	it	lt
 800657c:	4618      	movlt	r0, r3
 800657e:	e7a6      	b.n	80064ce <_printf_i+0x15e>
 8006580:	2301      	movs	r3, #1
 8006582:	4632      	mov	r2, r6
 8006584:	4649      	mov	r1, r9
 8006586:	4640      	mov	r0, r8
 8006588:	47d0      	blx	sl
 800658a:	3001      	adds	r0, #1
 800658c:	d09d      	beq.n	80064ca <_printf_i+0x15a>
 800658e:	3501      	adds	r5, #1
 8006590:	68e3      	ldr	r3, [r4, #12]
 8006592:	9903      	ldr	r1, [sp, #12]
 8006594:	1a5b      	subs	r3, r3, r1
 8006596:	42ab      	cmp	r3, r5
 8006598:	dcf2      	bgt.n	8006580 <_printf_i+0x210>
 800659a:	e7eb      	b.n	8006574 <_printf_i+0x204>
 800659c:	2500      	movs	r5, #0
 800659e:	f104 0619 	add.w	r6, r4, #25
 80065a2:	e7f5      	b.n	8006590 <_printf_i+0x220>
 80065a4:	08006cf3 	.word	0x08006cf3
 80065a8:	08006d04 	.word	0x08006d04

080065ac <__sflush_r>:
 80065ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	0716      	lsls	r6, r2, #28
 80065b4:	4605      	mov	r5, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	d454      	bmi.n	8006664 <__sflush_r+0xb8>
 80065ba:	684b      	ldr	r3, [r1, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dc02      	bgt.n	80065c6 <__sflush_r+0x1a>
 80065c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd48      	ble.n	8006658 <__sflush_r+0xac>
 80065c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	d045      	beq.n	8006658 <__sflush_r+0xac>
 80065cc:	2300      	movs	r3, #0
 80065ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065d2:	682f      	ldr	r7, [r5, #0]
 80065d4:	6a21      	ldr	r1, [r4, #32]
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	d030      	beq.n	800663c <__sflush_r+0x90>
 80065da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	0759      	lsls	r1, r3, #29
 80065e0:	d505      	bpl.n	80065ee <__sflush_r+0x42>
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	1ad2      	subs	r2, r2, r3
 80065e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065e8:	b10b      	cbz	r3, 80065ee <__sflush_r+0x42>
 80065ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065ec:	1ad2      	subs	r2, r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	4628      	mov	r0, r5
 80065f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065f4:	6a21      	ldr	r1, [r4, #32]
 80065f6:	47b0      	blx	r6
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	d106      	bne.n	800660c <__sflush_r+0x60>
 80065fe:	6829      	ldr	r1, [r5, #0]
 8006600:	291d      	cmp	r1, #29
 8006602:	d82b      	bhi.n	800665c <__sflush_r+0xb0>
 8006604:	4a28      	ldr	r2, [pc, #160]	@ (80066a8 <__sflush_r+0xfc>)
 8006606:	40ca      	lsrs	r2, r1
 8006608:	07d6      	lsls	r6, r2, #31
 800660a:	d527      	bpl.n	800665c <__sflush_r+0xb0>
 800660c:	2200      	movs	r2, #0
 800660e:	6062      	str	r2, [r4, #4]
 8006610:	6922      	ldr	r2, [r4, #16]
 8006612:	04d9      	lsls	r1, r3, #19
 8006614:	6022      	str	r2, [r4, #0]
 8006616:	d504      	bpl.n	8006622 <__sflush_r+0x76>
 8006618:	1c42      	adds	r2, r0, #1
 800661a:	d101      	bne.n	8006620 <__sflush_r+0x74>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b903      	cbnz	r3, 8006622 <__sflush_r+0x76>
 8006620:	6560      	str	r0, [r4, #84]	@ 0x54
 8006622:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006624:	602f      	str	r7, [r5, #0]
 8006626:	b1b9      	cbz	r1, 8006658 <__sflush_r+0xac>
 8006628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800662c:	4299      	cmp	r1, r3
 800662e:	d002      	beq.n	8006636 <__sflush_r+0x8a>
 8006630:	4628      	mov	r0, r5
 8006632:	f7ff fca3 	bl	8005f7c <_free_r>
 8006636:	2300      	movs	r3, #0
 8006638:	6363      	str	r3, [r4, #52]	@ 0x34
 800663a:	e00d      	b.n	8006658 <__sflush_r+0xac>
 800663c:	2301      	movs	r3, #1
 800663e:	4628      	mov	r0, r5
 8006640:	47b0      	blx	r6
 8006642:	4602      	mov	r2, r0
 8006644:	1c50      	adds	r0, r2, #1
 8006646:	d1c9      	bne.n	80065dc <__sflush_r+0x30>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0c6      	beq.n	80065dc <__sflush_r+0x30>
 800664e:	2b1d      	cmp	r3, #29
 8006650:	d001      	beq.n	8006656 <__sflush_r+0xaa>
 8006652:	2b16      	cmp	r3, #22
 8006654:	d11d      	bne.n	8006692 <__sflush_r+0xe6>
 8006656:	602f      	str	r7, [r5, #0]
 8006658:	2000      	movs	r0, #0
 800665a:	e021      	b.n	80066a0 <__sflush_r+0xf4>
 800665c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006660:	b21b      	sxth	r3, r3
 8006662:	e01a      	b.n	800669a <__sflush_r+0xee>
 8006664:	690f      	ldr	r7, [r1, #16]
 8006666:	2f00      	cmp	r7, #0
 8006668:	d0f6      	beq.n	8006658 <__sflush_r+0xac>
 800666a:	0793      	lsls	r3, r2, #30
 800666c:	bf18      	it	ne
 800666e:	2300      	movne	r3, #0
 8006670:	680e      	ldr	r6, [r1, #0]
 8006672:	bf08      	it	eq
 8006674:	694b      	ldreq	r3, [r1, #20]
 8006676:	1bf6      	subs	r6, r6, r7
 8006678:	600f      	str	r7, [r1, #0]
 800667a:	608b      	str	r3, [r1, #8]
 800667c:	2e00      	cmp	r6, #0
 800667e:	ddeb      	ble.n	8006658 <__sflush_r+0xac>
 8006680:	4633      	mov	r3, r6
 8006682:	463a      	mov	r2, r7
 8006684:	4628      	mov	r0, r5
 8006686:	6a21      	ldr	r1, [r4, #32]
 8006688:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800668c:	47e0      	blx	ip
 800668e:	2800      	cmp	r0, #0
 8006690:	dc07      	bgt.n	80066a2 <__sflush_r+0xf6>
 8006692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800669a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a2:	4407      	add	r7, r0
 80066a4:	1a36      	subs	r6, r6, r0
 80066a6:	e7e9      	b.n	800667c <__sflush_r+0xd0>
 80066a8:	20400001 	.word	0x20400001

080066ac <_fflush_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	690b      	ldr	r3, [r1, #16]
 80066b0:	4605      	mov	r5, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	b913      	cbnz	r3, 80066bc <_fflush_r+0x10>
 80066b6:	2500      	movs	r5, #0
 80066b8:	4628      	mov	r0, r5
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	b118      	cbz	r0, 80066c6 <_fflush_r+0x1a>
 80066be:	6a03      	ldr	r3, [r0, #32]
 80066c0:	b90b      	cbnz	r3, 80066c6 <_fflush_r+0x1a>
 80066c2:	f7ff fb2b 	bl	8005d1c <__sinit>
 80066c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f3      	beq.n	80066b6 <_fflush_r+0xa>
 80066ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066d0:	07d0      	lsls	r0, r2, #31
 80066d2:	d404      	bmi.n	80066de <_fflush_r+0x32>
 80066d4:	0599      	lsls	r1, r3, #22
 80066d6:	d402      	bmi.n	80066de <_fflush_r+0x32>
 80066d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066da:	f7ff fc4c 	bl	8005f76 <__retarget_lock_acquire_recursive>
 80066de:	4628      	mov	r0, r5
 80066e0:	4621      	mov	r1, r4
 80066e2:	f7ff ff63 	bl	80065ac <__sflush_r>
 80066e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066e8:	4605      	mov	r5, r0
 80066ea:	07da      	lsls	r2, r3, #31
 80066ec:	d4e4      	bmi.n	80066b8 <_fflush_r+0xc>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	059b      	lsls	r3, r3, #22
 80066f2:	d4e1      	bmi.n	80066b8 <_fflush_r+0xc>
 80066f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066f6:	f7ff fc3f 	bl	8005f78 <__retarget_lock_release_recursive>
 80066fa:	e7dd      	b.n	80066b8 <_fflush_r+0xc>

080066fc <__sread>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	460c      	mov	r4, r1
 8006700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006704:	f000 f956 	bl	80069b4 <_read_r>
 8006708:	2800      	cmp	r0, #0
 800670a:	bfab      	itete	ge
 800670c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800670e:	89a3      	ldrhlt	r3, [r4, #12]
 8006710:	181b      	addge	r3, r3, r0
 8006712:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006716:	bfac      	ite	ge
 8006718:	6563      	strge	r3, [r4, #84]	@ 0x54
 800671a:	81a3      	strhlt	r3, [r4, #12]
 800671c:	bd10      	pop	{r4, pc}

0800671e <__swrite>:
 800671e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006722:	461f      	mov	r7, r3
 8006724:	898b      	ldrh	r3, [r1, #12]
 8006726:	4605      	mov	r5, r0
 8006728:	05db      	lsls	r3, r3, #23
 800672a:	460c      	mov	r4, r1
 800672c:	4616      	mov	r6, r2
 800672e:	d505      	bpl.n	800673c <__swrite+0x1e>
 8006730:	2302      	movs	r3, #2
 8006732:	2200      	movs	r2, #0
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	f000 f92a 	bl	8006990 <_lseek_r>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	4632      	mov	r2, r6
 8006740:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	4628      	mov	r0, r5
 8006748:	463b      	mov	r3, r7
 800674a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800674e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006752:	f000 b941 	b.w	80069d8 <_write_r>

08006756 <__sseek>:
 8006756:	b510      	push	{r4, lr}
 8006758:	460c      	mov	r4, r1
 800675a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675e:	f000 f917 	bl	8006990 <_lseek_r>
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	bf15      	itete	ne
 8006768:	6560      	strne	r0, [r4, #84]	@ 0x54
 800676a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800676e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006772:	81a3      	strheq	r3, [r4, #12]
 8006774:	bf18      	it	ne
 8006776:	81a3      	strhne	r3, [r4, #12]
 8006778:	bd10      	pop	{r4, pc}

0800677a <__sclose>:
 800677a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677e:	f000 b93d 	b.w	80069fc <_close_r>

08006782 <__swbuf_r>:
 8006782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006784:	460e      	mov	r6, r1
 8006786:	4614      	mov	r4, r2
 8006788:	4605      	mov	r5, r0
 800678a:	b118      	cbz	r0, 8006794 <__swbuf_r+0x12>
 800678c:	6a03      	ldr	r3, [r0, #32]
 800678e:	b90b      	cbnz	r3, 8006794 <__swbuf_r+0x12>
 8006790:	f7ff fac4 	bl	8005d1c <__sinit>
 8006794:	69a3      	ldr	r3, [r4, #24]
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	071a      	lsls	r2, r3, #28
 800679c:	d501      	bpl.n	80067a2 <__swbuf_r+0x20>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	b943      	cbnz	r3, 80067b4 <__swbuf_r+0x32>
 80067a2:	4621      	mov	r1, r4
 80067a4:	4628      	mov	r0, r5
 80067a6:	f000 f82b 	bl	8006800 <__swsetup_r>
 80067aa:	b118      	cbz	r0, 80067b4 <__swbuf_r+0x32>
 80067ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80067b0:	4638      	mov	r0, r7
 80067b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	6922      	ldr	r2, [r4, #16]
 80067b8:	b2f6      	uxtb	r6, r6
 80067ba:	1a98      	subs	r0, r3, r2
 80067bc:	6963      	ldr	r3, [r4, #20]
 80067be:	4637      	mov	r7, r6
 80067c0:	4283      	cmp	r3, r0
 80067c2:	dc05      	bgt.n	80067d0 <__swbuf_r+0x4e>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7ff ff70 	bl	80066ac <_fflush_r>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1ed      	bne.n	80067ac <__swbuf_r+0x2a>
 80067d0:	68a3      	ldr	r3, [r4, #8]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	60a3      	str	r3, [r4, #8]
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	6022      	str	r2, [r4, #0]
 80067dc:	701e      	strb	r6, [r3, #0]
 80067de:	6962      	ldr	r2, [r4, #20]
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d004      	beq.n	80067f0 <__swbuf_r+0x6e>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	07db      	lsls	r3, r3, #31
 80067ea:	d5e1      	bpl.n	80067b0 <__swbuf_r+0x2e>
 80067ec:	2e0a      	cmp	r6, #10
 80067ee:	d1df      	bne.n	80067b0 <__swbuf_r+0x2e>
 80067f0:	4621      	mov	r1, r4
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7ff ff5a 	bl	80066ac <_fflush_r>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d0d9      	beq.n	80067b0 <__swbuf_r+0x2e>
 80067fc:	e7d6      	b.n	80067ac <__swbuf_r+0x2a>
	...

08006800 <__swsetup_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4b29      	ldr	r3, [pc, #164]	@ (80068a8 <__swsetup_r+0xa8>)
 8006804:	4605      	mov	r5, r0
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	460c      	mov	r4, r1
 800680a:	b118      	cbz	r0, 8006814 <__swsetup_r+0x14>
 800680c:	6a03      	ldr	r3, [r0, #32]
 800680e:	b90b      	cbnz	r3, 8006814 <__swsetup_r+0x14>
 8006810:	f7ff fa84 	bl	8005d1c <__sinit>
 8006814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006818:	0719      	lsls	r1, r3, #28
 800681a:	d422      	bmi.n	8006862 <__swsetup_r+0x62>
 800681c:	06da      	lsls	r2, r3, #27
 800681e:	d407      	bmi.n	8006830 <__swsetup_r+0x30>
 8006820:	2209      	movs	r2, #9
 8006822:	602a      	str	r2, [r5, #0]
 8006824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	e033      	b.n	8006898 <__swsetup_r+0x98>
 8006830:	0758      	lsls	r0, r3, #29
 8006832:	d512      	bpl.n	800685a <__swsetup_r+0x5a>
 8006834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006836:	b141      	cbz	r1, 800684a <__swsetup_r+0x4a>
 8006838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800683c:	4299      	cmp	r1, r3
 800683e:	d002      	beq.n	8006846 <__swsetup_r+0x46>
 8006840:	4628      	mov	r0, r5
 8006842:	f7ff fb9b 	bl	8005f7c <_free_r>
 8006846:	2300      	movs	r3, #0
 8006848:	6363      	str	r3, [r4, #52]	@ 0x34
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	2300      	movs	r3, #0
 8006854:	6063      	str	r3, [r4, #4]
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f043 0308 	orr.w	r3, r3, #8
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	b94b      	cbnz	r3, 800687a <__swsetup_r+0x7a>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800686c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006870:	d003      	beq.n	800687a <__swsetup_r+0x7a>
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f000 f83e 	bl	80068f6 <__smakebuf_r>
 800687a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687e:	f013 0201 	ands.w	r2, r3, #1
 8006882:	d00a      	beq.n	800689a <__swsetup_r+0x9a>
 8006884:	2200      	movs	r2, #0
 8006886:	60a2      	str	r2, [r4, #8]
 8006888:	6962      	ldr	r2, [r4, #20]
 800688a:	4252      	negs	r2, r2
 800688c:	61a2      	str	r2, [r4, #24]
 800688e:	6922      	ldr	r2, [r4, #16]
 8006890:	b942      	cbnz	r2, 80068a4 <__swsetup_r+0xa4>
 8006892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006896:	d1c5      	bne.n	8006824 <__swsetup_r+0x24>
 8006898:	bd38      	pop	{r3, r4, r5, pc}
 800689a:	0799      	lsls	r1, r3, #30
 800689c:	bf58      	it	pl
 800689e:	6962      	ldrpl	r2, [r4, #20]
 80068a0:	60a2      	str	r2, [r4, #8]
 80068a2:	e7f4      	b.n	800688e <__swsetup_r+0x8e>
 80068a4:	2000      	movs	r0, #0
 80068a6:	e7f7      	b.n	8006898 <__swsetup_r+0x98>
 80068a8:	2000004c 	.word	0x2000004c

080068ac <__swhatbuf_r>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	460c      	mov	r4, r1
 80068b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b4:	4615      	mov	r5, r2
 80068b6:	2900      	cmp	r1, #0
 80068b8:	461e      	mov	r6, r3
 80068ba:	b096      	sub	sp, #88	@ 0x58
 80068bc:	da0c      	bge.n	80068d8 <__swhatbuf_r+0x2c>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	2100      	movs	r1, #0
 80068c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80068c6:	bf14      	ite	ne
 80068c8:	2340      	movne	r3, #64	@ 0x40
 80068ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80068ce:	2000      	movs	r0, #0
 80068d0:	6031      	str	r1, [r6, #0]
 80068d2:	602b      	str	r3, [r5, #0]
 80068d4:	b016      	add	sp, #88	@ 0x58
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	466a      	mov	r2, sp
 80068da:	f000 f89f 	bl	8006a1c <_fstat_r>
 80068de:	2800      	cmp	r0, #0
 80068e0:	dbed      	blt.n	80068be <__swhatbuf_r+0x12>
 80068e2:	9901      	ldr	r1, [sp, #4]
 80068e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80068e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80068ec:	4259      	negs	r1, r3
 80068ee:	4159      	adcs	r1, r3
 80068f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068f4:	e7eb      	b.n	80068ce <__swhatbuf_r+0x22>

080068f6 <__smakebuf_r>:
 80068f6:	898b      	ldrh	r3, [r1, #12]
 80068f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068fa:	079d      	lsls	r5, r3, #30
 80068fc:	4606      	mov	r6, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	d507      	bpl.n	8006912 <__smakebuf_r+0x1c>
 8006902:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	2301      	movs	r3, #1
 800690c:	6163      	str	r3, [r4, #20]
 800690e:	b003      	add	sp, #12
 8006910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006912:	466a      	mov	r2, sp
 8006914:	ab01      	add	r3, sp, #4
 8006916:	f7ff ffc9 	bl	80068ac <__swhatbuf_r>
 800691a:	9f00      	ldr	r7, [sp, #0]
 800691c:	4605      	mov	r5, r0
 800691e:	4639      	mov	r1, r7
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff f8e3 	bl	8005aec <_malloc_r>
 8006926:	b948      	cbnz	r0, 800693c <__smakebuf_r+0x46>
 8006928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692c:	059a      	lsls	r2, r3, #22
 800692e:	d4ee      	bmi.n	800690e <__smakebuf_r+0x18>
 8006930:	f023 0303 	bic.w	r3, r3, #3
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	e7e2      	b.n	8006902 <__smakebuf_r+0xc>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	9b01      	ldr	r3, [sp, #4]
 800694a:	6020      	str	r0, [r4, #0]
 800694c:	b15b      	cbz	r3, 8006966 <__smakebuf_r+0x70>
 800694e:	4630      	mov	r0, r6
 8006950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006954:	f000 f80c 	bl	8006970 <_isatty_r>
 8006958:	b128      	cbz	r0, 8006966 <__smakebuf_r+0x70>
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f023 0303 	bic.w	r3, r3, #3
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	431d      	orrs	r5, r3
 800696a:	81a5      	strh	r5, [r4, #12]
 800696c:	e7cf      	b.n	800690e <__smakebuf_r+0x18>
	...

08006970 <_isatty_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	2300      	movs	r3, #0
 8006974:	4d05      	ldr	r5, [pc, #20]	@ (800698c <_isatty_r+0x1c>)
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	f7fc fd3b 	bl	80033f6 <_isatty>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_isatty_r+0x1a>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_isatty_r+0x1a>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	2000036c 	.word	0x2000036c

08006990 <_lseek_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	2200      	movs	r2, #0
 800699a:	4d05      	ldr	r5, [pc, #20]	@ (80069b0 <_lseek_r+0x20>)
 800699c:	602a      	str	r2, [r5, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f7fc fd33 	bl	800340a <_lseek>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_lseek_r+0x1e>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_lseek_r+0x1e>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	2000036c 	.word	0x2000036c

080069b4 <_read_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	2200      	movs	r2, #0
 80069be:	4d05      	ldr	r5, [pc, #20]	@ (80069d4 <_read_r+0x20>)
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f7fc fcc4 	bl	8003350 <_read>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_read_r+0x1e>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_read_r+0x1e>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	2000036c 	.word	0x2000036c

080069d8 <_write_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	4611      	mov	r1, r2
 80069e0:	2200      	movs	r2, #0
 80069e2:	4d05      	ldr	r5, [pc, #20]	@ (80069f8 <_write_r+0x20>)
 80069e4:	602a      	str	r2, [r5, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f7fc fccf 	bl	800338a <_write>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_write_r+0x1e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_write_r+0x1e>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	2000036c 	.word	0x2000036c

080069fc <_close_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	2300      	movs	r3, #0
 8006a00:	4d05      	ldr	r5, [pc, #20]	@ (8006a18 <_close_r+0x1c>)
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fc fcdb 	bl	80033c2 <_close>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_close_r+0x1a>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_close_r+0x1a>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	2000036c 	.word	0x2000036c

08006a1c <_fstat_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4d06      	ldr	r5, [pc, #24]	@ (8006a3c <_fstat_r+0x20>)
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	4611      	mov	r1, r2
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	f7fc fcd5 	bl	80033d8 <_fstat>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	d102      	bne.n	8006a38 <_fstat_r+0x1c>
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	b103      	cbz	r3, 8006a38 <_fstat_r+0x1c>
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	bf00      	nop
 8006a3c:	2000036c 	.word	0x2000036c

08006a40 <memchr>:
 8006a40:	4603      	mov	r3, r0
 8006a42:	b510      	push	{r4, lr}
 8006a44:	b2c9      	uxtb	r1, r1
 8006a46:	4402      	add	r2, r0
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	d101      	bne.n	8006a52 <memchr+0x12>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e003      	b.n	8006a5a <memchr+0x1a>
 8006a52:	7804      	ldrb	r4, [r0, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	428c      	cmp	r4, r1
 8006a58:	d1f6      	bne.n	8006a48 <memchr+0x8>
 8006a5a:	bd10      	pop	{r4, pc}

08006a5c <_init>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr

08006a68 <_fini>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr
